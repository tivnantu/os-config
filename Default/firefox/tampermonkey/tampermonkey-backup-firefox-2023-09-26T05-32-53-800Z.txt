{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Github 增强 - 高速下载","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":"JavaScript","noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://github.com/*","*://kgithub.com/*","*://hub.fgit.gq/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1685292596744,"data":{"xiu2_menu_raw_fast":"n1","menu_rawDownLink":"btrue","menu_gitClone":"btrue"}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD/code/Github%20%E5%A2%9E%E5%BC%BA%20-%20%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD.user.js","uuid":"c2372b7c-7849-442b-866d-cbe86048c1b1","source":""},{"name":"哔哩哔哩(B站|Bilibili)收藏夹Fix","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://space.bilibili.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["biliplus.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1685220801241,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/383143-%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9-b%E7%AB%99-bilibili-%E6%94%B6%E8%97%8F%E5%A4%B9fix/code/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9(B%E7%AB%99%7CBilibili)%E6%94%B6%E8%97%8F%E5%A4%B9Fix.user.js","uuid":"67d7c13f-23e9-42d7-bd2b-dd5c3dfd9c50","source":"","resources":[{"meta":{"name":"error.png","url":"https://cdn.jsdelivr.net/gh/Mr-Po/bilibili-favorites-fix/media/error.png","ts":1685220801234,"mimetype":"image/png"},"source":""},{"meta":{"name":"success.png","url":"https://cdn.jsdelivr.net/gh/Mr-Po/bilibili-favorites-fix/media/success.png","ts":1685220801235,"mimetype":"image/png"},"source":""},{"meta":{"name":"info.png","url":"https://cdn.jsdelivr.net/gh/Mr-Po/bilibili-favorites-fix/media/info.png","ts":1685220801235,"mimetype":"image/png"},"source":"wolQTkcNChoKAAAADUlIRFIAAABQAAAAUAgGAAAAwo4Rw7LCrQAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHDiWU8AAADZmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLDr8K7wr8iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOkU5OTZBMTRCMjc3RUU5MTE4NzZDRDdDOTA3RjdCNUEyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjc3MjZENERBN0UyNzExRTk5Qjk4OEMxNTE2QjQ4Q0E5IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjc3MjZENEQ5N0UyNzExRTk5Qjk4OEMxNTE2QjQ4Q0E5IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzYgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RUI5NkExNEIyNzdFRTkxMTg3NkNEN0M5MDdGN0I1QTIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RTk5NkExNEIyNzdFRTkxMTg3NkNEN0M5MDdGN0I1QTIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7DksKtw5PCpgAACldJREFUeMOaw6xdCWwUw6cVfsO/w47DrMOpw7XDmsOYYC9ewojCuQIuRzBQSFsCMSjCrcK4QlsSEsKKFCLCoTTCisKKw5IjEk3DlUrCrcOSAyVKKzUkTcOURGrCpMKoIj3CkhRUJSjDpChNS8KBQksJFMOqYGJ8w6/DuljCvMK7w7bDnjN/w5/Dmx3Cp2bCvcKXw5fCuzPDhsKdwoc+WcOeXcOvw7zDs8ONw7/Cv8O3wr3Dtx8ww445w6hWwrgZdAomZmLCuhfCvcK+KEgSw5fCqj1zR8K/IEkSwqTCjMKSVkQ8w58vwpTDsW/Di20mcMKUwpvDlCEwHsOnw7DDvMKhFsOow7VGQBRYKcOJwrIhw6YjwpYhwpYjGsKUw58Xwo18woDCiMOzwrg9EMKLw4fCgcKxT8Oaw5LCjMOoQHzCiDjCj8K4wqTCkMOqS3fCkWAoDjs2LcKAwr07wpfCqMOXA8Kpw7cRSkBfBWIjYgfDog5EPSLDo2XCiMOAwpgkI8KBw7JoAsKXKMOYNMOqwqNdwojCk8KIPyLDnkLDtMKPwrwRwovDiSUdTWkJwqTCtsKOwqBIw7Y5w4Q9wojCncKIw5nDo3LDksOYCALDi8OeGBfDol4FbsOEYcOEwqvCiA8MBlbDjMO7UD3CiGxFw7wJcQLDscOYeMOJK8OQwpzCiEcQf0bCnEJsF0rDqMKKw4QSfS/DtcK4w68hwrZoHCRvN8KbwoUjwqfDjsK5wo/Ct3cFwp4wwpnChMOjwo/DrmkEe8KZEcOOfMOowoHDg8OHwq7CgsOZJMOkw7wSciVGwqMBw7Y9w5AIFSnDgcKow5gEViMOIB7CnjQyA3vCn8KnL8OYwoQENsKJIjvCtHt7w4N+JMKww5vDkx/ChBNnwrvCocOMZsOMHcOJZRnDjGYRHsK6XyrDqRDDnsKOOD3CmcOIS8O2HgAaw4I2wqsIwoLDgcKww7vChwdPwp0+e8OBwrPDi8KCPcOPworCr1nDjEIeSH4uwp0vLUYPwqTCh8OwJGLDv2QXwr1EZMKfNzTDq8OAL8OOwrzDqsKcYcK7w4NqFsK/RcKBWsOLIFLCrUTCvElPw57CiBnDhcOkLXd5wobDtmHCjyLDiTNLKwJnIsOeRcOcfcKzwqVfNBRFIXHDq3fCkcOUUcKEwrzCqgQuRRxDNE7CgXTCllLDh8KjwoXCklgIwoHDtQp5S8KnUE1gwqZCw6JtwqUmwpBEw6oRw6XCglPDjcOowp5eR8OUwpXCikASTMKHJsOiL24CW8KAw7gDw4JaCgJ/worDmABTw5/DliBeKDbCgV9GfF3DjcK7wqDCslo4IkEIQRUVwpXDrUHDhMOeYsOlw4LCtcOjeSLDhcOIHMKiSMOYw6zCmVY+b3YZDMO0M8K4w5LDqsKDwo87wobCmcKAw5LDg8KgXg3DvWnDhHvCiMK2wokSw7jClELCojo9T8KSYcOzeifDn8K8fiYjw5Ebw7DDmSEYworDgsO7wqc9w7zDt0c7GRHDjMKYKk3CqULDvFwZfQUPw6HDjyLDtsKoRV4kKsODw6plVXzDu0ZXwoI8wqrCggTDg8OxRFl+W8KTwottWsOnw6TCkcKYwqTDplDDvlLCrkTDgcKQwqN3w74MAMKYWsKtFUUGd8KuwqlJUw1Jw7rDg3XCn8Kew4EcdiPDvsKuwqo/PMKQbcKkZiPDsH7CpQfCqmISwpJkwrfCicK8ZsKaOcODw5DDplBRbsKEw6pKE8KXw5RlwpASwobDncOjJcKQesOdY1rDpMKoLMOLI8OFwrfCuUHCm8KJw5jDryg6OG8CwqnCosK8UsKLwpZmwpvDp8OnOcOeL8KhfQrDscO5wrwITE7DgsKwwq/CgW7CqcKjY8KfIU3DuB9DYGA4w6YaDsOFw68mInXDu8Kfw69AYcK/ERXDgMOcwpwEXsK8w6LDu8OidX/CtFzDp28UScOYw7PChsKGY8KWM8Onw507cxJ4wr55cMKHwoHDqcOswqUaTQfCnDzDp8OewpEqw6tuIBDDs8OOw4oud2jChVHDlAlMNcKjKEBrwofCr8Kxw48bwqrDj0jCoMK7P8K8w4Q/HMKvYnoPHDvCjMKRwqnDoWDDjMOcw5ETWMKcwpHDgE53cGU0KsKBw45fw6Y8w73Do3bDn8OKw4wEw7bChFbDqsOkZcOrwoUMwofCsT89woEoUA09fcKhwqXCunzDiRJIcBx3e8KGFhJXYwjDtMO6wqJzwrrDu8OCw4tGw6ZNdUtHIMKDwoHDgXDDncKgP8OiHEPCoCxzwpHCoMOTwpRdw4p4B8ODw5PDmsK6w73Di8OSw7lAwq5AwrfDrElJwqLCqMKRwqvCmMKgW8K+woFFwqdAJ1AnUCdQJ8OwwoYgwqNdwoTDi8KxM8Kgw4g7BwoywqrCiMKjw5wTJl0PZMO4T8KSOMOLwrTCp8KDJcK0KsKwWMKMJz7Cq8KFw5HDrGDChcODFMKowqvCtTfCjyHCsMKqw4LDlMOmwpxuwrkUw5dmwotXwqLDmhEYwo5Dwqc7wpTDtn1aJcOfw6cNQ8O/w7UoEwRtCMKkwodbw6nCsMO0TcKfZsOtGEMgNipaW23CuSxJwrLCpsODw6PDrcK/wro/w5lZw4RYcsKTwowJw4nCo8Kfb33DkMODQ2HDrcKqRTTDtVpTbWtFwq5iacKHw7DDjBrDi0Utd8K/ElHDjcOXAsOsw4XDn13DpcOdwr3CoURLRMOBw4B7wr0Rw74Swr52w7LDnAAzwpvCtMOzOjQfPcOvFsOHP0bCv3ZDw65bw68qOyVqXEwwI8KJFz7DssKxwpbDtiHCqMKrwrHDsMKBw75ew57DmhEwBMKGJcOQwpLCvMKkwpthwrDCoMK+w7JsRgLDiQfDmsKsQigSwpHCrQbCg8K2PTEWw6fDkMOSNsOEw5zDrgDDo8Kyw7bDpMORw4jCtMKaRXnClsOTw77Cn8KMMsKmw4Juw6xxw5VYw49rFUhuaMKYw6LDuwjCk8KhRkk7RsOrwpzDthbCl8OTfjnCmw7ClBvDpjnDnsOWMsKQwpDDkQPCpMKVWiFlwoElLSzCogXCl8OaEijDgcKKw4U1R8OxYcOGMw5hwrLDhsKGw4rDl8OeOcOhw74uw57ChFHDrWgXwosnK2rDqErCuMKrw5ZKw5LCins8BsOoHQgxDCrDkMOlCTEqJMKRwqRRfcO4WkR+w6fDrcKuX8Knwr43wobDgMKaKsOLw4XDinLDownCjzfDkiTCqsKowrfCqMOHw41yWsO5wrYNdcKweMK+woN2FCVKb37CnwViwrE4wqB8w6HCl8Kuw7rDucKRw7fCusKgwq0rwqhqNMKmdcKKFsKLcMKmw5Jhw75nw45cwpgWM0Ziw7JLwqTCusOVw7QvC8Oqw63DvBt7FsKyw6XCiyrCmUJewqLDocKkw7toCMKjOmBrwpZVwrPDhx9qYEsXOnhUw4V1w5PDhEUoHMO/FcOqUzknwoEkXsKXw55aw7HCusOdJsK2wqlBIg0PwprCh8K5b8OTbFofwpjDtSZowrUqw63DtcOdwrXCtR5sFgHDlHjDhnTDnTLCm3Fgw60qw5drwrRjMyfCgQJ+ZsOXw5ZbIl9Yw6t8wpHChsKVGsOqwr7CqsOCSD7Cj8OlO8OUw5FHwrIZw5VmVU4Ww4HCngfDm8OvwprDv8O8w77Ch1cNOMOswqbDvMOLWcOrV8OPeAZ9UkfCqSUNSRTDv1DCnHl9w5HCvC5Ew4tOwq7Du8KjcMOdFyvDuWJLwrrDt8K6WsK7d8OLwoY5w4/DplvDjhotZsKHP8OTOMO9CcOyT8Klw5Z7QcO0c28cw6vDjMOawqNIESTCtsOnw6PDj8ODw690cl8gw4bChBLDq0NawqXCsWZ5w61PwrDDp8O1wo3Cm0Ayw4xKXsKGw6TCgRElw488w45dHmQvw7zCpsKFwrfDtwTDuWh/bEVfR8O+wo5Sw4zDlsOOIX7DsMKVwo/DuMOfw5TDi8KJw79tNArDj2XDu8KAwpjDg8KBUsO3exTCkmfCssKYS8KaAyMhwpdaw7zDrCrDpsOAw7Nnw5s5RWXCu01gwr3CvcK9OGTDg8K8w6XDmhDCu8KCwqldOCLCq8KVw5bDkX7Cim/CohLCiBZMwqBiw6cQP0bDvEjCjcKeSAvDsFHDr8KxwotXfMKMZMKMw5vDrcKBaCzDjmjCgzRFaxXDtR9tw7F4N8KnC8OKw7PDi8Kew4rDp8OLwophI8O1wr/DkcKHPlgRIzVBwpXCjMOOwpvDuUFePjxfwq0Lw4kdS8KdMMO1w43Cg8O4CiJcTALDiXogwrnDrcOJP8KFw4nCo8O5BMOaVHMtbxUxw44Lw7xLeTrCoSlKIMOdw5vDu8OjwpJhBVzChMKOCsK5d8KKwpFIwpHClsOOw5s6Mm4dW8OgBcKJRFrDsh/CnALDpMKRwq/Co8OVw7fCvywoEcKYw4DChcOfwoTDpMK5K8OtNyNrcnLDtmzDhMKvwr9ZcCY1w4F2wpDDgF7Chzh+wrMQR8OaMsKCKcKaw4Usw74dwpJnQExIwp4VQ8KVUg/DnMKkaEVpUsO3OsKZJ8KqPw/DnsKzw7jDqV3DmxZtCEfCpMOmCcOnw7JFalsEwpJbQjcqwpF6w5IRR8KFwoHCuCQ3P8O+w4jDqsKtO8K3w5zDum3Cs0kIwobClQMtMiHCmsOHw7HCocOFXhNNw6dQwq1FfFUhw5TCqcO9wpAFKC8zw7XDmsOLwozDj8KZw43DgsKzwrc1TB9MFEosIsOMwp3DpcKgUn3DpsOoEsKWwqDCqsOSwqIqwoHCoETDpmcQwr9Fw5DCtsOZfcKQPMOAQQsLwoTDgsOxwpc3N8ONeXLDr31LKGDDgEgJbMOdGhfCrF3CncO7wpDColwVwrNSwq7DisKnw4Ngwr/Cr8OIA8OSwo0PIFbCqUQcHcKPw7wKw6INw4oqwqjDsMKaWjvCpMK8WihCcsKtw4bCtsKGLsKlRx7ChMOkTnjDksKPwpsRC8KLfMKddkUIw5PDuVd/IcOXN3oYwpfDinLDlQMTwo7CtEjDk8KbdBsnFMKQf1zCgVjCrMO8wqTDrVNzIMOlUDPCkhzDkRg6w7rDhMO+PcKWwprCl1PCvnoRwpLDh8KOw5Jhw5wXEENjwqJbInjClMKOQcKWw60/I8KgwrnCh8Kewr4wCMOqLMKtwqhQwog0w55AYDTCmnoUPFXChmh+w5bCl8OPwpdSFMKtwp1uA8KXw5PCrj7CgcK6wqnCpwPDv2/DrcK/AgwAFGfDrTfCnk/Dn8KoAAAAAElFTkTCrkJgwoI="}],"requires":[{"meta":{"name":"jquery.min.js","url":"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.0/jquery.min.js","ts":1685220801236,"mimetype":"text/javascript"},"source":""}]},{"name":"直接显示StackOverflow的答题日期","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://stackoverflow.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1685220801245,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/368061-%E7%9B%B4%E6%8E%A5%E6%98%BE%E7%A4%BAstackoverflow%E7%9A%84%E7%AD%94%E9%A2%98%E6%97%A5%E6%9C%9F/code/%E7%9B%B4%E6%8E%A5%E6%98%BE%E7%A4%BAStackOverflow%E7%9A%84%E7%AD%94%E9%A2%98%E6%97%A5%E6%9C%9F.user.js","uuid":"a986622f-4d79-4a37-8aa4-a50c00446aca","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnm7TmjqXmmL7npLpTdGFja092ZXJmbG9355qE562U6aKY5pel5pyfCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgZGlyZWN0bHkgc2hvdyB0aGUgcG9zdCBkYXRlIG9mIGFuc3dlcnMgYXQgU3RhY2tPdmVyZmxvdy5jb20KLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnCiAgICB2YXIgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVzZXItYWN0aW9uLXRpbWUnKQogICAgYmxvY2tzLmZvckVhY2goZnVuY3Rpb24oZWxlKSB7CiAgICAgICAgdmFyIHJlbGF0aXZldGltZSA9IGVsZS5xdWVyeVNlbGVjdG9yKCcucmVsYXRpdmV0aW1lJykKICAgICAgICB2YXIgdGltZSA9IG5ldyBEYXRlKHJlbGF0aXZldGltZS50aXRsZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCkKICAgICAgICByZWxhdGl2ZXRpbWUuaW5uZXJUZXh0ID0gdGltZQogICAgfSkKfSkoKQo="},{"name":"CSDN 去广告沉浸阅读模式","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["https://bbs.csdn.net/topics/*","https://*.iteye.com/blog/*","https://*.iteye.com/news/*","https://ask.csdn.net/questions/*"],"merge_includes":true,"use_matches":[],"orig_matches":["*://blog.csdn.net/*/article/details/*","*://*.blog.csdn.net/article/details/*","<$URL$>"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1685220801250,"data":{"$CSDNCleaner_background_ranges":"s{\"categorys\":[],\"imgs\":[],\"customUrl\":\"\",\"bgColor\":\"rgb(250, 246, 246)\",\"defaultHideMenu\":false,\"hideRecommendBox\":false,\"hideCopyright\":false,\"showCatalogue\":false,\"showSourceLink\":true,\"articleWeightRate\":\"\"}"}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/373457-csdn-%E5%8E%BB%E5%B9%BF%E5%91%8A%E6%B2%89%E6%B5%B8%E9%98%85%E8%AF%BB%E6%A8%A1%E5%BC%8F/code/CSDN%20%E5%8E%BB%E5%B9%BF%E5%91%8A%E6%B2%89%E6%B5%B8%E9%98%85%E8%AF%BB%E6%A8%A1%E5%BC%8F.user.js","uuid":"bbf7f38f-8d66-4ec8-bbe6-86999b02e4e8","source":"","requires":[{"meta":{"name":"acolorpicker.js","url":"https://unpkg.com/a-color-picker@1.2.1/dist/acolorpicker.js","ts":1695495865409,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.min.js","url":"https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js","ts":1695495865408,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"roundslider.min.js","url":"https://cdn.jsdelivr.net/npm/round-slider@1.6.1/dist/roundslider.min.js","ts":1695495865400,"mimetype":"text/javascript"},"source":""}]},{"name":"redirect 外链跳转","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["/^https?:\\/\\/www\\.google\\..{2,7}url/"],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.jianshu.com/go-wild*","*://link.zhihu.com/*","*://t.cn/*","*://weibo.cn/sinaurl*","*://mail.qq.com/cgi-bin/*","*://c.pc.qq.com/middlem.html*","*://c.pc.qq.com/pc.html*","*://c.pc.qq.com/ios.html*","*://app.yinxiang.com/OutboundRedirect.action*","*://jump.bdimg.com/safecheck/*","*://jump2.bdimg.com/safecheck/*","*://link.csdn.net/*","*://www.youtube.com/redirect*","*://weixin110.qq.com/cgi-bin/mmspamsupport-bin/newredirectconfirmcgi*","*://developers.weixin.qq.com/community/middlepage/href*","*://www.itdaan.com/link/*","*://www.douban.com/link2/*","*://www.360doc.com/content/*","*://www.pixiv.net/jump.php*","*://m.sogou.com/*/tc*","*://m.sogou.com*/tc*","*://www.chinaz.com/go.shtml*","*://www.oschina.net/action/GoToLink*","*://link.juejin.cn/*","*://docs.qq.com/scenario/link.html*","*://www.pc6.com/goread.html*","*://afdian.net/link*","*://gitee.com/link*","*://www.tianyancha.com/security*","*://aiqicha.baidu.com/safetip*","*://www.qcc.com/web/transfer-link*","*://link.uisdc.com/*","*://blog.51cto.com/transfer*","*://leetcode.cn/link*","*://huaban.com/go*","*://security.feishu.cn/link/safety*","*://redirect.epicgames.com/*","*://steamcommunity.com/linkfilter/*","*://*.yuque.com/r/goto*","*://hd.nowcoder.com/link.html*","*://game.bilibili.com/linkfilter/*","*://sspai.com/link*","*://jump.5ch.net/*","*://www.kdocs.cn/office/link*","*://shimo.im/outlink/black*","*://google.urlshare.cn/umirror_url_check*","*://www.coolapk.com/link*","*://wpfx.org/go*","*://cloud.tencent.com/developer/tools/blog-entry*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1685220801252,"data":{}},"enabled":false,"position":5,"file_url":"https://greasyfork.org/scripts/416338-redirect-%E5%A4%96%E9%93%BE%E8%B7%B3%E8%BD%AC/code/redirect%20%E5%A4%96%E9%93%BE%E8%B7%B3%E8%BD%AC.user.js","uuid":"2b21b442-b681-495c-a264-a86867ba8967","source":""},{"name":"知乎免登录","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.zhihu.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["api.zhihu.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1685220801252,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/396171-%E7%9F%A5%E4%B9%8E%E5%85%8D%E7%99%BB%E5%BD%95/code/%E7%9F%A5%E4%B9%8E%E5%85%8D%E7%99%BB%E5%BD%95.user.js","uuid":"c7eac0c4-3485-49ba-a7a1-43c79748bdba","source":""},{"name":"anti-redirect","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["*://www.google*"],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.baidu.com/*","*://tieba.baidu.com/*","*://v.baidu.com/*","*://xueshu.baidu.com/*","*://www.google.com/*","*://docs.google.com/*","*://mail.google.com/*","*://play.google.com/*","*://www.youtube.com/*","*://encrypted.google.com/*","*://www.so.com/*","*://www.zhihu.com/*","*://daily.zhihu.com/*","*://zhuanlan.zhihu.com/*","*://weibo.com/*","*://twitter.com/*","*://www.sogou.com/*","*://juejin.im/*","*://juejin.cn/*","*://mail.qq.com/*","*://addons.mozilla.org/*","*://www.jianshu.com/*","*://www.douban.com/*","*://getpocket.com/*","*://www.dogedoge.com/*","*://51.ruyo.net/*","*://steamcommunity.com/*","*://mijisou.com/*","*://blog.csdn.net/*","*://*.blog.csdn.net/*","*://*.oschina.net/*","*://app.yinxiang.com/*","*://www.logonews.cn/*","*://afdian.net/*","*://blog.51cto.com/*","*://xie.infoq.cn/*","*://gitee.com/*","*://sspai.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["www.baidu.com","*"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1693810091349,"data":{}},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/11915-anti-redirect-typescript/code/anti-redirect.user.js","uuid":"7cbce623-80c9-47b0-81f7-823c54dcbd82","source":""},{"name":"bilibili网页端添加APP首页推荐","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["https://www.mcbbs.net/template/mcbbs/image/special_photo_bg.png?*"],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.bilibili.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["app.bilibili.com","api.bilibili.com","passport.bilibili.com","link.acg.tv","www.mcbbs.net"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1695185031940,"data":{}},"enabled":false,"position":8,"file_url":"https://greasyfork.org/scripts/368446-bilibili%E7%BD%91%E9%A1%B5%E7%AB%AF%E6%B7%BB%E5%8A%A0app%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90/code/bilibili%E7%BD%91%E9%A1%B5%E7%AB%AF%E6%B7%BB%E5%8A%A0APP%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90.user.js","uuid":"18aa8b2e-b778-4cb1-bc09-d95195f9ec45","source":""},{"name":"bilibili视频下载","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.bilibili.com/video/av*","*://www.bilibili.com/video/BV*","*://www.bilibili.com/list/*","*://www.bilibili.com/bangumi/play/ep*","*://www.bilibili.com/bangumi/play/ss*","*://www.bilibili.com/cheese/play/ep*","*://www.bilibili.com/cheese/play/ss*","https://www.mcbbs.net/template/mcbbs/image/special_photo_bg.png*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1695191547781,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/413228-bilibili%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/code/bilibili%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD.user.js","uuid":"44498092-3a1b-4e1d-9e91-d5b32bf8fd81","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgYmlsaWJpbGnop4bpopHkuIvovb0KLy8gQG5hbWVzcGFjZSAgICAgaHR0cHM6Ly9naXRodWIuY29tL2luamFob3cKLy8gQHZlcnNpb24gICAgICAgMi40LjYKLy8gQGRlc2NyaXB0aW9uICAg5pSv5oyBV2Vi44CBUlBD44CBQmxvYuOAgUFyaWHnrYnkuIvovb3mlrnlvI/vvJvmlK/mjIHkuIvovb1mbHbjgIFkYXNo44CBbXA06KeG6aKR5qC85byP77yb5pSv5oyB5LiL6L295riv5Yy655Wq5Ymn77yb5pSv5oyB5LiL6L295a2X5bmV5by55bmV77yb5pSv5oyB5o2i5rqQ5pKt5pS+562J5Yqf6IO9Ci8vIEBhdXRob3IgICAgICAgIGluamFob3cKLy8gQGNvcHlyaWdodCAgICAgMjAyMSwgaW5qYWhvdyAoaHR0cHM6Ly9naXRodWIuY29tL2luamFob3cpCi8vIEBsaWNlbnNlICAgICAgIE1JVAovLyBAc291cmNlICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vaW5qYWhvdy91c2VyLmpzCi8vIEBzdXBwb3J0VVJMICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmphaG93L3VzZXIuanMvaXNzdWVzCi8vIEBtYXRjaCAgICAgICAgICo6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2KgovLyBAbWF0Y2ggICAgICAgICAqOi8vd3d3LmJpbGliaWxpLmNvbS92aWRlby9CVioKLy8gQG1hdGNoICAgICAgICAgKjovL3d3dy5iaWxpYmlsaS5jb20vbGlzdC8qCi8vIEBtYXRjaCAgICAgICAgICo6Ly93d3cuYmlsaWJpbGkuY29tL2Jhbmd1bWkvcGxheS9lcCoKLy8gQG1hdGNoICAgICAgICAgKjovL3d3dy5iaWxpYmlsaS5jb20vYmFuZ3VtaS9wbGF5L3NzKgovLyBAbWF0Y2ggICAgICAgICAqOi8vd3d3LmJpbGliaWxpLmNvbS9jaGVlc2UvcGxheS9lcCoKLy8gQG1hdGNoICAgICAgICAgKjovL3d3dy5iaWxpYmlsaS5jb20vY2hlZXNlL3BsYXkvc3MqCi8vIEBtYXRjaCAgICAgICAgIGh0dHBzOi8vd3d3Lm1jYmJzLm5ldC90ZW1wbGF0ZS9tY2Jicy9pbWFnZS9zcGVjaWFsX3Bob3RvX2JnLnBuZyoKLy8gQHJlcXVpcmUgICAgICAgaHR0cHM6Ly9zdGF0aWMuaGRzbGIuY29tL2pzL2pxdWVyeS5taW4uanMKLy8gQGljb24gICAgICAgICAgaHR0cHM6Ly9zdGF0aWMuaGRzbGIuY29tL2ltYWdlcy9mYXZpY29uLmljbwovLyBAY29tcGF0aWJsZSAgICBjaHJvbWUKLy8gQGNvbXBhdGlibGUgICAgZmlyZWZveAovLyBAZ3JhbnQgICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBnbG9iYWxzICQgd2FpdEZvcktleUVsZW1lbnRzICovCi8vIEBbIFlvdSBjYW4gZmluZCBhbGwgc291cmNlIGNvZGVzIGluIEdpdEh1YiByZXBvIF0KKGZ1bmN0aW9uKCkgewogICAgInVzZSBzdHJpY3QiOwogICAgdmFyIF9fd2VicGFja19tb2R1bGVzX18gPSB7CiAgICAgICAgMTMxOiBmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewogICAgICAgICAgICAgICAgdjA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBNZXNzYWdlOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF9wOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWVzc2FnZUJveDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBONTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXRNZXNzYWdlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIHVpX3Njcm9sbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTM3KSwgbWVzc2FnZSA9ICc8ZGl2IGNsYXNzPSJtZXNzYWdlLWJnIj48L2Rpdj4gPGRpdiBpZD0ibWVzc2FnZV9ib3giPiA8ZGl2IGNsYXNzPSJtZXNzYWdlLWJveC1tYXJrIj48L2Rpdj4gPGRpdiBjbGFzcz0ibWVzc2FnZS1ib3gtYmciPiA8c3BhbiBzdHlsZT0iZm9udC1zaXplOjIwcHgiPjxiPuaPkOekuu+8mjwvYj48L3NwYW4+IDxkaXYgaWQ9Im1lc3NhZ2VfYm94X2NvbnRleHQiIHN0eWxlPSJtYXJnaW46MiUgMCI+Li4uPC9kaXY+PGJyLz48YnIvPiA8ZGl2IGNsYXNzPSJtZXNzYWdlLWJveC1idG4iPiA8YnV0dG9uIG5hbWU9ImFmZmlybSI+56Gu5a6aPC9idXR0b24+IDxidXR0b24gbmFtZT0iY2FuY2VsIj7lj5bmtog8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPHN0eWxlPi5tZXNzYWdlLWJne3Bvc2l0aW9uOmZpeGVkO2Zsb2F0OnJpZ2h0O3JpZ2h0OjA7dG9wOjIlO3otaW5kZXg6MzAwMDB9Lm1lc3NhZ2V7bWFyZ2luLWJvdHRvbToxNXB4O3BhZGRpbmc6MiUgMiU7d2lkdGg6MzAwcHg7ZGlzcGxheTpmbGV4O21hcmdpbi10b3A6LTcwcHg7b3BhY2l0eTowfS5tZXNzYWdlLXN1Y2Nlc3N7YmFja2dyb3VuZC1jb2xvcjojZGZkO2JvcmRlci1sZWZ0OjZweCBzb2xpZCAjNGNhZjUwfS5tZXNzYWdlLWVycm9ye2JhY2tncm91bmQtY29sb3I6I2ZkZDtib3JkZXItbGVmdDo2cHggc29saWQgI2Y0NDMzNn0ubWVzc2FnZS1pbmZve2JhY2tncm91bmQtY29sb3I6I2U3ZjNmZTtib3JkZXItbGVmdDo2cHggc29saWQgIzBjODZkZX0ubWVzc2FnZS13YXJuaW5ne2JhY2tncm91bmQtY29sb3I6I2ZmYztib3JkZXItbGVmdDo2cHggc29saWQgI2ZmZWIzYn0ubWVzc2FnZS1jb250ZXh0e2ZvbnQtc2l6ZToyMXB4O3dvcmQtd3JhcDpicmVhay13b3JkO3dvcmQtYnJlYWs6YnJlYWstYWxsfS5tZXNzYWdlLWNvbnRleHQgcHttYXJnaW46MH0jbWVzc2FnZV9ib3h7b3BhY2l0eTowO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjpmaXhlZDtpbnNldDowcHg7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoyMDAwMH0ubWVzc2FnZS1ib3gtYmd7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6MTBweDtwYWRkaW5nOjIwcHg7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7d2lkdGg6NTAwcHg7ei1pbmRleDoyMDAwMX0ubWVzc2FnZS1ib3gtbWFya3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOmZpeGVkO3RvcDowO2xlZnQ6MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjUpO3otaW5kZXg6MjAwMDB9Lm1lc3NhZ2UtYm94LWJ0bnt0ZXh0LWFsaWduOnJpZ2h0fS5tZXNzYWdlLWJveC1idG4gYnV0dG9ue21hcmdpbjowIDVweDt3aWR0aDoxMjBweDtoZWlnaHQ6NDBweDtib3JkZXItd2lkdGg6MDtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kOiMxZTkwZmY7Y3Vyc29yOnBvaW50ZXI7b3V0bGluZTowO2NvbG9yOiNmZmY7Zm9udC1zaXplOjE3cHh9Lm1lc3NhZ2UtYm94LWJ0biBidXR0b246aG92ZXJ7YmFja2dyb3VuZDojNTlmfTwvc3R5bGU+ICc7CiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRNZXNzYWdlKGVsKSB7CiAgICAgICAgICAgICAgICBlbCAmJiAkKGVsKVswXSA/ICQoZWwpLmFwcGVuZChtZXNzYWdlKSA6ICQoImJvZHkiKS5hcHBlbmQobWVzc2FnZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbWVzc2FnZUJveChjdHgsIHR5cGUpIHsKICAgICAgICAgICAgICAgICJjb25maXJtIiA9PT0gdHlwZSA/ICQoJy5tZXNzYWdlLWJveC1idG4gYnV0dG9uW25hbWU9ImNhbmNlbCJdJykuc2hvdygpIDogImFsZXJ0IiA9PT0gdHlwZSAmJiAkKCcubWVzc2FnZS1ib3gtYnRuIGJ1dHRvbltuYW1lPSJjYW5jZWwiXScpLmhpZGUoKSwgCiAgICAgICAgICAgICAgICBjdHguaHRtbCA/ICQoIiNtZXNzYWdlX2JveF9jb250ZXh0IikuaHRtbCgnPGRpdiBzdHlsZT0iZm9udC1zaXplOjE4cHgiPicuY29uY2F0KGN0eC5odG1sLCAiPC9kaXY+IikpIDogJCgiI21lc3NhZ2VfYm94X2NvbnRleHQiKS5odG1sKCc8ZGl2IHN0eWxlPSJmb250LXNpemU6MThweCI+4pWwKO+/o+KWve+/oynila48L2Rpdj4nKSwgCiAgICAgICAgICAgICAgICB1aV9zY3JvbGwuQS5oaWRlKCksICQoIiNtZXNzYWdlX2JveCIpLnNob3coKSwgJCgiI21lc3NhZ2VfYm94IikuYW5pbWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogIjEiCiAgICAgICAgICAgICAgICB9LCAzMDApLCAkKCcubWVzc2FnZS1ib3gtYnRuIGJ1dHRvbltuYW1lPSJhZmZpcm0iXScpWzBdLm9uY2xpY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCIjbWVzc2FnZV9ib3giKS5oaWRlKCksICQoIiNtZXNzYWdlX2JveCIpLmNzcygib3BhY2l0eSIsIDApLCB1aV9zY3JvbGwuQS5zaG93KCksIAogICAgICAgICAgICAgICAgICAgIGN0eC5jYWxsYmFjayAmJiBjdHguY2FsbGJhY2suYWZmaXJtICYmIGN0eC5jYWxsYmFjay5hZmZpcm0oKTsKICAgICAgICAgICAgICAgIH0sICQoJy5tZXNzYWdlLWJveC1idG4gYnV0dG9uW25hbWU9ImNhbmNlbCJdJylbMF0ub25jbGljayA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICQoIiNtZXNzYWdlX2JveCIpLmhpZGUoKSwgJCgiI21lc3NhZ2VfYm94IikuY3NzKCJvcGFjaXR5IiwgMCksIHVpX3Njcm9sbC5BLnNob3coKSwgCiAgICAgICAgICAgICAgICAgICAgY3R4LmNhbGxiYWNrICYmIGN0eC5jYWxsYmFjay5jYW5jZWwgJiYgY3R4LmNhbGxiYWNrLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaWQgPSAwOwogICAgICAgICAgICBmdW5jdGlvbiBtZXNzYWdlX21lc3NhZ2UoaHRtbCwgdHlwZSkgewogICAgICAgICAgICAgICAgKGZ1bmN0aW9uIG1lc3NhZ2VFblF1ZXVlKG1lc3NhZ2UsIGlkKSB7CiAgICAgICAgICAgICAgICAgICAgJCgiLm1lc3NhZ2UtYmciKS5hcHBlbmQobWVzc2FnZSksICQoIiNtZXNzYWdlXyIuY29uY2F0KGlkKSkuYW5pbWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIis9NzBweCIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICIxIgogICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7CiAgICAgICAgICAgICAgICB9KSgnPGRpdiBpZD0ibWVzc2FnZV8nLmNvbmNhdChpZCArPSAxLCAnIiBjbGFzcz0ibWVzc2FnZSBtZXNzYWdlLScpLmNvbmNhdCh0eXBlLCAnIj48ZGl2IGNsYXNzPSJtZXNzYWdlLWNvbnRleHQiPjxwPjxzdHJvbmc+JykuY29uY2F0KHR5cGUsICLvvJo8L3N0cm9uZz48L3A+PHA+IikuY29uY2F0KGh0bWwsICI8L3A+PC9kaXY+PC9kaXY+IiksIGlkKSwgCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtZXNzYWdlRGVRdWV1ZShpZCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiAzOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICJkaXYjbWVzc2FnZV8iLmNvbmNhdChpZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoZSkuYW5pbWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWFyZ2luLXRvcCI6ICItPTcwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogIjAiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0pLCAxZTMgKiB0aW1lKTsKICAgICAgICAgICAgICAgIH0oaWQsIDMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBNZXNzYWdlID0gewogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhodG1sKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VfbWVzc2FnZShodG1sLCAic3VjY2VzcyIpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdhcm5pbmc6IGZ1bmN0aW9uIHdhcm5pbmcoaHRtbCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlX21lc3NhZ2UoaHRtbCwgIndhcm5pbmciKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoaHRtbCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlX21lc3NhZ2UoaHRtbCwgImVycm9yIik7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaW5mbzogZnVuY3Rpb24gaW5mbyhodG1sKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VfbWVzc2FnZShodG1sLCAiaW5mbyIpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG1pYW93OiBmdW5jdGlvbiBtaWFvdygpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZV9tZXNzYWdlKCIoXuODu8+J44O7Xil+5Za15Za15Za1fiIsICJpbmZvIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIE1lc3NhZ2VCb3ggPSB7CiAgICAgICAgICAgICAgICBhbGVydDogZnVuY3Rpb24gYWxlcnQoaHRtbCwgYWZmaXJtKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VCb3goewogICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZmaXJtOiBhZmZpcm0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sICJhbGVydCIpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNvbmZpcm06IGZ1bmN0aW9uIGNvbmZpcm0oaHRtbCwgYWZmaXJtLCBjYW5jZWwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZUJveCh7CiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IGh0bWwsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZpcm06IGFmZmlybSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbDogY2FuY2VsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCAiY29uZmlybSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgNTM3OiBmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewogICAgICAgICAgICAgICAgQTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBzY3JvbGwgPSB7CiAgICAgICAgICAgICAgICBzaG93OiBmdW5jdGlvbiBzaG93X3Njcm9sbCgpIHsKICAgICAgICAgICAgICAgICAgICAkKCJkaXYjYnBfY29uZmlnIikuaXMoIjpoaWRkZW4iKSAmJiAkKCJkaXYjbWVzc2FnZV9ib3giKS5pcygiOmhpZGRlbiIpICYmICQoImJvZHkiKS5jc3MoIm92ZXJmbG93IiwgImF1dG8iKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBoaWRlOiBmdW5jdGlvbiBoaWRlX3Njcm9sbCgpIHsKICAgICAgICAgICAgICAgICAgICAkKCJib2R5IikuY3NzKCJvdmVyZmxvdyIsICJoaWRkZW4iKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIDg2NjogZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKICAgICAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKICAgICAgICAgICAgICAgIGg6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBhamF4OwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGo6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfYWpheDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBfdWlfbWVzc2FnZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzEpOwogICAgICAgICAgICBmdW5jdGlvbiBhamF4KG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgICBvYmouc3VjY2VzcyA9IGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXMgJiYgcmVzLmNvZGUgJiYgX3VpX21lc3NhZ2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy52MC53YXJuaW5nKCIiLmNvbmNhdChyZXMubWVzc2FnZSB8fCAiQ09ERToiLmNvbmNhdChyZXMuY29kZSkpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTsKICAgICAgICAgICAgICAgICAgICB9LCBvYmouZXJyb3IgPSBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3VpX21lc3NhZ2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy52MC5lcnJvcigi572R57uc5byC5bi4IiksIHJlamVjdChlcnIpOwogICAgICAgICAgICAgICAgICAgIH0sICQuYWpheChvYmopOwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIF9hamF4KG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgICBvYmouc3VjY2VzcyB8fCAob2JqLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpOwogICAgICAgICAgICAgICAgICAgIH0pLCBvYmouZXJyb3IgfHwgKG9iai5lcnJvciA9IGZ1bmN0aW9uKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICAgICAgICB9KSwgJC5hamF4KG9iaik7CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIDcxMTogZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKICAgICAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKICAgICAgICAgICAgICAgICRjOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNaaXA7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBEUGxheWVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIF9hamF4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2Nik7CiAgICAgICAgICAgIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3R5cGVvZiA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCAmJiAic3ltYm9sIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7CiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOwogICAgICAgICAgICAgICAgfSwgX3R5cGVvZihvYmopOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7CiAgICAgICAgICAgICAgICBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0czsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgZXhwb3J0cyA9IHt9LCBPcCA9IE9iamVjdC5wcm90b3R5cGUsIGhhc093biA9IE9wLmhhc093blByb3BlcnR5LCAkU3ltYm9sID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCAiQEBpdGVyYXRvciIsIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgIkBAYXN5bmNJdGVyYXRvciIsIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCAiQEB0b1N0cmluZ1RhZyI7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogITAKICAgICAgICAgICAgICAgICAgICB9KSwgb2JqW2tleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGRlZmluZSh7fSwgIiIpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yLCBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSksIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRvci5faW52b2tlID0gZnVuY3Rpb24oaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSAic3VzcGVuZGVkU3RhcnQiOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obWV0aG9kLCBhcmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZXhlY3V0aW5nIiA9PT0gc3RhdGUpIHRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJjb21wbGV0ZWQiID09PSBzdGF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidGhyb3ciID09PSBtZXRob2QpIHRocm93IGFyZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZCwgY29udGV4dC5hcmcgPSBhcmc7IDspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgibmV4dCIgPT09IGNvbnRleHQubWV0aG9kKSBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7IGVsc2UgaWYgKCJ0aHJvdyIgPT09IGNvbnRleHQubWV0aG9kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgic3VzcGVuZGVkU3RhcnQiID09PSBzdGF0ZSkgdGhyb3cgc3RhdGUgPSAiY29tcGxldGVkIiwgY29udGV4dC5hcmc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAicmV0dXJuIiA9PT0gY29udGV4dC5tZXRob2QgJiYgY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuYXJnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9ICJleGVjdXRpbmciOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIm5vcm1hbCIgPT09IHJlY29yZC50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9IGNvbnRleHQuZG9uZSA/ICJjb21wbGV0ZWQiIDogInN1c3BlbmRlZFlpZWxkIiwgcmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGhyb3ciID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSAiY29tcGxldGVkIiwgY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0oaW5uZXJGbiwgc2VsZiwgY29udGV4dCksIGdlbmVyYXRvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibm9ybWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZzogZm4uY2FsbChvYmosIGFyZykKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0aHJvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6IGVycgogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV4cG9ydHMud3JhcCA9IHdyYXA7CiAgICAgICAgICAgICAgICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9OwogICAgICAgICAgICAgICAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge30KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge30KICAgICAgICAgICAgICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9OwogICAgICAgICAgICAgICAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTsKICAgICAgICAgICAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJiBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpICYmIChJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlKTsKICAgICAgICAgICAgICAgIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHsKICAgICAgICAgICAgICAgICAgICBbICJuZXh0IiwgInRocm93IiwgInJldHVybiIgXS5mb3JFYWNoKChmdW5jdGlvbihtZXRob2QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCAoZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoInRocm93IiAhPT0gcmVjb3JkLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnLCB2YWx1ZSA9IHJlc3VsdC52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAmJiAib2JqZWN0IiA9PSBfdHlwZW9mKHZhbHVlKSAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgIl9fYXdhaXQiKSA/IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbigoZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZva2UoIm5leHQiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlKCJ0aHJvdyIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSA6IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oKGZ1bmN0aW9uKHVud3JhcHBlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZCwgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIChmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnZva2UoInRocm93IiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNQcm9taXNlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludm9rZSA9IGZ1bmN0aW9uKG1ldGhvZCwgYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbCgoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPSBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07CiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbWV0aG9kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgInRocm93IiA9PT0gY29udGV4dC5tZXRob2QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4gJiYgKGNvbnRleHQubWV0aG9kID0gInJldHVybiIsIGNvbnRleHQuYXJnID0gdm9pZCAwLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpLCAidGhyb3ciID09PSBjb250ZXh0Lm1ldGhvZCkpIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2QiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHJldHVybiBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZywgCiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWw7CiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSByZWNvcmQuYXJnOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmZvID8gaW5mby5kb25lID8gKGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlLCBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jLCAKICAgICAgICAgICAgICAgICAgICAicmV0dXJuIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gIm5leHQiLCBjb250ZXh0LmFyZyA9IHZvaWQgMCksIAogICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKSA6IGluZm8gOiAoY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0IiksIAogICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gewogICAgICAgICAgICAgICAgICAgICAgICB0cnlMb2M6IGxvY3NbMF0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIDEgaW4gbG9jcyAmJiAoZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdKSwgMiBpbiBsb2NzICYmIChlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXSwgCiAgICAgICAgICAgICAgICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdKSwgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkgewogICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9OwogICAgICAgICAgICAgICAgICAgIHJlY29yZC50eXBlID0gIm5vcm1hbCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5RW50cmllcyA9IFsgewogICAgICAgICAgICAgICAgICAgICAgICB0cnlMb2M6ICJyb290IgogICAgICAgICAgICAgICAgICAgIH0gXSwgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpLCB0aGlzLnJlc2V0KCEwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOysraSA8IGl0ZXJhYmxlLmxlbmd0aDsgKSBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSByZXR1cm4gbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LmRvbmUgPSAhMSwgbmV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHZvaWQgMCwgbmV4dC5kb25lID0gITAsIG5leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogZG9uZVJlc3VsdAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb25lUmVzdWx0KCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6ICEwCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKEdwLCAiY29uc3RydWN0b3IiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSksIAogICAgICAgICAgICAgICAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCAiY29uc3RydWN0b3IiLCBHZW5lcmF0b3JGdW5jdGlvbiksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvckZ1bmN0aW9uIiksIAogICAgICAgICAgICAgICAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGN0b3IgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBnZW5GdW4gJiYgZ2VuRnVuLmNvbnN0cnVjdG9yOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIWN0b3IgJiYgKGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8ICJHZW5lcmF0b3JGdW5jdGlvbiIgPT09IChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkpOwogICAgICAgICAgICAgICAgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSA6IChnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIAogICAgICAgICAgICAgICAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCAiR2VuZXJhdG9yRnVuY3Rpb24iKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgCiAgICAgICAgICAgICAgICAgICAgZ2VuRnVuOwogICAgICAgICAgICAgICAgfSwgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9fYXdhaXQ6IGFyZwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0pKSwgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvciwgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkgewogICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gUHJvbWlzZUltcGwgJiYgKFByb21pc2VJbXBsID0gUHJvbWlzZSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSwgUHJvbWlzZUltcGwpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbigoZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCksIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsICJHZW5lcmF0b3IiKSwgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSkpLCBkZWZpbmUoR3AsICJ0b1N0cmluZyIsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIltvYmplY3QgR2VuZXJhdG9yXSI7CiAgICAgICAgICAgICAgICB9KSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkga2V5cy5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXMucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDtrZXlzLmxlbmd0aDsgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gbmV4dC52YWx1ZSA9IGtleSwgbmV4dC5kb25lID0gITEsIG5leHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0OwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9LCBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3I6IENvbnRleHQsCiAgICAgICAgICAgICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KHNraXBUZW1wUmVzZXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB2b2lkIDAsIHRoaXMuZG9uZSA9ICExLCAKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGwsIHRoaXMubWV0aG9kID0gIm5leHQiLCB0aGlzLmFyZyA9IHZvaWQgMCwgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksIAogICAgICAgICAgICAgICAgICAgICAgICAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSAidCIgPT09IG5hbWUuY2hhckF0KDApICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkgJiYgKHRoaXNbbmFtZV0gPSB2b2lkIDApOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb25lID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidGhyb3ciID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ydmFsOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGV4Y2VwdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb25lKSB0aHJvdyBleGNlcHRpb247CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSAidGhyb3ciLCByZWNvcmQuYXJnID0gZXhjZXB0aW9uLCBjb250ZXh0Lm5leHQgPSBsb2MsIGNhdWdodCAmJiAoY29udGV4dC5tZXRob2QgPSAibmV4dCIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmcgPSB2b2lkIDApLCAhIWNhdWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0sIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoInJvb3QiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoImVuZCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgImNhdGNoTG9jIiksIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZpbmFsbHkpIHRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0eXBlLCBhcmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIikgJiYgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5RW50cnkgJiYgKCJicmVhayIgPT09IHR5cGUgfHwgImNvbnRpbnVlIiA9PT0gdHlwZSkgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jICYmIChmaW5hbGx5RW50cnkgPSBudWxsKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA/ICh0aGlzLm1ldGhvZCA9ICJuZXh0IiwgCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jLCBDb250aW51ZVNlbnRpbmVsKSA6IHRoaXMuY29tcGxldGUocmVjb3JkKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZShyZWNvcmQsIGFmdGVyTG9jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidGhyb3ciID09PSByZWNvcmQudHlwZSkgdGhyb3cgcmVjb3JkLmFyZzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJicmVhayIgPT09IHJlY29yZC50eXBlIHx8ICJjb250aW51ZSIgPT09IHJlY29yZC50eXBlID8gdGhpcy5uZXh0ID0gcmVjb3JkLmFyZyA6ICJyZXR1cm4iID09PSByZWNvcmQudHlwZSA/ICh0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmcsIAogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZCA9ICJyZXR1cm4iLCB0aGlzLm5leHQgPSAiZW5kIikgOiAibm9ybWFsIiA9PT0gcmVjb3JkLnR5cGUgJiYgYWZ0ZXJMb2MgJiYgKHRoaXMubmV4dCA9IGFmdGVyTG9jKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRpbnVlU2VudGluZWw7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChmaW5hbGx5TG9jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSByZXR1cm4gdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGNhdGNoOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidGhyb3ciID09PSByZWNvcmQudHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd247CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TG9jOiBuZXh0TG9jCiAgICAgICAgICAgICAgICAgICAgICAgIH0sICJuZXh0IiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdm9pZCAwKSwgQ29udGludWVTZW50aW5lbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBleHBvcnRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpLCB2YWx1ZSA9IGluZm8udmFsdWU7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpbmZvLmRvbmUgPyByZXNvbHZlKHZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfbmV4dCh2b2lkIDApOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogICAgICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCAhMSwgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSAhMCwgCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIiBpbiBkZXNjcmlwdG9yICYmIChkZXNjcmlwdG9yLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvUHJvcHMgJiYgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKSwgc3RhdGljUHJvcHMgJiYgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKSwgCiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7CiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6ICExCiAgICAgICAgICAgICAgICB9KSwgQ29uc3RydWN0b3I7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIFJ1bnRpbWVMaWIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJ1bnRpbWVMaWIoY29uZmlnKSB7CiAgICAgICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJ1bnRpbWVMaWIpLCB0aGlzLmNvbmZpZyA9IGNvbmZpZywgdGhpcy5tb2R1bGVBc3luYywgdGhpcy5hbnlSZXNvbHZlZCA9ICExOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhSdW50aW1lTGliLCBbIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICJnZXRNb2R1bGVQcm9taXNlIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kdWxlUHJvbWlzZSgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcywgX3RoaXMkY29uZmlnID0gdGhpcy5jb25maWcsIHVybHMgPSBfdGhpcyRjb25maWcudXJscywgZ2V0TW9kdWxlID0gX3RoaXMkY29uZmlnLmdldE1vZHVsZSwgZXJycyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJscy5mb3JFYWNoKChmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KF9hc3luY1RvR2VuZXJhdG9yKF9yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKChmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7Oykgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0LnByZXYgPSAwLCAhX3RoaXMuYW55UmVzb2x2ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coIltSdW50aW1lIExpYnJhcnldIFN0YXJ0IGRvd25sb2FkIGZyb20gIi5jb25jYXQodXJsKSksIF9jb250ZXh0Lm5leHQgPSA2LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2FqYXhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5qKSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPSBfY29udGV4dC5zZW50LCAhX3RoaXMuYW55UmVzb2x2ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hbnlSZXNvbHZlZCA9ICEwLCBjb25zb2xlLmxvZygiW1J1bnRpbWUgTGlicmFyeV0gRG93bmxvYWRlZCBmcm9tICIuY29uY2F0KHVybCwgIiAsIGxlbmd0aCA9ICIpLmNvbmNhdChjb2RlLmxlbmd0aCkpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBydW5FdmFsKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZhbChjb2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQod2luZG93KSgpLCByZXNvbHZlKGdldE1vZHVsZSh3aW5kb3cpKSwgX2NvbnRleHQubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQucHJldiA9IDE1LCBfY29udGV4dC50MCA9IF9jb250ZXh0LmNhdGNoKDApLCAhX3RoaXMuYW55UmVzb2x2ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycnMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnI6IF9jb250ZXh0LnQwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIDAgPT0gLS1pICYmIChjb25zb2xlLmVycm9yKGVycnMpLCByZWplY3QoZXJycykpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgX2NhbGxlZSwgbnVsbCwgWyBbIDAsIDE1IF0gXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKSwgMWUzICogaSsrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gXSksIFJ1bnRpbWVMaWI7CiAgICAgICAgICAgIH0oKSwgY2RuX21hcCA9IHsKICAgICAgICAgICAgICAgIGpzZGVsaXZyOiBmdW5jdGlvbiBqc2RlbGl2cihuYW1lLCB2ZXIsIGZpbGVuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtLyIuY29uY2F0KG5hbWUsICJAIikuY29uY2F0KHZlciwgIi9kaXN0LyIpLmNvbmNhdChmaWxlbmFtZSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2xvdWRmbGFyZTogZnVuY3Rpb24gY2xvdWRmbGFyZShuYW1lLCB2ZXIsIGZpbGVuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy8iLmNvbmNhdChuYW1lLCAiLyIpLmNvbmNhdCh2ZXIsICIvIikuY29uY2F0KGZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBib290Y2RuOiBmdW5jdGlvbiBib290Y2RuKG5hbWUsIHZlciwgZmlsZW5hbWUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gImh0dHBzOi8vY2RuLmJvb3RjZG4ubmV0L2FqYXgvbGlicy8iLmNvbmNhdChuYW1lLCAiLyIpLmNvbmNhdCh2ZXIsICIvIikuY29uY2F0KGZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdGF0aWNmaWxlOiBmdW5jdGlvbiBzdGF0aWNmaWxlKG5hbWUsIHZlciwgZmlsZW5hbWUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gImh0dHBzOi8vY2RuLnN0YXRpY2ZpbGUub3JnLyIuY29uY2F0KG5hbWUsICIvIikuY29uY2F0KHZlciwgIi8iKS5jb25jYXQoZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB1cmxzID0gZnVuY3Rpb24gdXJscyhfcmVmMikgewogICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lLCB2ZXIgPSBfcmVmMi52ZXIsIGZpbGVuYW1lID0gX3JlZjIuZmlsZW5hbWUsIGNkbl9rZXlzID0gX3JlZjIuY2RuX2tleXM7CiAgICAgICAgICAgICAgICByZXR1cm4gKGNkbl9rZXlzID0gY2RuX2tleXMgPyBjZG5fa2V5cy5maWx0ZXIoKGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkgaW4gY2RuX21hcDsKICAgICAgICAgICAgICAgIH0pKSA6IE9iamVjdC5rZXlzKGNkbl9tYXApKS5tYXAoKGZ1bmN0aW9uKGspIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2RuX21hcFtrXShuYW1lLCB2ZXIsIGZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSwgaW5pdCA9IGZ1bmN0aW9uIGluaXQobmFtZSwgdmVyLCBmaWxlbmFtZSwgZ2V0TW9kdWxlKSB7CiAgICAgICAgICAgICAgICBuZXcgUnVudGltZUxpYih7CiAgICAgICAgICAgICAgICAgICAgdXJsczogdXJscyh7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHZlcjogdmVyLAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBnZXRNb2R1bGU6IGdldE1vZHVsZQogICAgICAgICAgICAgICAgfSkuZ2V0TW9kdWxlUHJvbWlzZSgpLnRoZW4obnVsbCk7CiAgICAgICAgICAgIH0sIEpTWmlwLCBmbHZqcywgRFBsYXllcjsKICAgICAgICAgICAgaW5pdCgianN6aXAiLCAiMy4xMC4wIiwgImpzemlwLm1pbi5qcyIsIChmdW5jdGlvbih3KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gSlNaaXAgPSB3LkpTWmlwOwogICAgICAgICAgICB9KSksIGluaXQoImZsdi5qcyIsICIxLjYuMiIsICJmbHYubWluLmpzIiwgKGZ1bmN0aW9uKHcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmbHZqcyA9IHcuZmx2anM7CiAgICAgICAgICAgIH0pKSwgaW5pdCgiZHBsYXllciIsICIxLjI2LjAiLCAiRFBsYXllci5taW4uanMiLCAoZnVuY3Rpb24odykgewogICAgICAgICAgICAgICAgcmV0dXJuIERQbGF5ZXIgPSB3LkRQbGF5ZXI7CiAgICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICB9LCBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTsKICAgIGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHsKICAgICAgICB2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTsKICAgICAgICBpZiAodm9pZCAwICE9PSBjYWNoZWRNb2R1bGUpIHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0czsKICAgICAgICB2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHsKICAgICAgICAgICAgZXhwb3J0czoge30KICAgICAgICB9OwogICAgICAgIHJldHVybiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSwgCiAgICAgICAgbW9kdWxlLmV4cG9ydHM7CiAgICB9CiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7CiAgICAgICAgICAgIGVudW1lcmFibGU6ICEwLAogICAgICAgICAgICBnZXQ6IGRlZmluaXRpb25ba2V5XQogICAgICAgIH0pOwogICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOwogICAgfTsKICAgIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307CiAgICAhZnVuY3Rpb24oKSB7CiAgICAgICAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8ICExLCBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9ICEwLCAKICAgICAgICAgICAgICAgICJ2YWx1ZSIgaW4gZGVzY3JpcHRvciAmJiAoZGVzY3JpcHRvci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciB1c2VyID0gbmV3IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgZnVuY3Rpb24gVXNlcigpIHsKICAgICAgICAgICAgICAgICFmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogICAgICAgICAgICAgICAgfSh0aGlzLCBVc2VyKSwgdGhpcy5pc19sb2dpbiA9ICExLCB0aGlzLnZpcF9zdGF0dXMgPSAwLCB0aGlzLm1pZCA9ICIiLCB0aGlzLnVuYW1lID0gIiIsIAogICAgICAgICAgICAgICAgdGhpcy5oYXNfaW5pdCA9ICExLCB0aGlzLmxhenlJbml0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm90b1Byb3BzICYmIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyksIHN0YXRpY1Byb3BzICYmIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyksIAogICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCAicHJvdG90eXBlIiwgewogICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiAhMQogICAgICAgICAgICAgICAgfSksIENvbnN0cnVjdG9yOwogICAgICAgICAgICB9KFVzZXIsIFsgewogICAgICAgICAgICAgICAga2V5OiAibmVlZFJlcGxhY2UiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5lZWRSZXBsYWNlKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc19sb2dpbiB8fCAhdGhpcy52aXBfc3RhdHVzICYmIHZpZGVvLmJhc2UoKS5uZWVkVmlwKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImlzVklQIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1ZJUCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSA9PT0gdGhpcy52aXBfc3RhdHVzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJsYXp5SW5pdCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGF6eUluaXQobGFzdF9pbml0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNfaW5pdCB8fCAod2luZG93Ll9fQklMSV9VU0VSX0lORk9fXyA/ICh0aGlzLmlzX2xvZ2luID0gd2luZG93Ll9fQklMSV9VU0VSX0lORk9fXy5pc0xvZ2luLCAKICAgICAgICAgICAgICAgICAgICB0aGlzLnZpcF9zdGF0dXMgPSB3aW5kb3cuX19CSUxJX1VTRVJfSU5GT19fLnZpcFN0YXR1cywgdGhpcy5taWQgPSB3aW5kb3cuX19CSUxJX1VTRVJfSU5GT19fLm1pZCB8fCAiIiwgCiAgICAgICAgICAgICAgICAgICAgdGhpcy51bmFtZSA9IHdpbmRvdy5fX0JJTElfVVNFUl9JTkZPX18udW5hbWUgfHwgIiIpIDogd2luZG93Ll9fQmlsaVVzZXJfXyAmJiAodGhpcy5pc19sb2dpbiA9IHdpbmRvdy5fX0JpbGlVc2VyX18uaXNMb2dpbiwgCiAgICAgICAgICAgICAgICAgICAgd2luZG93Ll9fQmlsaVVzZXJfXy5jYWNoZSA/ICh0aGlzLnZpcF9zdGF0dXMgPSB3aW5kb3cuX19CaWxpVXNlcl9fLmNhY2hlLmRhdGEudmlwU3RhdHVzLCAKICAgICAgICAgICAgICAgICAgICB0aGlzLm1pZCA9IHdpbmRvdy5fX0JpbGlVc2VyX18uY2FjaGUuZGF0YS5taWQgfHwgIiIsIHRoaXMudW5hbWUgPSB3aW5kb3cuX19CaWxpVXNlcl9fLmNhY2hlLmRhdGEudW5hbWUgfHwgIiIpIDogKHRoaXMudmlwX3N0YXR1cyA9IDAsIAogICAgICAgICAgICAgICAgICAgIHRoaXMubWlkID0gIiIsIHRoaXMudW5hbWUgPSAiIikpLCB0aGlzLmhhc19pbml0ID0gbGFzdF9pbml0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdKSwgVXNlcjsKICAgICAgICB9KCkpOwogICAgICAgIGZ1bmN0aW9uIHN0b3JlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8ICExLCBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9ICEwLCAKICAgICAgICAgICAgICAgICJ2YWx1ZSIgaW4gZGVzY3JpcHRvciAmJiAoZGVzY3JpcHRvci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBTdG9yZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmdW5jdGlvbiBTdG9yZSgpIHsKICAgICAgICAgICAgICAgICFmdW5jdGlvbiBzdG9yZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgICAgICAgICAgICAgICB9KHRoaXMsIFN0b3JlKSwgdGhpcy5wcmVmaXggPSAiYnBfIjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3RvcmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG9Qcm9wcyAmJiBzdG9yZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyksIAogICAgICAgICAgICAgICAgc3RhdGljUHJvcHMgJiYgc3RvcmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7CiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6ICExCiAgICAgICAgICAgICAgICB9KSwgQ29uc3RydWN0b3I7CiAgICAgICAgICAgIH0oU3RvcmUsIFsgewogICAgICAgICAgICAgICAga2V5OiAiZ2V0IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDogIiI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMucHJlZml4ICsga2V5KSB8fCAiIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAic2V0IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDogIiIsIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5wcmVmaXggKyBrZXksIHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdKSwgU3RvcmU7CiAgICAgICAgfSgpLCBzdG9yZSA9IG5ldyBTdG9yZSwgbWVzc2FnZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMxKSwgYWpheCA9IF9fd2VicGFja19yZXF1aXJlX18oODY2KTsKICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgewogICAgICAgICAgICB2YXIgaXQgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgU3ltYm9sICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvWyJAQGl0ZXJhdG9yIl07CiAgICAgICAgICAgIGlmICghaXQpIHsKICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIW8pIHJldHVybjsKICAgICAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIG8pIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOwogICAgICAgICAgICAgICAgICAgIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsKICAgICAgICAgICAgICAgICAgICAiT2JqZWN0IiA9PT0gbiAmJiBvLmNvbnN0cnVjdG9yICYmIChuID0gby5jb25zdHJ1Y3Rvci5uYW1lKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIk1hcCIgPT09IG4gfHwgIlNldCIgPT09IG4pIHJldHVybiBBcnJheS5mcm9tKG8pOwogICAgICAgICAgICAgICAgICAgIGlmICgiQXJndW1lbnRzIiA9PT0gbiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7CiAgICAgICAgICAgICAgICB9KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmICJudW1iZXIiID09IHR5cGVvZiBvLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGl0ICYmIChvID0gaXQpOwogICAgICAgICAgICAgICAgICAgIHZhciBpID0gMCwgRiA9IGZ1bmN0aW9uIEYoKSB7fTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBzOiBGLAogICAgICAgICAgICAgICAgICAgICAgICBuOiBmdW5jdGlvbiBuKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPj0gby5sZW5ndGggPyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogITAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogITEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9baSsrXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZTogZnVuY3Rpb24gZShfZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGY6IEYKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBlcnIsIG5vcm1hbENvbXBsZXRpb24gPSAhMCwgZGlkRXJyID0gITE7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBzOiBmdW5jdGlvbiBzKCkgewogICAgICAgICAgICAgICAgICAgIGl0ID0gaXQuY2FsbChvKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBuOiBmdW5jdGlvbiBuKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lLCBzdGVwOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGU6IGZ1bmN0aW9uIGUoX2UyKSB7CiAgICAgICAgICAgICAgICAgICAgZGlkRXJyID0gITAsIGVyciA9IF9lMjsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmOiBmdW5jdGlvbiBmKCkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbENvbXBsZXRpb24gfHwgbnVsbCA9PSBpdC5yZXR1cm4gfHwgaXQucmV0dXJuKCk7CiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpZEVycikgdGhyb3cgZXJyOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsKICAgICAgICAgICAgKG51bGwgPT0gbGVuIHx8IGxlbiA+IGFyci5sZW5ndGgpICYmIChsZW4gPSBhcnIubGVuZ3RoKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOwogICAgICAgICAgICByZXR1cm4gYXJyMjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0X3VybF9iYXNlKHBhZ2UsIHF1YWxpdHksIHZpZGVvX2Zvcm1hdCwgc3VjY2VzcywgZXJyb3IsIHJlcXVlc3RfdHlwZSkgewogICAgICAgICAgICB2YXIgX3N1Y2Nlc3MsIF9lcnJvcjsKICAgICAgICAgICAgX3N1Y2Nlc3MgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBzdWNjZXNzID8gZnVuY3Rpb24gX3N1Y2Nlc3MoZSkgewogICAgICAgICAgICAgICAgc3VjY2VzcyhlKTsKICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIF9zdWNjZXNzKHJlcykgewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKHJlcyk7CiAgICAgICAgICAgIH0sIF9lcnJvciA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGVycm9yID8gZnVuY3Rpb24gX2Vycm9yKGUpIHsKICAgICAgICAgICAgICAgIG1lc3NhZ2UudjAuZXJyb3IoIuivt+axguWksei0pSIpLCBlcnJvcihlKTsKICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIF9lcnJvcihlcnIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciB2YiA9IHZpZGVvLmJhc2UoKSwgX3JlZiA9IFsgdmIuYWlkKHBhZ2UpLCB2Yi5idmlkKHBhZ2UpLCB2Yi5jaWQocGFnZSksIHZiLmVwaWQocGFnZSksIHF1YWxpdHkgfHwgdmlkZW8uZ2V0X3F1YWxpdHkoKS5xLCB2Yi50eXBlKCkgXSwgYWlkID0gX3JlZlswXSwgYnZpZCA9IF9yZWZbMV0sIGNpZCA9IF9yZWZbMl0sIGVwaWQgPSBfcmVmWzNdLCBxID0gX3JlZls0XSwgdHlwZSA9IF9yZWZbNV0sIGZvcm1hdCA9IHZpZGVvX2Zvcm1hdCB8fCBjb25maWdfY29uZmlnLmZvcm1hdDsKICAgICAgICAgICAgImF1dG8iID09PSByZXF1ZXN0X3R5cGUgJiYgdXNlci5uZWVkUmVwbGFjZSgpICYmIChyZXF1ZXN0X3R5cGUgPSAicmVtb3RlIik7CiAgICAgICAgICAgIHZhciBiYXNlX2FwaSwgdXJsX3JlcGxhY2VfY2RuID0gZnVuY3Rpb24gdXJsX3JlcGxhY2VfY2RuKHVybCkgewogICAgICAgICAgICAgICAgaWYgKCIwIiAhPT0gY29uZmlnX2NvbmZpZy5ob3N0X2tleSkgewogICAgICAgICAgICAgICAgICAgIHZhciB1cmxfdG1wID0gdXJsLnNwbGl0KCIvIik7CiAgICAgICAgICAgICAgICAgICAgdXJsX3RtcFsyXSA9IGhvc3RNYXBbY29uZmlnX2NvbmZpZy5ob3N0X2tleV0sIHVybCA9IHVybF90bXAuam9pbigiLyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHVybDsKICAgICAgICAgICAgfSwgYWpheF9vYmogPSB7CiAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKCJhdXRvIiA9PT0gcmVxdWVzdF90eXBlIHx8ICJsb2NhbCIgPT09IHJlcXVlc3RfdHlwZSkgewogICAgICAgICAgICAgICAgdmFyIGZudmVyLCBmbnZhbDsKICAgICAgICAgICAgICAgICJjaGVlc2UiID09PSB0eXBlID8gKGJhc2VfYXBpID0gImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wdWd2L3BsYXllci93ZWIvcGxheXVybCIsIAogICAgICAgICAgICAgICAgZm52ZXIgPSAibXA0IiA9PT0gZm9ybWF0ID8gMSA6IDAsIGZudmFsID0gODApIDogKGJhc2VfYXBpID0gInZpZGVvIiA9PT0gdHlwZSA/ICJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9wbGF5ZXIvcGxheXVybCIgOiAiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy9wbGF5ZXIvd2ViL3BsYXl1cmwiLCAKICAgICAgICAgICAgICAgIGZudmVyID0gMCwgZm52YWwgPSB7CiAgICAgICAgICAgICAgICAgICAgZGFzaDogNDA0OCwKICAgICAgICAgICAgICAgICAgICBmbHY6IDQwNDksCiAgICAgICAgICAgICAgICAgICAgbXA0OiAwCiAgICAgICAgICAgICAgICB9W2Zvcm1hdF0gfHwgMCksIGJhc2VfYXBpICs9ICI/YXZpZD0iLmNvbmNhdChhaWQsICImYnZpZD0iKS5jb25jYXQoYnZpZCwgIiZjaWQ9IikuY29uY2F0KGNpZCwgIiZxbj0iKS5jb25jYXQocSwgIiZmbnZlcj0iKS5jb25jYXQoZm52ZXIsICImZm52YWw9IikuY29uY2F0KGZudmFsLCAiJmZvdXJrPTEmZXBfaWQ9IikuY29uY2F0KGVwaWQsICImdHlwZT0iKS5jb25jYXQoZm9ybWF0LCAiJm90eXBlPWpzb24iKSwgCiAgICAgICAgICAgICAgICBiYXNlX2FwaSArPSAibXA0IiA9PT0gZm9ybWF0ID8gIiZwbGF0Zm9ybT1odG1sNSZoaWdoX3F1YWxpdHk9MSIgOiAiIiwgYWpheF9vYmoueGhyRmllbGRzID0gewogICAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogITAKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBiYXNlX2FwaSA9IGNvbmZpZ19jb25maWcuYmFzZV9hcGksIGJhc2VfYXBpICs9ICI/YXY9Ii5jb25jYXQoYWlkLCAiJmJ2PSIpLmNvbmNhdChidmlkLCAiJmNpZD0iKS5jb25jYXQoY2lkLCAiJmVwPSIpLmNvbmNhdChlcGlkLCAiJnE9IikuY29uY2F0KHEsICImdHlwZT0iKS5jb25jYXQodHlwZSwgIiZmb3JtYXQ9IikuY29uY2F0KGZvcm1hdCwgIiZvdHlwZT1qc29uIik7CiAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBbIHN0b3JlLmdldCgiYXV0aF9pZCIpLCBzdG9yZS5nZXQoImF1dGhfc2VjIikgXSwgYXV0aF9pZCA9IF9yZWYyWzBdLCBhdXRoX3NlYyA9IF9yZWYyWzFdOwogICAgICAgICAgICAgICAgYXV0aF9pZCAmJiBhdXRoX3NlYyAmJiAoYmFzZV9hcGkgKz0gIiZhdXRoX2lkPSIuY29uY2F0KGF1dGhfaWQsICImYXV0aF9zZWM9IikuY29uY2F0KGF1dGhfc2VjKSwgCiAgICAgICAgICAgICAgICBwYWdlICYmIChiYXNlX2FwaSArPSAiJnMiKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWpheF9vYmoudXJsID0gYmFzZV9hcGksICgwLCBhamF4LmgpKGFqYXhfb2JqKS50aGVuKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgIHZhciBkYXRhOwogICAgICAgICAgICAgICAgaWYgKHJlcy5jb2RlIHx8IChkYXRhID0gcmVzLnJlc3VsdCB8fCByZXMuZGF0YSksICFkYXRhKSByZXR1cm4gImF1dG8iID09PSByZXF1ZXN0X3R5cGUgPyB2b2lkIGdldF91cmxfYmFzZShwYWdlLCBxdWFsaXR5LCB2aWRlb19mb3JtYXQsIHN1Y2Nlc3MsIGVycm9yLCAicmVtb3RlIikgOiAocmVzLnVybCAmJiAocmVzLnVybCA9IHVybF9yZXBsYWNlX2NkbihyZXMudXJsKSksIAogICAgICAgICAgICAgICAgcmVzLnZpZGVvICYmIChyZXMudmlkZW8gPSB1cmxfcmVwbGFjZV9jZG4ocmVzLnZpZGVvKSksIHJlcy5hdWRpbyAmJiAocmVzLmF1ZGlvID0gdXJsX3JlcGxhY2VfY2RuKHJlcy5hdWRpbykpLCAKICAgICAgICAgICAgICAgIHZvaWQgX3N1Y2Nlc3MocmVzKSk7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0Q29udmVydG9yID0gZnVuY3Rpb24gcmVzdWx0Q29udmVydG9yKGRhdGEsIF9zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgKDAsIGFqYXguaikoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkYXRhLnVybCA/IGRhdGEudXJsIDogZGF0YS52aWRlbywKICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6ICExLAogICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAxZTMsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3VjY2VzcyhkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRpbWVvdXQiID09IHJlcy5zdGF0dXNUZXh0ID8gKGNvbnNvbGUubG9nKCJ1c2UgdXJsIiksIF9zdWNjZXNzKGRhdGEpKSA6IChjb25zb2xlLmxvZygidXNlIGJhY2t1cF91cmwiKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJhY2t1cF91cmwgJiYgKGRhdGEudXJsID0gZGF0YS5iYWNrdXBfdXJsKSwgZGF0YS5iYWNrdXBfdmlkZW8gJiYgKGRhdGEudmlkZW8gPSBkYXRhLmJhY2t1cF92aWRlbyksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5iYWNrdXBfYXVkaW8gJiYgKGRhdGEuYXVkaW8gPSBkYXRhLmJhY2t1cF9hdWRpbyksIF9zdWNjZXNzKGRhdGEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhc2gpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByZXN1bHQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6IGRhdGEucXVhbGl0eSwKICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0X3F1YWxpdHk6IGRhdGEuYWNjZXB0X3F1YWxpdHksCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86ICIiCiAgICAgICAgICAgICAgICAgICAgfSwgdmlkZW9zID0gZGF0YS5kYXNoLnZpZGVvLCBpID0gMDsgaSA8IHZpZGVvcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3ZpZGVvID0gdmlkZW9zW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3ZpZGVvLmlkIDw9IHEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC52aWRlbyA9IHVybF9yZXBsYWNlX2NkbihfdmlkZW8uYmFzZV91cmwpLCByZXN1bHQuYXVkaW8gPSB1cmxfcmVwbGFjZV9jZG4oZGF0YS5kYXNoLmF1ZGlvWzBdLmJhc2VfdXJsKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYmFja3VwX3ZpZGVvID0gX3ZpZGVvLmJhY2t1cF91cmwgJiYgdXJsX3JlcGxhY2VfY2RuKF92aWRlby5iYWNrdXBfdXJsWzBdKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYmFja3VwX2F1ZGlvID0gZGF0YS5kYXNoLmF1ZGlvWzBdLmJhY2t1cF91cmwgJiYgdXJsX3JlcGxhY2VfY2RuKGRhdGEuZGFzaC5hdWRpb1swXS5iYWNrdXBfdXJsWzBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc3VsdENvbnZlcnRvcihyZXN1bHQsIF9zdWNjZXNzKTsKICAgICAgICAgICAgICAgIH0gZWxzZSByZXN1bHRDb252ZXJ0b3IoewogICAgICAgICAgICAgICAgICAgIGNvZGU6IDAsCiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogZGF0YS5xdWFsaXR5LAogICAgICAgICAgICAgICAgICAgIGFjY2VwdF9xdWFsaXR5OiBkYXRhLmFjY2VwdF9xdWFsaXR5LAogICAgICAgICAgICAgICAgICAgIHVybDogdXJsX3JlcGxhY2VfY2RuKGRhdGEuZHVybFswXS51cmwpLAogICAgICAgICAgICAgICAgICAgIGJhY2t1cF91cmw6IGRhdGEuZHVybFswXS5iYWNrdXBfdXJsICYmIHVybF9yZXBsYWNlX2NkbihkYXRhLmR1cmxbMF0uYmFja3VwX3VybFswXSkKICAgICAgICAgICAgICAgIH0sIF9zdWNjZXNzKTsKICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfZXJyb3IoZXJyKTsKICAgICAgICAgICAgfSkpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBfZ2V0X3N1YnRpdGxlKHAsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciB0b19ibG9iX3VybCA9ICEoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0pIHx8IGFyZ3VtZW50c1syXSwgdmIgPSB2aWRlby5iYXNlKCksIF9yZWYzID0gWyB2Yi5haWQocCksIHZiLmNpZChwKSwgdmIuZXBpZChwKSBdLCBhaWQgPSBfcmVmM1swXSwgY2lkID0gX3JlZjNbMV0sIGVwaWQgPSBfcmVmM1syXTsKICAgICAgICAgICAgKDAsIGFqYXguaCkoewogICAgICAgICAgICAgICAgdXJsOiAiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcGxheWVyL3YyP2FpZD0iLmNvbmNhdChhaWQsICImY2lkPSIpLmNvbmNhdChjaWQsICImZXBfaWQ9IikuY29uY2F0KGVwaWQpLAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIgogICAgICAgICAgICB9KS50aGVuKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICFyZXMuY29kZSAmJiByZXMuZGF0YS5zdWJ0aXRsZS5zdWJ0aXRsZXNbMF0gPyAoMCwgYWpheC5oKSh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiIi5jb25jYXQocmVzLmRhdGEuc3VidGl0bGUuc3VidGl0bGVzWzBdLnN1YnRpdGxlX3VybCksCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIgogICAgICAgICAgICAgICAgfSkudGhlbigoZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9zdGVwLCB3ZWJ2dHQgPSAiV0VCVlRUXG5cbiIsIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHJlcy5ib2R5IHx8IFsgewogICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLAogICAgICAgICAgICAgICAgICAgICAgICB0bzogMCwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogIiIKICAgICAgICAgICAgICAgICAgICB9IF0pOwogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfc3RlcC52YWx1ZSwgYSA9IG5ldyBEYXRlKDFlMyAqIChwYXJzZUludChkYXRhLmZyb20pIC0gMjg4MDApKS50b1RpbWVTdHJpbmcoKS5zcGxpdCgiICIpWzBdICsgIi4iICsgKGRhdGEuZnJvbS50b1N0cmluZygpLnNwbGl0KCIuIilbMV0gfHwgIjAwMCIpLnBhZEVuZCgzLCAiMCIpLCBiID0gbmV3IERhdGUoMWUzICogKHBhcnNlSW50KGRhdGEudG8pIC0gMjg4MDApKS50b1RpbWVTdHJpbmcoKS5zcGxpdCgiICIpWzBdICsgIi4iICsgKGRhdGEudG8udG9TdHJpbmcoKS5zcGxpdCgiLiIpWzFdIHx8ICIwMDAiKS5wYWRFbmQoMywgIjAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYnZ0dCArPSAiIi5jb25jYXQoYSwgIiAtLVx4M2UgIikuY29uY2F0KGIsICJcbiIpLmNvbmNhdChkYXRhLmNvbnRlbnQudHJpbSgpLCAiXG5cbiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodG9fYmxvYl91cmwgPyBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFsgd2VidnR0IF0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQvdnR0IgogICAgICAgICAgICAgICAgICAgIH0pKSA6IHdlYnZ0dCk7CiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goY2FsbGJhY2spIDogY2FsbGJhY2soKTsKICAgICAgICAgICAgfSkpLmNhdGNoKGNhbGxiYWNrKTsKICAgICAgICB9CiAgICAgICAgdmFyIGFwaSA9IHsKICAgICAgICAgICAgZ2V0X3VybDogZnVuY3Rpb24gZ2V0X3VybChzdWNjZXNzLCBlcnJvcikgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RfdHlwZSA9IGNvbmZpZ19jb25maWcucmVxdWVzdF90eXBlLCBmb3JtYXQgPSBjb25maWdfY29uZmlnLmZvcm1hdDsKICAgICAgICAgICAgICAgIGdldF91cmxfYmFzZSgwLCBwYXJzZUludChjb25maWdfY29uZmlnLnZpZGVvX3F1YWxpdHkpLCBmb3JtYXQsIHN1Y2Nlc3MsIGVycm9yLCByZXF1ZXN0X3R5cGUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRfdXJsczogZnVuY3Rpb24gZ2V0X3VybHMocGFnZSwgcXVhbGl0eSwgZm9ybWF0LCBzdWNjZXNzLCBlcnJvcikgewogICAgICAgICAgICAgICAgZ2V0X3VybF9iYXNlKHBhZ2UsIHF1YWxpdHksIGZvcm1hdCwgc3VjY2VzcywgZXJyb3IsIGNvbmZpZ19jb25maWcucmVxdWVzdF90eXBlKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0X3N1YnRpdGxlX3VybDogZnVuY3Rpb24gZ2V0X3N1YnRpdGxlX3VybChwLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgX2dldF9zdWJ0aXRsZShwLCBjYWxsYmFjaywgITApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRfc3VidGl0bGVfZGF0YTogZnVuY3Rpb24gZ2V0X3N1YnRpdGxlX2RhdGEocCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIF9nZXRfc3VidGl0bGUocCwgY2FsbGJhY2ssICExKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0X3NlYXNvbjogZnVuY3Rpb24gZ2V0X3NlYXNvbihzaWQsIGVwaWQpIHsKICAgICAgICAgICAgICAgIHNpZCB8fCBlcGlkID8gKDAsIGFqYXguaCkoewogICAgICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wdWd2L3ZpZXcvd2ViL3NlYXNvbj9zZWFzb25faWQ9Ii5jb25jYXQoc2lkIHx8ICIiLCAiJmVwX2lkPSIpLmNvbmNhdChlcGlkIHx8ICIiKSwKICAgICAgICAgICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiAhMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIgogICAgICAgICAgICAgICAgfSkudGhlbigoZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzLmNvZGUgPyBtZXNzYWdlLnYwLndhcm5pbmcoIuiOt+WPluWJp+mbhuS/oeaBr+Wksei0pSIpIDogd2luZG93LmJwX2VwaXNvZGVzID0gcmVzLmRhdGEuZXBpc29kZXMgfHwgbnVsbDsKICAgICAgICAgICAgICAgIH0pKSA6IGNvbnNvbGUubG9nKCJnZXRfc2Vhc29uIGVycm9yIik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgICAgICAgIHJldHVybiBfdHlwZW9mID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmICJzeW1ib2wiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbihvYmopIHsKICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqOwogICAgICAgICAgICB9IDogZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7CiAgICAgICAgICAgIH0sIF90eXBlb2Yob2JqKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdmlkZW9fYmFzZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7CiAgICAgICAgICAgIHZhciBpdCA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTeW1ib2wgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bIkBAaXRlcmF0b3IiXTsKICAgICAgICAgICAgaWYgKCFpdCkgewogICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gZnVuY3Rpb24gdmlkZW9fYmFzZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIW8pIHJldHVybjsKICAgICAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIG8pIHJldHVybiB2aWRlb19iYXNlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7CiAgICAgICAgICAgICAgICAgICAgIk9iamVjdCIgPT09IG4gJiYgby5jb25zdHJ1Y3RvciAmJiAobiA9IG8uY29uc3RydWN0b3IubmFtZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJNYXAiID09PSBuIHx8ICJTZXQiID09PSBuKSByZXR1cm4gQXJyYXkuZnJvbShvKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIkFyZ3VtZW50cyIgPT09IG4gfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiB2aWRlb19iYXNlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKICAgICAgICAgICAgICAgIH0obykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgIm51bWJlciIgPT0gdHlwZW9mIG8ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgaXQgJiYgKG8gPSBpdCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwLCBGID0gZnVuY3Rpb24gRigpIHt9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHM6IEYsCiAgICAgICAgICAgICAgICAgICAgICAgIG46IGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA+PSBvLmxlbmd0aCA/IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiAhMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb1tpKytdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBlOiBmdW5jdGlvbiBlKF9lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZjogRgogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVyciwgbm9ybWFsQ29tcGxldGlvbiA9ICEwLCBkaWRFcnIgPSAhMTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHM6IGZ1bmN0aW9uIHMoKSB7CiAgICAgICAgICAgICAgICAgICAgaXQgPSBpdC5jYWxsKG8pOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG46IGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmUsIHN0ZXA7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZTogZnVuY3Rpb24gZShfZTIpIHsKICAgICAgICAgICAgICAgICAgICBkaWRFcnIgPSAhMCwgZXJyID0gX2UyOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGY6IGZ1bmN0aW9uIGYoKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQ29tcGxldGlvbiB8fCBudWxsID09IGl0LnJldHVybiB8fCBpdC5yZXR1cm4oKTsKICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiB2aWRlb19iYXNlX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsKICAgICAgICAgICAgKG51bGwgPT0gbGVuIHx8IGxlbiA+IGFyci5sZW5ndGgpICYmIChsZW4gPSBhcnIubGVuZ3RoKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOwogICAgICAgICAgICByZXR1cm4gYXJyMjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiBzdXBlckNsYXNzICYmIG51bGwgIT09IHN1cGVyQ2xhc3MpIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgICAgICAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgICAgICAgICAgICAgY29uc3RydWN0b3I6IHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6ICEwLAogICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgInByb3RvdHlwZSIsIHsKICAgICAgICAgICAgICAgIHdyaXRhYmxlOiAhMQogICAgICAgICAgICB9KSwgc3VwZXJDbGFzcyAmJiBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogICAgICAgICAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gby5fX3Byb3RvX18gPSBwLCBvOwogICAgICAgICAgICB9LCBfc2V0UHJvdG90eXBlT2YobywgcCk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7CiAgICAgICAgICAgIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsKICAgICAgICAgICAgICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2YgUmVmbGVjdCB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgUHJveHkpIHJldHVybiAhMDsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgKGZ1bmN0aW9uKCkge30pKSksIAogICAgICAgICAgICAgICAgICAgICEwOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSgpOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKTsKICAgICAgICAgICAgICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogICAgICAgICAgICBpZiAoY2FsbCAmJiAoIm9iamVjdCIgPT09IF90eXBlb2YoY2FsbCkgfHwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgY2FsbCkpIHJldHVybiBjYWxsOwogICAgICAgICAgICBpZiAodm9pZCAwICE9PSBjYWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZCIpOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBzZWxmKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgICAgIH0oc2VsZik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICAgICAgICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgICAgICAgICAgICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgICAgICAgICAgIH0sIF9nZXRQcm90b3R5cGVPZihvKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdmlkZW9fYmFzZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiB2aWRlb19iYXNlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8ICExLCBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9ICEwLCAKICAgICAgICAgICAgICAgICJ2YWx1ZSIgaW4gZGVzY3JpcHRvciAmJiAoZGVzY3JpcHRvci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHZpZGVvX2Jhc2VfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICAgICAgICAgIHJldHVybiBwcm90b1Byb3BzICYmIHZpZGVvX2Jhc2VfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpLCAKICAgICAgICAgICAgc3RhdGljUHJvcHMgJiYgdmlkZW9fYmFzZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgInByb3RvdHlwZSIsIHsKICAgICAgICAgICAgICAgIHdyaXRhYmxlOiAhMQogICAgICAgICAgICB9KSwgQ29uc3RydWN0b3I7CiAgICAgICAgfQogICAgICAgIHZhciBjbGF6ek1hcCA9IHt9LCBWaWRlb0Jhc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZnVuY3Rpb24gVmlkZW9CYXNlKHZpZGVvX3R5cGUsIG1haW5fdGl0bGUsIHN0YXRlKSB7CiAgICAgICAgICAgICAgICB2aWRlb19iYXNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvQmFzZSksIHRoaXMuY29uc3RydWN0b3IubmFtZSBpbiBjbGF6ek1hcCB8fCAoY2xhenpNYXBbdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXSA9IHRoaXMuY29uc3RydWN0b3IpLCAKICAgICAgICAgICAgICAgIHRoaXMudmlkZW9fdHlwZSA9IHZpZGVvX3R5cGUgfHwgInZpZGVvIiwgdGhpcy5tYWluX3RpdGxlID0gbWFpbl90aXRsZSB8fCAiIiwgdGhpcy5zdGF0ZSA9IHN0YXRlLCAKICAgICAgICAgICAgICAgIHRoaXMucGFnZSA9IHN0YXRlICYmIHBhcnNlSW50KHN0YXRlLnApIHx8IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHZpZGVvX2Jhc2VfY3JlYXRlQ2xhc3MoVmlkZW9CYXNlLCBbIHsKICAgICAgICAgICAgICAgIGtleTogImdldFZpZGVvIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlbyhwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcywgY2xhenogPSBjbGF6ek1hcFt0aGlzLmNvbnN0cnVjdG9yLm5hbWVdOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoVmlkZW9CYXNlLnByb3RvdHlwZSkuZmlsdGVyKChmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhWyAiY29uc3RydWN0b3IiLCAiZ2V0VmlkZW8iIF0uaW5jbHVkZXMobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgfSkpLm1hcCgoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIGtleSwgY2xhenoucHJvdG90eXBlW2tleV0uY2FsbChfdGhpcywgcCkgXTsKICAgICAgICAgICAgICAgICAgICB9KSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0eXBlIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0eXBlKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZGVvX3R5cGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogInAiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHAoX3ApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9wID0gcGFyc2VJbnQoX3ApIHx8IDApID4gMCAmJiBfcCA8PSB0aGlzLnRvdGFsKCkgPyBfcCA6IHRoaXMucGFnZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiaWQiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wKHApIC0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAidG90YWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvdGFsKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdGl0bGUoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJmaWxlbmFtZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsZW5hbWUoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJhaWQiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFpZCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiYnZpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnZpZCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImNpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2lkKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJlcGlkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlcGlkKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAibmVlZFZpcCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmVlZFZpcCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogInZpcE5lZWRQYXkiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZpcE5lZWRQYXkoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJpc0xpbWl0ZWQiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTGltaXRlZCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSksIFZpZGVvQmFzZTsKICAgICAgICB9KCksIFZpZGVvID0gZnVuY3Rpb24oX1ZpZGVvQmFzZSkgewogICAgICAgICAgICBfaW5oZXJpdHMoVmlkZW8sIF9WaWRlb0Jhc2UpOwogICAgICAgICAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFZpZGVvKTsKICAgICAgICAgICAgZnVuY3Rpb24gVmlkZW8obWFpbl90aXRsZSwgc3RhdGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2aWRlb19iYXNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvKSwgX3N1cGVyLmNhbGwodGhpcywgInZpZGVvIiwgbWFpbl90aXRsZSwgc3RhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2aWRlb19iYXNlX2NyZWF0ZUNsYXNzKFZpZGVvLCBbIHsKICAgICAgICAgICAgICAgIGtleTogInRvdGFsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b3RhbCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52aWRlb0RhdGEucGFnZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdGl0bGUocCkgewogICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuaWQocCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudmlkZW9EYXRhLnBhZ2VzW2lkXS5wYXJ0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJmaWxlbmFtZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsZW5hbWUocCkgewogICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuaWQocCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLm1haW5fdGl0bGUgKyAodGhpcy50b3RhbCgpID4gMSA/ICIgUCIuY29uY2F0KGlkICsgMSwgIiAiKS5jb25jYXQodGhpcy5zdGF0ZS52aWRlb0RhdGEucGFnZXNbaWRdLnBhcnQgfHwgIiIpIDogIiIpKS5yZXBsYWNlKC9bXC9cXDoqPyI8PnxdKy9nLCAiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImFpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWlkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52aWRlb0RhdGEuYWlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJidmlkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidmlkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52aWRlb0RhdGEuYnZpZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiY2lkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaWQocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnZpZGVvRGF0YS5wYWdlc1t0aGlzLmlkKHApXS5jaWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSksIFZpZGVvOwogICAgICAgIH0oVmlkZW9CYXNlKSwgVmlkZW9MaXN0ID0gZnVuY3Rpb24oX1ZpZGVvQmFzZTIpIHsKICAgICAgICAgICAgX2luaGVyaXRzKFZpZGVvTGlzdCwgX1ZpZGVvQmFzZTIpOwogICAgICAgICAgICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihWaWRlb0xpc3QpOwogICAgICAgICAgICBmdW5jdGlvbiBWaWRlb0xpc3QobWFpbl90aXRsZSwgc3RhdGUpIHsKICAgICAgICAgICAgICAgIHZhciBfdGhpczI7CiAgICAgICAgICAgICAgICB2aWRlb19iYXNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvTGlzdCksIChfdGhpczIgPSBfc3VwZXIyLmNhbGwodGhpcywgInZpZGVvIiwgbWFpbl90aXRsZSwgc3RhdGUpKS52aWRlbyA9IG5ldyBWaWRlbyhzdGF0ZS52aWRlb0RhdGEudGl0bGUsIHN0YXRlKSwgCiAgICAgICAgICAgICAgICBfdGhpczIucmVzb3VyY2VMaXN0ID0gc3RhdGUucmVzb3VyY2VMaXN0IHx8IFtdOwogICAgICAgICAgICAgICAgdmFyIF9zdGVwLCB2aWRlb19saXN0ID0gW10sIF9pdGVyYXRvciA9IHZpZGVvX2Jhc2VfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfdGhpczIucmVzb3VyY2VMaXN0KTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTsgKSBmb3IgKHZhciB2aWRlbyA9IF9zdGVwLnZhbHVlLCBpID0gMCwgbGVuZ3RoID0gdmlkZW8ucGFnZXMgJiYgdmlkZW8ucGFnZXMubGVuZ3RoIHx8IDA7IGkgPCBsZW5ndGg7ICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3ZpZGVvID0gT2JqZWN0LmFzc2lnbih7fSwgdmlkZW8pOwogICAgICAgICAgICAgICAgICAgICAgICBfdmlkZW8udGl0bGUgPSB2aWRlby50aXRsZSArIChsZW5ndGggPiAxID8gIiBQIi5jb25jYXQoaSArIDEsICIgIikuY29uY2F0KHZpZGVvLnBhZ2VzW2ldLnRpdGxlKSA6ICIiKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIF92aWRlby5jaWQgPSB2aWRlby5wYWdlc1tpXS5pZCwgdmlkZW9fbGlzdC5wdXNoKF92aWRlbyksIGkrKzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi52aWRlb19saXN0ID0gdmlkZW9fbGlzdCwgX3RoaXMyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2aWRlb19iYXNlX2NyZWF0ZUNsYXNzKFZpZGVvTGlzdCwgWyB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0b3RhbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG90YWwoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9fbGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogInRpdGxlIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0aXRsZShwKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAgPyB0aGlzLnZpZGVvX2xpc3RbdGhpcy5pZChwKV0udGl0bGUgOiB0aGlzLnZpZGVvLnRpdGxlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImZpbGVuYW1lIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxlbmFtZShwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFwKSByZXR1cm4gdGhpcy52aWRlby5maWxlbmFtZSgpOwogICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuaWQocCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLm1haW5fdGl0bGUgKyAodGhpcy50b3RhbCgpID4gMSA/ICIgUCIuY29uY2F0KGlkICsgMSwgIiAiKS5jb25jYXQodGhpcy52aWRlb19saXN0W2lkXS50aXRsZSkgOiAiIikpLnJlcGxhY2UoL1tcL1xcOio/Ijw+fF0rL2csICIiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiYWlkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhaWQocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBwID8gdGhpcy52aWRlb19saXN0W3RoaXMuaWQocCldLmlkIDogdGhpcy52aWRlby5haWQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiYnZpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnZpZChwKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAgPyB0aGlzLnZpZGVvX2xpc3RbdGhpcy5pZChwKV0uYnZfaWQgOiB0aGlzLnZpZGVvLmJ2aWQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiY2lkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaWQocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBwID8gdGhpcy52aWRlb19saXN0W3RoaXMuaWQocCldLmNpZCA6IHRoaXMudmlkZW8uY2lkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSksIFZpZGVvTGlzdDsKICAgICAgICB9KFZpZGVvQmFzZSksIEJhbmd1bWkgPSBmdW5jdGlvbihfVmlkZW9CYXNlMykgewogICAgICAgICAgICBfaW5oZXJpdHMoQmFuZ3VtaSwgX1ZpZGVvQmFzZTMpOwogICAgICAgICAgICB2YXIgX3N1cGVyMyA9IF9jcmVhdGVTdXBlcihCYW5ndW1pKTsKICAgICAgICAgICAgZnVuY3Rpb24gQmFuZ3VtaShtYWluX3RpdGxlLCBzdGF0ZSkgewogICAgICAgICAgICAgICAgdmFyIF90aGlzMzsKICAgICAgICAgICAgICAgIHJldHVybiB2aWRlb19iYXNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhbmd1bWkpLCAoX3RoaXMzID0gX3N1cGVyMy5jYWxsKHRoaXMsICJiYW5ndW1pIiwgbWFpbl90aXRsZSwgc3RhdGUpKS5lcEluZm8gPSBzdGF0ZS5lcEluZm8sIAogICAgICAgICAgICAgICAgX3RoaXMzLmVwTGlzdCA9IHN0YXRlLmVwTGlzdCwgX3RoaXMzLmVwSWQgPSBzdGF0ZS5lcElkLCBfdGhpczMuZXBNYXAgPSBzdGF0ZS5lcE1hcCwgCiAgICAgICAgICAgICAgICBfdGhpczMubWVkaWFJbmZvID0gc3RhdGUubWVkaWFJbmZvLCBfdGhpczM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHZpZGVvX2Jhc2VfY3JlYXRlQ2xhc3MoQmFuZ3VtaSwgWyB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0b3RhbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG90YWwoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXBMaXN0Lmxlbmd0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAidGl0bGUiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRpdGxlKHApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZXAgPSBwID8gdGhpcy5lcExpc3RbdGhpcy5pZChwKV0gOiB0aGlzLmVwTWFwICYmIHRoaXMuZXBJZCA/IHRoaXMuZXBNYXBbdGhpcy5lcElkXSA6IHRoaXMuZXBJbmZvOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAiIi5jb25jYXQoZXAudGl0bGVGb3JtYXQsICIgIikuY29uY2F0KGVwLmxvbmdfdGl0bGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJmaWxlbmFtZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsZW5hbWUocCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlcCA9IHAgPyB0aGlzLmVwTGlzdFt0aGlzLmlkKHApXSA6IHRoaXMuZXBNYXAgJiYgdGhpcy5lcElkID8gdGhpcy5lcE1hcFt0aGlzLmVwSWRdIDogdGhpcy5lcEluZm87CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiLmNvbmNhdCh0aGlzLm1haW5fdGl0bGUsICLvvJoiKS5jb25jYXQoZXAudGl0bGVGb3JtYXQsICIgIikuY29uY2F0KGVwLmxvbmdfdGl0bGUpLnJlcGxhY2UoL1tcL1xcOio/Ijw+fF0rL2csICIiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiYWlkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhaWQocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAocCA/IHRoaXMuZXBMaXN0W3RoaXMuaWQocCldIDogdGhpcy5lcE1hcCAmJiB0aGlzLmVwSWQgPyB0aGlzLmVwTWFwW3RoaXMuZXBJZF0gOiB0aGlzLmVwSW5mbykuYWlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJidmlkIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidmlkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHAgPyB0aGlzLmVwTGlzdFt0aGlzLmlkKHApXSA6IHRoaXMuZXBNYXAgJiYgdGhpcy5lcElkID8gdGhpcy5lcE1hcFt0aGlzLmVwSWRdIDogdGhpcy5lcEluZm8pLmJ2aWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImNpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2lkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHAgPyB0aGlzLmVwTGlzdFt0aGlzLmlkKHApXSA6IHRoaXMuZXBNYXAgJiYgdGhpcy5lcElkID8gdGhpcy5lcE1hcFt0aGlzLmVwSWRdIDogdGhpcy5lcEluZm8pLmNpZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAiZXBpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXBpZChwKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwID8gdGhpcy5lcExpc3RbdGhpcy5pZChwKV0gOiB0aGlzLmVwTWFwICYmIHRoaXMuZXBJZCA/IHRoaXMuZXBNYXBbdGhpcy5lcElkXSA6IHRoaXMuZXBJbmZvKS5pZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAibmVlZFZpcCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmVlZFZpcChwKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICLkvJrlkZgiID09PSAocCA/IHRoaXMuZXBMaXN0W3RoaXMuaWQocCldIDogdGhpcy5lcE1hcCAmJiB0aGlzLmVwSWQgPyB0aGlzLmVwTWFwW3RoaXMuZXBJZF0gOiB0aGlzLmVwSW5mbykuYmFkZ2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogInZpcE5lZWRQYXkiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZpcE5lZWRQYXkocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAi5LuY6LS5IiA9PT0gKHAgPyB0aGlzLmVwTGlzdFt0aGlzLmlkKHApXSA6IHRoaXMuZXBNYXAgJiYgdGhpcy5lcElkID8gdGhpcy5lcE1hcFt0aGlzLmVwSWRdIDogdGhpcy5lcEluZm8pLmJhZGdlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJpc0xpbWl0ZWQiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTGltaXRlZCgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLm1lZGlhSW5mby51c2VyX3N0YXR1cy5hcmVhX2xpbWl0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0pLCBCYW5ndW1pOwogICAgICAgIH0oVmlkZW9CYXNlKSwgQ2hlZXNlID0gZnVuY3Rpb24oX1ZpZGVvQmFzZTQpIHsKICAgICAgICAgICAgX2luaGVyaXRzKENoZWVzZSwgX1ZpZGVvQmFzZTQpOwogICAgICAgICAgICB2YXIgX3N1cGVyNCA9IF9jcmVhdGVTdXBlcihDaGVlc2UpOwogICAgICAgICAgICBmdW5jdGlvbiBDaGVlc2UobWFpbl90aXRsZSwgc3RhdGUpIHsKICAgICAgICAgICAgICAgIHZhciBfdGhpczQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdmlkZW9fYmFzZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGVlc2UpLCAoX3RoaXM0ID0gX3N1cGVyNC5jYWxsKHRoaXMsICJjaGVlc2UiLCBtYWluX3RpdGxlLCBzdGF0ZSkpLmVwaXNvZGVzID0gc3RhdGUuZXBpc29kZXMsIAogICAgICAgICAgICAgICAgX3RoaXM0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2aWRlb19iYXNlX2NyZWF0ZUNsYXNzKENoZWVzZSwgWyB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0b3RhbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG90YWwoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXBpc29kZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdGl0bGUocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVwaXNvZGVzW3RoaXMuaWQocCldLnRpdGxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJmaWxlbmFtZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsZW5hbWUocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5tYWluX3RpdGxlLCAiIFAiKS5jb25jYXQodGhpcy5wKHApLCAiICIpLmNvbmNhdCh0aGlzLnRpdGxlKHApKS5yZXBsYWNlKC9bXC9cXDoqPyI8PnxdKy9nLCAiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImFpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWlkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcGlzb2Rlc1t0aGlzLmlkKHApXS5haWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImNpZCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2lkKHApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lcGlzb2Rlc1t0aGlzLmlkKHApXS5jaWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImVwaWQiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVwaWQocCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVwaXNvZGVzW3RoaXMuaWQocCldLmlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0pLCBDaGVlc2U7CiAgICAgICAgfShWaWRlb0Jhc2UpOwogICAgICAgIGZ1bmN0aW9uIHR5cGUoKSB7CiAgICAgICAgICAgIHZhciByb3V0ZXJNYXAgPSB7CiAgICAgICAgICAgICAgICB2aWRlbzogIi92aWRlby8iLAogICAgICAgICAgICAgICAgbGlzdDogIi9saXN0LyIsCiAgICAgICAgICAgICAgICBiYW5ndW1pOiAiL2Jhbmd1bWkvcGxheS8iLAogICAgICAgICAgICAgICAgY2hlZXNlOiAiL2NoZWVzZS9wbGF5LyIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHJvdXRlck1hcCkgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgocm91dGVyTWFwW2tleV0pKSByZXR1cm4ga2V5OwogICAgICAgICAgICByZXR1cm4gIj8iOwogICAgICAgIH0KICAgICAgICB2YXIgcV9tYXAgPSB7CiAgICAgICAgICAgICIxMDgwUCDpq5jnoIHnjociOiAxMTIsCiAgICAgICAgICAgICIxMDgwUCDpq5jmuIUiOiA4MCwKICAgICAgICAgICAgIjcyMFAg6auY5riFIjogNjQsCiAgICAgICAgICAgICI0ODBQIOa4heaZsCI6IDMyLAogICAgICAgICAgICAiMzYwUCDmtYHnlYUiOiAxNiwKICAgICAgICAgICAgIuiHquWKqCI6IDMyCiAgICAgICAgfTsKICAgICAgICB2YXIgdmlkZW8gPSB7CiAgICAgICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgICAgIGJhc2U6IGZ1bmN0aW9uIGJhc2UoKSB7CiAgICAgICAgICAgICAgICB2YXIgX3R5cGUgPSB0eXBlKCk7CiAgICAgICAgICAgICAgICBpZiAoInZpZGVvIiA9PT0gX3R5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB3aW5kb3cuX19JTklUSUFMX1NUQVRFX18sIG1haW5fdGl0bGUgPSBzdGF0ZS52aWRlb0RhdGEgJiYgc3RhdGUudmlkZW9EYXRhLnRpdGxlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVmlkZW8obWFpbl90aXRsZSwgc3RhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCJsaXN0IiA9PT0gX3R5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3N0YXRlID0gd2luZG93Ll9fSU5JVElBTF9TVEFURV9fLCBfbWFpbl90aXRsZSA9IF9zdGF0ZS5tZWRpYUxpc3RJbmZvICYmIF9zdGF0ZS5tZWRpYUxpc3RJbmZvLnVwcGVyLm5hbWUgKyAiLSIgKyBfc3RhdGUubWVkaWFMaXN0SW5mby50aXRsZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFZpZGVvTGlzdChfbWFpbl90aXRsZSwgX3N0YXRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgiYmFuZ3VtaSIgPT09IF90eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5fX0lOSVRJQUxfU1RBVEVfXykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3N0YXRlMyA9IHdpbmRvdy5fX0lOSVRJQUxfU1RBVEVfXywgX21haW5fdGl0bGUzID0gX3N0YXRlMy5tZWRpYUluZm8uc2Vhc29uX3RpdGxlOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3N0YXRlMy5wID0gX3N0YXRlMy5lcEluZm8uaSArIDEsIG5ldyBCYW5ndW1pKF9tYWluX3RpdGxlMywgX3N0YXRlMyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBlcGlkLCBxdWVyaWVzID0gd2luZG93Ll9fTkVYVF9EQVRBX18ucHJvcHMucGFnZVByb3BzLmRlaHlkcmF0ZWRTdGF0ZS5xdWVyaWVzLCBfcXVlcmllcyQwJHN0YXRlJGRhdGEgPSBxdWVyaWVzWzBdLnN0YXRlLmRhdGEsIG1lZGlhSW5mbyA9IF9xdWVyaWVzJDAkc3RhdGUkZGF0YS5tZWRpYUluZm8sIGVwTWFwID0gX3F1ZXJpZXMkMCRzdGF0ZSRkYXRhLmVwTWFwLCBoaXN0b3J5RXBJZCA9IHF1ZXJpZXNbMV0uc3RhdGUuZGF0YS51c2VySW5mby5oaXN0b3J5LmVwSWQsIF9tYWluX3RpdGxlMiA9IG1lZGlhSW5mby5zZWFzb25fdGl0bGUsIGVwaXNvZGVzID0gbWVkaWFJbmZvLmVwaXNvZGVzOwogICAgICAgICAgICAgICAgICAgIGVwaWQgPSBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCIvYmFuZ3VtaS9wbGF5L3NzIikgPyBwYXJzZUludChoaXN0b3J5RXBJZCkgOiAoZXBpZCA9IGxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKC9lcChcZCspLykpID8gcGFyc2VJbnQoZXBpZFsxXSkgOiAwOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pZCA9IDAsIGkgPSAwOyBpIDwgZXBpc29kZXMubGVuZ3RoOyBpKyspIGlmIChlcGlzb2Rlc1tpXS5pZCA9PSBlcGlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pZCA9IGk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJhbmd1bWkoX21haW5fdGl0bGUyLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHA6IF9pZCArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGVwSWQ6IGVwaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGVwTGlzdDogZXBpc29kZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhSW5mbzogbWVkaWFJbmZvLAogICAgICAgICAgICAgICAgICAgICAgICBlcE1hcDogZXBNYXAKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgiY2hlZXNlIiA9PT0gX3R5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX2VwaWQsIHNpZCA9IChsb2NhdGlvbi5ocmVmLm1hdGNoKC9cL2NoZWVzZVwvcGxheVwvc3MoXGQrKS9pKSB8fCBbICIiLCAiIiBdKVsxXTsKICAgICAgICAgICAgICAgICAgICBzaWQgfHwgKF9lcGlkID0gKGxvY2F0aW9uLmhyZWYubWF0Y2goL1wvY2hlZXNlXC9wbGF5XC9lcChcZCspL2kpIHx8IFsgIiIsICIiIF0pWzFdKSwgCiAgICAgICAgICAgICAgICAgICAgd2luZG93LmJwX2VwaXNvZGVzIHx8ICh3aW5kb3cuYnBfZXBpc29kZXMgPSBbXSwgYXBpLmdldF9zZWFzb24oc2lkLCBfZXBpZCkpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lcGlzb2RlcyA9IHdpbmRvdy5icF9lcGlzb2RlcywgX2lkMiA9IDAsIF9pID0gMDsgX2kgPCBfZXBpc29kZXMubGVuZ3RoOyBfaSsrKSBpZiAoX2VwaXNvZGVzW19pXS5pZCA9PSBfZXBpZCkgewogICAgICAgICAgICAgICAgICAgICAgICBfaWQyID0gX2k7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgX21haW5fdGl0bGU0ID0gKCQoImRpdi5hcmNoaXZlLXRpdGxlLWJveCIpLnRleHQoKSB8fCAidW5rbm93biIpLnJlcGxhY2UoL1tcL1xcOio/Ijw+fF0rL2csICIiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENoZWVzZShfbWFpbl90aXRsZTQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgcDogX2lkMiArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGVwaXNvZGVzOiBfZXBpc29kZXMKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVmlkZW9CYXNlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRfcXVhbGl0eTogZnVuY3Rpb24gZ2V0X3F1YWxpdHkoKSB7CiAgICAgICAgICAgICAgICB2YXIgX3EgPSAwLCBfcV9tYXggPSAwLCBfdHlwZSA9IHR5cGUoKTsKICAgICAgICAgICAgICAgIGlmICgiY2hlZXNlIiA9PT0gX3R5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcSA9ICQoImRpdi5lZHUtcGxheWVyLXF1YWxpdHktaXRlbS5hY3RpdmUgc3BhbiIpLnRleHQoKSwgcV9tYXggPSAkKCQoImRpdi5lZHUtcGxheWVyLXF1YWxpdHktaXRlbSBzcGFuIikuZ2V0KDApKS50ZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgX3EgPSBxIGluIHFfbWFwID8gcV9tYXBbcV0gOiAwLCBfcV9tYXggPSBxX21heCBpbiBxX21hcCA/IHFfbWFwW3FfbWF4XSA6IDA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmlkZW9RdWFsaXR5TWFwKSwgX3EyID0gcGFyc2VJbnQoKCJ2aWRlbyIgPT09IF90eXBlID8gJCgibGkuYnB4LXBsYXllci1jdHJsLXF1YWxpdHktbWVudS1pdGVtLmJweC1zdGF0ZS1hY3RpdmUiKSA6ICQoImxpLnNxdWlydGxlLXNlbGVjdC1pdGVtLmFjdGl2ZSIpKS5hdHRyKCJkYXRhLXZhbHVlIikpLCBfcV9tYXgyID0gcGFyc2VJbnQoJCgoInZpZGVvIiA9PT0gX3R5cGUgPyAkKCJsaS5icHgtcGxheWVyLWN0cmwtcXVhbGl0eS1tZW51LWl0ZW0iKSA6ICQoImxpLnNxdWlydGxlLXNlbGVjdC1pdGVtIikpLmdldCgwKSkuYXR0cigiZGF0YS12YWx1ZSIpKTsKICAgICAgICAgICAgICAgICAgICBfcSA9IGtleXMuaW5kZXhPZigiIi5jb25jYXQoX3EyKSkgPiAtMSA/IF9xMiA6IDAsIF9xX21heCA9IGtleXMuaW5kZXhPZigiIi5jb25jYXQoX3FfbWF4MikpID4gLTEgPyBfcV9tYXgyIDogMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAhX3EgJiYgKF9xID0gODApLCAhX3FfbWF4ICYmIChfcV9tYXggPSA4MCksIHVzZXIuaXNWSVAoKSB8fCAoX3EgPSBfcSA+IDgwID8gODAgOiBfcSksIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHE6IF9xLAogICAgICAgICAgICAgICAgICAgIHFfbWF4OiBfcV9tYXgKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldF9xdWFsaXR5X3N1cHBvcnQ6IGZ1bmN0aW9uIGdldF9xdWFsaXR5X3N1cHBvcnQoKSB7CiAgICAgICAgICAgICAgICB2YXIgbGlzdCwgcXVhbGl0eV9saXN0ID0gW10sIF90eXBlID0gdHlwZSgpOwogICAgICAgICAgICAgICAgaWYgKCJjaGVlc2UiID09PSBfdHlwZSkgKGxpc3QgPSAkKCJkaXYuZWR1LXBsYXllci1xdWFsaXR5LWl0ZW0gc3BhbiIpKS5lYWNoKChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgayA9ICQodGhpcykudGV4dCgpOwogICAgICAgICAgICAgICAgICAgIHFfbWFwW2tdICYmIHF1YWxpdHlfbGlzdC5wdXNoKHFfbWFwW2tdKTsKICAgICAgICAgICAgICAgIH0pKTsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2aWRlb1F1YWxpdHlNYXApOwogICAgICAgICAgICAgICAgICAgIChsaXN0ID0gWyAidmlkZW8iLCAibGlzdCIgXS5pbmNsdWRlcyhfdHlwZSkgPyAkKCJsaS5icHgtcGxheWVyLWN0cmwtcXVhbGl0eS1tZW51LWl0ZW0iKSA6ICQoImxpLnNxdWlydGxlLXNlbGVjdC1pdGVtIikpICYmIGxpc3QubGVuZ3RoICYmIGxpc3QuZWFjaCgoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxID0gIiIuY29uY2F0KHBhcnNlSW50KCQodGhpcykuYXR0cigiZGF0YS12YWx1ZSIpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMuaW5kZXhPZihxKSA+IC0xICYmIHF1YWxpdHlfbGlzdC5wdXNoKHEpOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBxdWFsaXR5X2xpc3QubGVuZ3RoID8gcXVhbGl0eV9saXN0IDogWyAiODAiLCAiNjQiLCAiMzIiLCAiMTYiIF07CiAgICAgICAgICAgIH0KICAgICAgICB9LCBydW50aW1lX2xpYiA9IF9fd2VicGFja19yZXF1aXJlX18oNzExKTsKICAgICAgICBmdW5jdGlvbiBnZXRfYmlsaV9wbGF5ZXJfaWQoKSB7CiAgICAgICAgICAgIHJldHVybiAkKCIjYmlsaWJpbGlQbGF5ZXIiKVswXSA/ICIjYmlsaWJpbGlQbGF5ZXIiIDogJCgiI2JpbGliaWxpLXBsYXllciIpWzBdID8gIiNiaWxpYmlsaS1wbGF5ZXIiIDogJCgiI2VkdS1wbGF5ZXIiKVswXSA/ICJkaXYuYnB4LXBsYXllci1wcmltYXJ5LWFyZWEiIDogdm9pZCAwOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiByZXF1ZXN0X2Rhbm1ha3Uob3B0aW9ucywgY2lkKSB7CiAgICAgICAgICAgIGNpZCA/ICgwLCBhamF4LmgpKHsKICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3YxL2RtL2xpc3Quc28/b2lkPSIuY29uY2F0KGNpZCksCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogInRleHQiCiAgICAgICAgICAgIH0pLnRoZW4oKGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdF9kb20gPSAkKHJlc3VsdC5yZXBsYWNlKC9bXHgwMC1ceDA4XHgwYi1ceDBjXHgwZS1ceDFmXHg3Zl0vZywgIiIpKTsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHRfZG9tKSBpZiAocmVzdWx0X2RvbS5maW5kKCJkIilbMF0pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZGFubWFrdV9kYXRhID0gcmVzdWx0X2RvbS5maW5kKCJkIikubWFwKChmdW5jdGlvbihpLCBlbCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9ICQoZWwpLCBwID0gaXRlbS5hdHRyKCJwIikuc3BsaXQoIiwiKSwgdHlwZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiNCIgPT09IHBbMV0gPyB0eXBlID0gMiA6ICI1IiA9PT0gcFsxXSAmJiAodHlwZSA9IDEpLCBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBwYXJzZUZsb2F0KHBbMF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBwYXJzZUludChwWzNdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGV4dCgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gXTsKICAgICAgICAgICAgICAgICAgICB9KSkuZ2V0KCk7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdWNjZXNzKGRhbm1ha3VfZGF0YSksIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBkYW5tYWt1X2NvbmZpZygpOwogICAgICAgICAgICAgICAgICAgIH0pLCAxMDApOwogICAgICAgICAgICAgICAgfSBlbHNlIG9wdGlvbnMuZXJyb3IoIuacquWPkeeOsOW8ueW5lSIpOyBlbHNlIG9wdGlvbnMuZXJyb3IoIuW8ueW5leiOt+WPluWksei0pSIpOwogICAgICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgb3B0aW9ucy5lcnJvcigi5by55bmV6K+35rGC5byC5bi4Iik7CiAgICAgICAgICAgIH0pKSA6IG9wdGlvbnMuZXJyb3IoImNpZOacquefpe+8jOaXoOazleiOt+WPluW8ueW5lSIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBiaWxpX3ZpZGVvX3RhZygpIHsKICAgICAgICAgICAgcmV0dXJuICQoImJ3cC12aWRlbyIpWzBdID8gImJ3cC12aWRlbyIgOiAkKCd2aWRlb1tjbGFzcyE9ImRwbGF5ZXItdmlkZW8gZHBsYXllci12aWRlby1jdXJyZW50Il0nKVswXSA/ICd2aWRlb1tjbGFzcyE9ImRwbGF5ZXItdmlkZW8gZHBsYXllci12aWRlby1jdXJyZW50Il0nIDogdm9pZCAwOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBiaWxpX3ZpZGVvX3N0b3AoKSB7CiAgICAgICAgICAgIHZhciBiaWxpX3ZpZGVvID0gJChiaWxpX3ZpZGVvX3RhZygpKVswXTsKICAgICAgICAgICAgYmlsaV92aWRlbyAmJiAoYmlsaV92aWRlby5wYXVzZSgpLCBiaWxpX3ZpZGVvLmN1cnJlbnRUaW1lID0gMCk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHJlY292ZXJfcGxheWVyKCkgewogICAgICAgICAgICBpZiAod2luZG93LmJwX2RwbGF5ZXIpIHsKICAgICAgICAgICAgICAgIHZhciBiaWxpX3ZpZGVvID0gJChiaWxpX3ZpZGVvX3RhZygpKVswXTsKICAgICAgICAgICAgICAgIGJpbGlfdmlkZW8gJiYgYmlsaV92aWRlby5yZW1vdmVFdmVudExpc3RlbmVyKCJwbGF5IiwgYmlsaV92aWRlb19zdG9wLCAhMSksIHdpbmRvdy5icF9kcGxheWVyLmRlc3Ryb3koKSwgCiAgICAgICAgICAgICAgICB3aW5kb3cuYnBfZHBsYXllciA9IG51bGwsICQoIiNicF9kcGxheWVyIikucmVtb3ZlKCksIHdpbmRvdy5icF9kcGxheWVyXzIgJiYgKHdpbmRvdy5icF9kcGxheWVyXzIuZGVzdHJveSgpLCAKICAgICAgICAgICAgICAgIHdpbmRvdy5icF9kcGxheWVyXzIgPSBudWxsLCAkKCIjYnBfZHBsYXllcl8yIikucmVtb3ZlKCkpLCAkKGdldF9iaWxpX3BsYXllcl9pZCgpKS5zaG93KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGFubWFrdV9jb25maWcoKSB7CiAgICAgICAgICAgIHZhciBzdHlsZSA9ICIiICsgJzxzdHlsZSBpZD0iZHBsYXllcl9kYW5tYWt1X3N0eWxlIj5cbiAgICAgICAgLmRwbGF5ZXItZGFubWFrdSAuZHBsYXllci1kYW5tYWt1LXJpZ2h0LmRwbGF5ZXItZGFubWFrdS1tb3ZlIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJy5jb25jYXQocGFyc2VGbG9hdChjb25maWdfY29uZmlnLmRhbm1ha3Vfc3BlZWQpLCAicztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogIikuY29uY2F0KHBhcnNlSW50KGNvbmZpZ19jb25maWcuZGFubWFrdV9mb250c2l6ZSksICJweDtcbiAgICAgICAgfVxuICAgICAgICA8L3N0eWxlPiIpOwogICAgICAgICAgICAkKCIjZHBsYXllcl9kYW5tYWt1X3N0eWxlIilbMF0gJiYgJCgiI2RwbGF5ZXJfZGFubWFrdV9zdHlsZSIpLnJlbW92ZSgpLCAkKCJib2R5IikuYXBwZW5kKHN0eWxlKTsKICAgICAgICB9CiAgICAgICAgdmFyIHBsYXllciA9IHsKICAgICAgICAgICAgYmlsaV92aWRlb190YWc6IGJpbGlfdmlkZW9fdGFnLAogICAgICAgICAgICByZWNvdmVyX3BsYXllcjogcmVjb3Zlcl9wbGF5ZXIsCiAgICAgICAgICAgIHJlcGxhY2VfcGxheWVyOiBmdW5jdGlvbiByZXBsYWNlX3BsYXllcih1cmwsIHVybF8yKSB7CiAgICAgICAgICAgICAgICByZWNvdmVyX3BsYXllcigpOwogICAgICAgICAgICAgICAgdmFyIGJpbGlfdmlkZW8gPSAkKGJpbGlfdmlkZW9fdGFnKCkpWzBdOwogICAgICAgICAgICAgICAgYmlsaV92aWRlb19zdG9wKCksIGJpbGlfdmlkZW8gJiYgYmlsaV92aWRlby5hZGRFdmVudExpc3RlbmVyKCJwbGF5IiwgYmlsaV92aWRlb19zdG9wLCAhMSk7CiAgICAgICAgICAgICAgICB2YXIgYmlsaV9wbGF5ZXJfaWQgPSBnZXRfYmlsaV9wbGF5ZXJfaWQoKTsKICAgICAgICAgICAgICAgICQoIiNiaWxpYmlsaVBsYXllciIpWzBdID8gKCQoYmlsaV9wbGF5ZXJfaWQpLmJlZm9yZSgnPGRpdiBpZD0iYnBfZHBsYXllciIgY2xhc3M9ImJpbGliaWxpLXBsYXllciByZWxhdGl2ZSBiaWxpYmlsaS1wbGF5ZXItbm8tY3Vyc29yIj4nKSwgCiAgICAgICAgICAgICAgICAkKGJpbGlfcGxheWVyX2lkKS5oaWRlKCkpIDogJCgiI2JpbGliaWxpLXBsYXllciIpWzBdID8gKCQoYmlsaV9wbGF5ZXJfaWQpLmJlZm9yZSgnPGRpdiBpZD0iYnBfZHBsYXllciIgY2xhc3M9ImJpbGliaWxpLXBsYXllciByZWxhdGl2ZSBiaWxpYmlsaS1wbGF5ZXItbm8tY3Vyc29yIiBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjEwMDA7Ij48L2Rpdj4nKSwgCiAgICAgICAgICAgICAgICAkKGJpbGlfcGxheWVyX2lkKS5oaWRlKCkpIDogJCgiI2VkdS1wbGF5ZXIiKVswXSA/ICgkKGJpbGlfcGxheWVyX2lkKS5iZWZvcmUoJzxkaXYgaWQ9ImJwX2RwbGF5ZXIiIHN0eWxlPSJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MTAwMDsiPjwvZGl2PicpLCAKICAgICAgICAgICAgICAgICQoYmlsaV9wbGF5ZXJfaWQpLmhpZGUoKSkgOiBtZXNzYWdlLl9wLmFsZXJ0KCc8ZGl2IGlkPSJicF9kcGxheWVyIiBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTsiPjwvZGl2PicsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZWNvdmVyX3BsYXllcigpOwogICAgICAgICAgICAgICAgfSkpLCBhcGkuZ2V0X3N1YnRpdGxlX3VybCgwLCAoZnVuY3Rpb24gZHBsYXllcl9pbml0KCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzdWJ0aXRsZV91cmwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1swXSA/IGFyZ3VtZW50c1swXSA6ICIiOwogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYnBfZHBsYXllciA9IG5ldyBydW50aW1lX2xpYi5iYyh7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJCgiI2JwX2RwbGF5ZXIiKVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgbXV0ZXg6ICExLAogICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW86IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHN1YnRpdGxlX3VybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ3ZWJ2dHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICIzNXB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogIjUlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiI2ZmZiIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZGFubWFrdTogITAsCiAgICAgICAgICAgICAgICAgICAgICAgIGFwaUJhY2tlbmQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQob3B0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfZGFubWFrdShvcHRpb25zLCB2aWRlby5iYXNlKCkuY2lkKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQob3B0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZXJyb3IoIuatpOiEmuacrOaXoOazleWwhuW8ueW5leWQjOatpeWIsOS6keerryIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0bWVudTogWyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAi6ISa5pys5L+h5oGvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICJodHRwczovL2dpdGh1Yi5jb20vaW5qYWhvdy91c2VyLmpzIgogICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAi6ISa5pys5L2c6ICFIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICJodHRwczovL2luamFob3cuY29tIgogICAgICAgICAgICAgICAgICAgICAgICB9IF0KICAgICAgICAgICAgICAgICAgICB9KSwgdXJsXzIgJiYgIiMiICE9PSB1cmxfMikgewogICAgICAgICAgICAgICAgICAgICAgICAkKCJib2R5IikuYXBwZW5kKCc8ZGl2IGlkPSJicF9kcGxheWVyXzIiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48L2Rpdj4nKSwgd2luZG93LmJwX2RwbGF5ZXJfMiA9IG5ldyBydW50aW1lX2xpYi5iYyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6ICQoIiNicF9kcGxheWVyXzIiKVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGV4OiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxfMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gWyB3aW5kb3cuYnBfZHBsYXllciwgd2luZG93LmJwX2RwbGF5ZXJfMiBdLCBicF9kcGxheWVyID0gX3JlZlswXSwgYnBfZHBsYXllcl8yID0gX3JlZlsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgYnBfZHBsYXllci5vbigicGxheSIsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICFicF9kcGxheWVyLnBhdXNlZCAmJiBicF9kcGxheWVyXzIucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KSksIGJwX2RwbGF5ZXIub24oInBsYXlpbmciLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhYnBfZHBsYXllci5wYXVzZWQgJiYgYnBfZHBsYXllcl8yLnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBicF9kcGxheWVyLm9uKCJ0aW1ldXBkYXRlIiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoYnBfZHBsYXllci52aWRlby5jdXJyZW50VGltZSAtIGJwX2RwbGF5ZXJfMi52aWRlby5jdXJyZW50VGltZSkgPiAxICYmIChicF9kcGxheWVyXzIucGF1c2UoKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicF9kcGxheWVyXzIuc2VlayhicF9kcGxheWVyLnZpZGVvLmN1cnJlbnRUaW1lKSksICFicF9kcGxheWVyLnBhdXNlZCAmJiBicF9kcGxheWVyXzIucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KSksIGJwX2RwbGF5ZXIub24oInNlZWtpbmciLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicF9kcGxheWVyXzIucGF1c2UoKSwgYnBfZHBsYXllcl8yLnNlZWsoYnBfZHBsYXllci52aWRlby5jdXJyZW50VGltZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgYnBfZHBsYXllci5vbigid2FpdGluZyIsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJwX2RwbGF5ZXJfMi5wYXVzZSgpLCBicF9kcGxheWVyXzIuc2VlayhicF9kcGxheWVyLnZpZGVvLmN1cnJlbnRUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBicF9kcGxheWVyLm9uKCJwYXVzZSIsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJwX2RwbGF5ZXJfMi5wYXVzZSgpLCBicF9kcGxheWVyXzIuc2VlayhicF9kcGxheWVyLnZpZGVvLmN1cnJlbnRUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBicF9kcGxheWVyLm9uKCJzdXNwZW5kIiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnBfZHBsYXllcl8yLnNwZWVkKGJwX2RwbGF5ZXIudmlkZW8ucGxheWJhY2tSYXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBicF9kcGxheWVyLm9uKCJ2b2x1bWVjaGFuZ2UiLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicF9kcGxheWVyXzIudm9sdW1lKGJwX2RwbGF5ZXIudmlkZW8udm9sdW1lKSwgYnBfZHBsYXllcl8yLnZpZGVvLm11dGVkID0gYnBfZHBsYXllci52aWRlby5tdXRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGFubWFrdTogewogICAgICAgICAgICAgICAgY29uZmlnOiBkYW5tYWt1X2NvbmZpZwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBmdW5jdGlvbiBjaGVja19kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCAhMSwgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSAhMCwgCiAgICAgICAgICAgICAgICAidmFsdWUiIGluIGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3Iud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgY2hlY2sgPSBuZXcgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmdW5jdGlvbiBDaGVjaygpIHsKICAgICAgICAgICAgICAgICFmdW5jdGlvbiBjaGVja19jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgICAgICAgICAgICAgICB9KHRoaXMsIENoZWNrKSwgdGhpcy5haWQgPSAiIiwgdGhpcy5jaWQgPSAiIiwgdGhpcy5xID0gIiIsIHRoaXMuZXBpZCA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBjaGVja19jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm90b1Byb3BzICYmIGNoZWNrX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKSwgCiAgICAgICAgICAgICAgICBzdGF0aWNQcm9wcyAmJiBjaGVja19kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgInByb3RvdHlwZSIsIHsKICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogITEKICAgICAgICAgICAgICAgIH0pLCBDb25zdHJ1Y3RvcjsKICAgICAgICAgICAgfShDaGVjaywgWyB7CiAgICAgICAgICAgICAgICBrZXk6ICJyZWZyZXNoIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoKCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJyZWZyZXNoLi4uIiksICQoIiN2aWRlb19kb3dubG9hZCIpLmhpZGUoKSwgJCgiI3ZpZGVvX2Rvd25sb2FkXzIiKS5oaWRlKCksIAogICAgICAgICAgICAgICAgICAgIHBsYXllci5yZWNvdmVyX3BsYXllcigpOwogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YiA9IHZpZGVvLmJhc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5haWQgPSB2Yi5haWQoKSwgdGhpcy5jaWQgPSB2Yi5jaWQoKSwgdGhpcy5lcGlkID0gdmIuZXBpZCgpLCB0aGlzLnEgPSB2aWRlby5nZXRfcXVhbGl0eSgpLnEsIAogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYnBfZXBpc29kZXMgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBdKSwgQ2hlY2s7CiAgICAgICAgfSgpKSwgdWlfc2Nyb2xsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MzcpOwogICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsKICAgICAgICAgICAgdmFyIGl0ID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1siQEBpdGVyYXRvciJdOwogICAgICAgICAgICBpZiAoIWl0KSB7CiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBkb3dubG9hZF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiAibnVtYmVyIiA9PSB0eXBlb2Ygby5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBpdCAmJiAobyA9IGl0KTsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDAsIEYgPSBmdW5jdGlvbiBGKCkge307CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgczogRiwKICAgICAgICAgICAgICAgICAgICAgICAgbjogZnVuY3Rpb24gbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID49IG8ubGVuZ3RoID8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6ICExLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvW2krK10KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGU6IGZ1bmN0aW9uIGUoX2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9lOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBmOiBGCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZXJyLCBub3JtYWxDb21wbGV0aW9uID0gITAsIGRpZEVyciA9ICExOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgczogZnVuY3Rpb24gcygpIHsKICAgICAgICAgICAgICAgICAgICBpdCA9IGl0LmNhbGwobyk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbjogZnVuY3Rpb24gbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IGl0Lm5leHQoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZSwgc3RlcDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlOiBmdW5jdGlvbiBlKF9lMikgewogICAgICAgICAgICAgICAgICAgIGRpZEVyciA9ICEwLCBlcnIgPSBfZTI7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZjogZnVuY3Rpb24gZigpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxDb21wbGV0aW9uIHx8IG51bGwgPT0gaXQucmV0dXJuIHx8IGl0LnJldHVybigpOwogICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBkb3dubG9hZF9hcnJheUxpa2VUb0FycmF5KGFycik7CiAgICAgICAgICAgIH0oYXJyKSB8fCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICAgICAgICAgICAgICAgIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgU3ltYm9sICYmIG51bGwgIT0gaXRlcltTeW1ib2wuaXRlcmF0b3JdIHx8IG51bGwgIT0gaXRlclsiQEBpdGVyYXRvciJdKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKICAgICAgICAgICAgfShhcnIpIHx8IGRvd25sb2FkX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7CiAgICAgICAgICAgIH0oKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZG93bmxvYWRfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7CiAgICAgICAgICAgIGlmIChvKSB7CiAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIG8pIHJldHVybiBkb3dubG9hZF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7CiAgICAgICAgICAgICAgICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gIk9iamVjdCIgPT09IG4gJiYgby5jb25zdHJ1Y3RvciAmJiAobiA9IG8uY29uc3RydWN0b3IubmFtZSksICJNYXAiID09PSBuIHx8ICJTZXQiID09PSBuID8gQXJyYXkuZnJvbShvKSA6ICJBcmd1bWVudHMiID09PSBuIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pID8gZG93bmxvYWRfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pIDogdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsKICAgICAgICAgICAgKG51bGwgPT0gbGVuIHx8IGxlbiA+IGFyci5sZW5ndGgpICYmIChsZW4gPSBhcnIubGVuZ3RoKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOwogICAgICAgICAgICByZXR1cm4gYXJyMjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcnBjX3R5cGUoKSB7CiAgICAgICAgICAgIHJldHVybiBjb25maWdfY29uZmlnLnJwY19kb21haW4ubWF0Y2goImh0dHBzOi8vIikgfHwgY29uZmlnX2NvbmZpZy5ycGNfZG9tYWluLm1hdGNoKC9sb2NhbGhvc3R8MTI3XC4wXC4wXC4xLykgPyAicG9zdCIgOiAiYXJpYW5nIjsKICAgICAgICB9CiAgICAgICAgdmFyIGRvd25sb2FkX3JwY19jbGlja2VkID0gITE7CiAgICAgICAgZnVuY3Rpb24gZG93bmxvYWRfcnBjX3Bvc3QodmlkZW8pIHsKICAgICAgICAgICAgZG93bmxvYWRfcnBjX3Bvc3RfYWxsKFsgdmlkZW8gXSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkX3JwY19wb3N0X2FsbCh2aWRlb3MpIHsKICAgICAgICAgICAgaWYgKGRvd25sb2FkX3JwY19jbGlja2VkKSBtZXNzYWdlLnYwLm1pYW93KCk7IGVsc2UgewogICAgICAgICAgICAgICAgZG93bmxvYWRfcnBjX2NsaWNrZWQgPSAhMDsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0gX3RvQ29uc3VtYWJsZUFycmF5KHZpZGVvcyk7CiAgICAgICAgICAgICAgICAoMCwgYWpheC5oKShmdW5jdGlvbiBnZXRfcnBjX3Bvc3QoZGF0YSkgewogICAgICAgICAgICAgICAgICAgIGRhdGEgaW5zdGFuY2VvZiBBcnJheSB8fCAoZGF0YSA9IGRhdGEgaW5zdGFuY2VvZiBPYmplY3QgPyBbIGRhdGEgXSA6IFtdKTsKICAgICAgICAgICAgICAgICAgICB2YXIgcnBjID0gewogICAgICAgICAgICAgICAgICAgICAgICBkb21haW46IGNvbmZpZ19jb25maWcucnBjX2RvbWFpbiwKICAgICAgICAgICAgICAgICAgICAgICAgcG9ydDogY29uZmlnX2NvbmZpZy5ycGNfcG9ydCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGNvbmZpZ19jb25maWcucnBjX3Rva2VuLAogICAgICAgICAgICAgICAgICAgICAgICBkaXI6IGNvbmZpZ19jb25maWcucnBjX2RpcgogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAiIi5jb25jYXQocnBjLmRvbWFpbiwgIjoiKS5jb25jYXQocnBjLnBvcnQsICIvanNvbnJwYyIpLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEubWFwKChmdW5jdGlvbihfcmVmNCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IF9yZWY0LnVybCwgZmlsZW5hbWUgPSBfcmVmNC5maWxlbmFtZSwgcnBjX2RpciA9IF9yZWY0LnJwY19kaXIsIHBhcmFtID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dDogZmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBbICJVc2VyLUFnZW50OiAiLmNvbmNhdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCksICJSZWZlcmVyOiAiLmNvbmNhdCh3aW5kb3cubG9jYXRpb24uaHJlZikgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAocnBjX2RpciB8fCBycGMuZGlyKSAmJiAocGFyYW0uZGlyID0gcnBjX2RpciB8fCBycGMuZGlyKSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB3aW5kb3cuYnRvYSgiQlBhcnNlXyIuY29uY2F0KERhdGUubm93KCksICJfIikuY29uY2F0KE1hdGgucmFuZG9tKCkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29ucnBjOiAiMi4wIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJhcmlhMi5hZGRVcmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogWyAidG9rZW46Ii5jb25jYXQocnBjLnRva2VuKSwgWyB1cmwgXSwgcGFyYW0gXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KGRhdGEpKS50aGVuKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICByZXMubGVuZ3RoID09PSBkYXRhLmxlbmd0aCA/IG1lc3NhZ2UudjAuc3VjY2VzcygiUlBD6K+35rGC5oiQ5YqfIikgOiBtZXNzYWdlLnYwLndhcm5pbmcoIuivt+ajgOafpVJQQ+WPguaVsCIpOwogICAgICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnYwLmVycm9yKCLor7fmo4Dmn6VSUEPmnI3liqHphY3nva4iKTsKICAgICAgICAgICAgICAgIH0pKS5maW5hbGx5KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG93bmxvYWRfcnBjX2NsaWNrZWQgPSAhMTsKICAgICAgICAgICAgICAgIH0pKSwgbWVzc2FnZS52MC5pbmZvKCLlj5HpgIFSUEPkuIvovb3or7fmsYIiKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBvcGVuX2FyaWFuZyhycGMpIHsKICAgICAgICAgICAgdmFyIGhhc2hfdGFnID0gcnBjID8gIiMhL3NldHRpbmdzL3JwYy9zZXQvIi5jb25jYXQocnBjLmRvbWFpbi5yZXBsYWNlKCI6Ly8iLCAiLyIpLCAiLyIpLmNvbmNhdChycGMucG9ydCwgIi9qc29ucnBjLyIpLmNvbmNhdCh3aW5kb3cuYnRvYShycGMudG9rZW4pKSA6ICIiLCB1cmwgPSBjb25maWdfY29uZmlnLmFyaWFuZ19ob3N0ICsgaGFzaF90YWcsIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCJ0YXJnZXQiLCAiX2JsYW5rIiksIGEuc2V0QXR0cmlidXRlKCJvbmNsaWNrIiwgIndpbmRvdy5icF9hcmlhMl93aW5kb3c9d2luZG93Lm9wZW4oJyIuY29uY2F0KHVybCwgIicpOyIpKSwgCiAgICAgICAgICAgIGEuY2xpY2soKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZG93bmxvYWRfcnBjX2FyaWFuZ19zZW5kKHZpZGVvKSB7CiAgICAgICAgICAgIHZhciBicF9hcmlhMl93aW5kb3cgPSB3aW5kb3cuYnBfYXJpYTJfd2luZG93LCB0aW1lID0gMTAwOwogICAgICAgICAgICBicF9hcmlhMl93aW5kb3cgJiYgIWJwX2FyaWEyX3dpbmRvdy5jbG9zZWQgfHwgKG9wZW5fYXJpYW5nKCksIHRpbWUgPSAzZTMpLCBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBicF9hcmlhMl93aW5kb3cgPSB3aW5kb3cuYnBfYXJpYTJfd2luZG93LCB0YXNrX2hhc2ggPSAiIyEvbmV3L3Rhc2s/IiArIFsgInVybD0iLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQod2luZG93LmJ0b2EodmlkZW8udXJsKSkpLCAib3V0PSIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudCh2aWRlby5maWxlbmFtZSkpLCAiaGVhZGVyPVVzZXItQWdlbnQ6Ii5jb25jYXQod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLCAiaGVhZGVyPVJlZmVyZXI6Ii5jb25jYXQod2luZG93LmxvY2F0aW9uLmhyZWYpIF0uam9pbigiJiIpOwogICAgICAgICAgICAgICAgYnBfYXJpYTJfd2luZG93ICYmICFicF9hcmlhMl93aW5kb3cuY2xvc2VkID8gKGJwX2FyaWEyX3dpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29uZmlnX2NvbmZpZy5hcmlhbmdfaG9zdCArIHRhc2tfaGFzaCwgCiAgICAgICAgICAgICAgICBtZXNzYWdlLnYwLnN1Y2Nlc3MoIuWPkemAgVJQQ+ivt+axgiIpKSA6IG1lc3NhZ2UudjAud2FybmluZygiQXJpYU5H6aG16Z2i5pyq5omT5byAIik7CiAgICAgICAgICAgIH0pLCB0aW1lKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZG93bmxvYWRfcnBjX2FyaWFuZygpIHsKICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZpZGVvcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHZpZGVvc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgICAgICAgMCAhPSB2aWRlb3MubGVuZ3RoICYmICgxID09IHZpZGVvcy5sZW5ndGggJiYgdmlkZW9zWzBdIGluc3RhbmNlb2YgQXJyYXkgPyBkb3dubG9hZF9ycGNfYXJpYW5nLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KHZpZGVvc1swXSkpIDogKGRvd25sb2FkX3JwY19hcmlhbmdfc2VuZCh2aWRlb3MucG9wKCkpLCAKICAgICAgICAgICAgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBkb3dubG9hZF9ycGNfYXJpYW5nLmFwcGx5KHZvaWQgMCwgdmlkZW9zKTsKICAgICAgICAgICAgfSksIDEwMCkpKTsKICAgICAgICB9CiAgICAgICAgdmFyIGRvd25sb2FkX2Jsb2JfY2xpY2tlZCA9ICExLCBuZWVkX3Nob3dfcHJvZ3Jlc3MgPSAhMDsKICAgICAgICBmdW5jdGlvbiBkb3dubG9hZF9ibG9iKHVybCwgZmlsZW5hbWUpIHsKICAgICAgICAgICAgaWYgKGRvd25sb2FkX2Jsb2JfY2xpY2tlZCkgcmV0dXJuIG1lc3NhZ2UudjAubWlhb3coKSwgdm9pZCAobmVlZF9zaG93X3Byb2dyZXNzID0gITApOwogICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0OwogICAgICAgICAgICB4aHIub3BlbigiZ2V0IiwgdXJsKSwgeGhyLnJlc3BvbnNlVHlwZSA9ICJibG9iIiwgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKDIwMCA9PT0gdGhpcy5zdGF0dXMgfHwgMzA0ID09PSB0aGlzLnN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmICgibXNTYXZlT3JPcGVuQmxvYiIgaW4gbmF2aWdhdG9yKSByZXR1cm4gdm9pZCBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYih0aGlzLnJlc3BvbnNlLCBmaWxlbmFtZSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2JfdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLnJlc3BvbnNlKSwgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgICAgICAgICAgICBhLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIsIGEuaHJlZiA9IGJsb2JfdXJsLCBhLmRvd25sb2FkID0gZmlsZW5hbWUsIGEuY2xpY2soKSwgVVJMLnJldm9rZU9iamVjdFVSTChibG9iX3VybCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIG5lZWRfc2hvd19wcm9ncmVzcyA9ICEwLCB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICAgICAgaWYgKDQgIT0gdGhpcy5zdGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBsb2FkZWQgPSBldnQubG9hZGVkLCB0b3QgPSBldnQudG90YWw7CiAgICAgICAgICAgICAgICAgICAgIWZ1bmN0aW9uIHNob3dfcHJvZ3Jlc3MoX3JlZjUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gX3JlZjUudG90YWwsIGxvYWRlZCA9IF9yZWY1LmxvYWRlZCwgcGVyY2VudCA9IF9yZWY1LnBlcmNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRfc2hvd19wcm9ncmVzcyAmJiBtZXNzYWdlLl9wLmFsZXJ0KCLmlofku7blpKflsI/vvJoiLmNvbmNhdChNYXRoLmZsb29yKHRvdGFsIC8gMTA0ODU3NiksICJNQigiKS5jb25jYXQodG90YWwsICJCeXRlKTxici8+IikgKyAi5bey57uP5LiL6L2977yaIi5jb25jYXQoTWF0aC5mbG9vcihsb2FkZWQgLyAxMDQ4NTc2KSwgIk1CKCIpLmNvbmNhdChsb2FkZWQsICJCeXRlKTxici8+IikgKyAi5b2T5YmN6L+b5bqm77yaIi5jb25jYXQocGVyY2VudCwgIiU8YnIvPuS4i+i9veS4reivt+WLv+aTjeS9nOa1j+iniOWZqO+8jOWIt+aWsOaIluemu+W8gOmhtemdouS8muWvvOiHtOS4i+i9veWPlua2iO+8gTxici8+5YaN5qyh54K55Ye75LiL6L295oyJ6ZKu5Y+v5p+l55yL5LiL6L296L+b5bqm44CCIiksIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRfc2hvd19wcm9ncmVzcyA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICB9KSksIHRvdGFsID09PSBsb2FkZWQgJiYgKG1lc3NhZ2UuX3AuYWxlcnQoIuS4i+i9veWujOaIkO+8jOivt+etieW+hea1j+iniOWZqOS/neWtmO+8gSIpLCBkb3dubG9hZF9ibG9iX2NsaWNrZWQgPSAhMSk7CiAgICAgICAgICAgICAgICAgICAgfSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0b3QsCiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZDogbG9hZGVkLAogICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50OiBNYXRoLmZsb29yKDEwMCAqIGxvYWRlZCAvIHRvdCkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgeGhyLnNlbmQoKSwgZG93bmxvYWRfYmxvYl9jbGlja2VkID0gITAsIG1lc3NhZ2UudjAuaW5mbygi5YeG5aSH5byA5aeL5LiL6L29Iik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIF9kb3dubG9hZF9kYW5tYWt1X2FzcyhjaWQsIHRpdGxlKSB7CiAgICAgICAgICAgIHZhciByZXR1cm5fdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzJdID8gYXJndW1lbnRzWzJdIDogbnVsbCwgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1szXSA/IGFyZ3VtZW50c1szXSA6IG51bGw7CiAgICAgICAgICAgICgwLCBhamF4LmgpKHsKICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3YxL2RtL2xpc3Quc28/b2lkPSIuY29uY2F0KGNpZCksCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogInRleHQiCiAgICAgICAgICAgIH0pLnRoZW4oKGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdF9kb20gPSAkKHJlc3VsdC5yZXBsYWNlKC9bXHgwMC1ceDA4XHgwYi1ceDBjXHgwZS1ceDFmXHg3Zl0vZywgIiIpKTsKICAgICAgICAgICAgICAgIGlmICghcmVzdWx0X2RvbSB8fCAhcmVzdWx0X2RvbS5maW5kKCJkIilbMF0pIHJldHVybiAiY2FsbGJhY2siID09PSByZXR1cm5fdHlwZSAmJiBjYWxsYmFjayA/IHZvaWQgY2FsbGJhY2soKSA6IHZvaWQgbWVzc2FnZS52MC53YXJuaW5nKCLmnKrlj5HnjrDlvLnluZUiKTsKICAgICAgICAgICAgICAgIHZhciBfc3RlcDIsIGRhbm1ha3VfZGF0YSA9IHJlc3VsdF9kb20uZmluZCgiZCIpLm1hcCgoZnVuY3Rpb24oaSwgZWwpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9ICQoZWwpLCBwID0gaXRlbS5hdHRyKCJwIikuc3BsaXQoIiwiKSwgdHlwZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICI0IiA9PT0gcFsxXSA/IHR5cGUgPSAyIDogIjUiID09PSBwWzFdICYmICh0eXBlID0gMSksIFsgewogICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBwYXJzZUZsb2F0KHBbMF0pLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcGFyc2VJbnQocFszXSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGV4dCgpCiAgICAgICAgICAgICAgICAgICAgfSBdOwogICAgICAgICAgICAgICAgfSkpLmdldCgpLnNvcnQoKGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS50aW1lIC0gYi50aW1lOwogICAgICAgICAgICAgICAgfSkpLCBkaWFsb2d1ZSA9IGZ1bmN0aW9uIGRpYWxvZ3VlKGRhbm1ha3UsIHNjcm9sbF9pZCwgZml4X2lkKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBkYW5tYWt1LnRleHQsIHRpbWUgPSBkYW5tYWt1LnRpbWUsIGNvbW1hbmRzID0gWyAwID09PSBkYW5tYWt1LnR5cGUgPyBmdW5jdGlvbiBzY3JvbGxDb21tYW5kKHRvcCwgbGVmdF9hLCBsZWZ0X2IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJcXG1vdmUoIi5jb25jYXQobGVmdF9hLCAiLCIpLmNvbmNhdCh0b3AsICIsIikuY29uY2F0KGxlZnRfYiwgIiwiKS5jb25jYXQodG9wLCAiKSIpOwogICAgICAgICAgICAgICAgICAgIH0oNTAgKiAoMSArIE1hdGguZmxvb3IoMTUgKiBNYXRoLnJhbmRvbSgpKSksIDE5MjAgKyA1MCAqIGRhbm1ha3UudGV4dC5sZW5ndGggLyAyLCAwIC0gNTAgKiBkYW5tYWt1LnRleHQubGVuZ3RoIC8gMikgOiBmdW5jdGlvbiBmaXhDb21tYW5kKHRvcCwgbGVmdCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIlxccG9zKCIuY29uY2F0KGxlZnQsICIsIikuY29uY2F0KHRvcCwgIikiKTsKICAgICAgICAgICAgICAgICAgICB9KDUwICogKDEgKyBmaXhfaWQgJSAxNSksIDk2MCksIGZ1bmN0aW9uIGlzV2hpdGUoY29sb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE2Nzc3MjE1ID09PSBjb2xvcjsKICAgICAgICAgICAgICAgICAgICB9KGRhbm1ha3UuY29sb3IpID8gIiIgOiBmdW5jdGlvbiBjb2xvckNvbW1hbmQoY29sb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJcXGMmSCIuY29uY2F0KCgoMjU1ICYgY29sb3IpIDw8IDE2IHwgKGNvbG9yID4+IDggJiAyNTUpIDw8IDggfCBjb2xvciA+PiAxNiAmIDI1NSkudG9TdHJpbmcoMTYpLCAiJiIpOwogICAgICAgICAgICAgICAgICAgIH0oZGFubWFrdS5jb2xvcikgXSwgZm9ybWF0VGltZSA9IGZ1bmN0aW9uIGZvcm1hdFRpbWUoc2Vjb25kcykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZnVuY3Rpb24gZGl2KGksIGopIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGkgLyBqKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGFkID0gZnVuY3Rpb24gcGFkKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuIDwgMTAgPyAiMCIgKyBuIDogIiIgKyBuOwogICAgICAgICAgICAgICAgICAgICAgICB9LCBpbnRlZ2VyID0gTWF0aC5mbG9vcihzZWNvbmRzKSwgaG91ciA9IGRpdihpbnRlZ2VyLCAzNjAwKSwgbWludXRlID0gZGl2KGludGVnZXIsIDYwKSAlIDYwLCBzZWNvbmQgPSBpbnRlZ2VyICUgNjAsIG1pbm9yU2Vjb25kID0gTWF0aC5mbG9vcigxMDAgKiAoc2Vjb25kcyAtIGludGVnZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiLmNvbmNhdChob3VyLCAiOiIpLmNvbmNhdChwYWQobWludXRlKSwgIjoiKS5jb25jYXQocGFkKHNlY29uZCksICIuIikuY29uY2F0KG1pbm9yU2Vjb25kKTsKICAgICAgICAgICAgICAgICAgICB9LCBmaWVsZHMgPSBbIDAsIGZvcm1hdFRpbWUodGltZSksIGZvcm1hdFRpbWUodGltZSArICgwID09PSBkYW5tYWt1LnR5cGUgPyA4IDogNCkpLCAiTWVkaXVtIiwgIiIsICIwIiwgIjAiLCAiMCIsICIiLCAieyIgKyBjb21tYW5kcy5qb2luKCIiKSArICJ9IiArIGZ1bmN0aW9uIGVuY29kZSh0ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1x7L2csICLvvZsiKS5yZXBsYWNlKC9cfS9nLCAi772dIikucmVwbGFjZSgvXHJ8XG4vZywgIiIpOwogICAgICAgICAgICAgICAgICAgIH0odGV4dCkgXTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIkRpYWxvZ3VlOiAiICsgZmllbGRzLmpvaW4oIiwiKTsKICAgICAgICAgICAgICAgIH0sIGNvbnRlbnQgPSBbICJbU2NyaXB0IEluZm9dIiwgIjsgU2NyaXB0IGdlbmVyYXRlZCBieSBpbmphaG93L3VzZXIuanMiLCAiOyBodHRwczovL2dpdGh1Yi5jb20vaW5qYWhvdy91c2VyLmpzIiwgIlRpdGxlOiAiLmNvbmNhdCh0aXRsZSksICJTY3JpcHRUeXBlOiB2NC4wMCsiLCAiUGxheVJlc1g6ICIuY29uY2F0KDE5MjApLCAiUGxheVJlc1k6ICIuY29uY2F0KDEwODApLCAiVGltZXI6IDEwLjAwMDAiLCAiV3JhcFN0eWxlOiAyIiwgIlNjYWxlZEJvcmRlckFuZFNoYWRvdzogbm8iLCAiIiwgIltWNCsgU3R5bGVzXSIsICJGb3JtYXQ6IE5hbWUsIEZvbnRuYW1lLCBGb250c2l6ZSwgUHJpbWFyeUNvbG91ciwgU2Vjb25kYXJ5Q29sb3VyLCBPdXRsaW5lQ29sb3VyLCBCYWNrQ29sb3VyLCBCb2xkLCBJdGFsaWMsIFVuZGVybGluZSwgU3RyaWtlT3V0LCBTY2FsZVgsIFNjYWxlWSwgU3BhY2luZywgQW5nbGUsIEJvcmRlclN0eWxlLCBPdXRsaW5lLCBTaGFkb3csIEFsaWdubWVudCwgTWFyZ2luTCwgTWFyZ2luUiwgTWFyZ2luViwgRW5jb2RpbmciLCAiU3R5bGU6IFNtYWxsLOW+rui9r+mbhem7kSwzNiwmSDY2RkZGRkZGLCZINjZGRkZGRkYsJkg2NjAwMDAwMCwmSDY2MDAwMDAwLDAsMCwwLDAsMTAwLDEwMCwwLDAsMSwxLjIsMCw1LDAsMCwwLDAiLCAiU3R5bGU6IE1lZGl1bSzlvq7ova/pm4Xpu5EsNTIsJkg2NkZGRkZGRiwmSDY2RkZGRkZGLCZINjYwMDAwMDAsJkg2NjAwMDAwMCwwLDAsMCwwLDEwMCwxMDAsMCwwLDEsMS4yLDAsNSwwLDAsMCwwIiwgIlN0eWxlOiBMYXJnZSzlvq7ova/pm4Xpu5EsNjQsJkg2NkZGRkZGRiwmSDY2RkZGRkZGLCZINjYwMDAwMDAsJkg2NjAwMDAwMCwwLDAsMCwwLDEwMCwxMDAsMCwwLDEsMS4yLDAsNSwwLDAsMCwwIiwgIlN0eWxlOiBMYXJnZXIs5b6u6L2v6ZuF6buRLDcyLCZINjZGRkZGRkYsJkg2NkZGRkZGRiwmSDY2MDAwMDAwLCZINjYwMDAwMDAsMCwwLDAsMCwxMDAsMTAwLDAsMCwxLDEuMiwwLDUsMCwwLDAsMCIsICJTdHlsZTogRXh0cmFMYXJnZSzlvq7ova/pm4Xpu5EsOTAsJkg2NkZGRkZGRiwmSDY2RkZGRkZGLCZINjYwMDAwMDAsJkg2NjAwMDAwMCwwLDAsMCwwLDEwMCwxMDAsMCwwLDEsMS4yLDAsNSwwLDAsMCwwIiwgIiIsICJbRXZlbnRzXSIsICJGb3JtYXQ6IExheWVyLCBTdGFydCwgRW5kLCBTdHlsZSwgTmFtZSwgTWFyZ2luTCwgTWFyZ2luUiwgTWFyZ2luViwgRWZmZWN0LCBUZXh0IiBdLCBmaXhfaWQgPSAwLCBfaXRlcmF0b3IyID0gZG93bmxvYWRfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkYW5tYWt1X2RhdGEpOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhbm1ha3UgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IGRhbm1ha3UudHlwZSA/IDAgOiBmaXhfaWQrKywgY29udGVudC5wdXNoKGRpYWxvZ3VlKGRhbm1ha3UsIDAsIGZpeF9pZCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBkYXRhID0gY29udGVudC5qb2luKCJcbiIpOwogICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHJldHVybl90eXBlIHx8ICJmaWxlIiA9PT0gcmV0dXJuX3R5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYmxvYl91cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFsgZGF0YSBdLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0L2FzcyIKICAgICAgICAgICAgICAgICAgICB9KSksIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgICAgICAgICAgICAgICAgYS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCBhLmhyZWYgPSBibG9iX3VybCwgYS5kb3dubG9hZCA9IHRpdGxlICsgIi5hc3MiLCBhLmNsaWNrKCksIAogICAgICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoYmxvYl91cmwpOwogICAgICAgICAgICAgICAgfSBlbHNlICJjYWxsYmFjayIgPT09IHJldHVybl90eXBlICYmIGNhbGxiYWNrICYmIGNhbGxiYWNrKGRhdGEpOwogICAgICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgImNhbGxiYWNrIiA9PT0gcmV0dXJuX3R5cGUgJiYgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTsKICAgICAgICAgICAgfSkpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkb3dubG9hZF9kYW5tYWt1X2FzcyhjaWQsIHRpdGxlKSB7CiAgICAgICAgICAgIF9kb3dubG9hZF9kYW5tYWt1X2FzcyhjaWQsIHRpdGxlLCAiZmlsZSIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkb3dubG9hZF9zdWJ0aXRsZV92dHQoKSB7CiAgICAgICAgICAgIHZhciBwID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMF0gPyBhcmd1bWVudHNbMF0gOiAwLCBmaWxlX25hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMCwgZG93bmxvYWRfc3VidGl0bGUgPSBmdW5jdGlvbiBkb3dubG9hZF9zdWJ0aXRsZShibG9iX3VybCkgewogICAgICAgICAgICAgICAgaWYgKGJsb2JfdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoInRhcmdldCIsICJfYmxhbmsiKSwgYS5zZXRBdHRyaWJ1dGUoImhyZWYiLCBibG9iX3VybCksIGEuc2V0QXR0cmlidXRlKCJkb3dubG9hZCIsIGZpbGVfbmFtZSArICIudnR0IiksIAogICAgICAgICAgICAgICAgICAgIGEuY2xpY2soKSwgVVJMLnJldm9rZU9iamVjdFVSTChibG9iX3VybCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgbWVzc2FnZS52MC53YXJuaW5nKCLmnKrlj5HnjrDlrZfluZUiKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgYXBpLmdldF9zdWJ0aXRsZV91cmwocCwgZG93bmxvYWRfc3VidGl0bGUpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkb3dubG9hZF9ibG9iX3ppcChibG9iX2RhdGEsIGZpbGVuYW1lKSB7CiAgICAgICAgICAgIGlmIChibG9iX2RhdGEpIHsKICAgICAgICAgICAgICAgIHZhciBibG9iX3VybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYl9kYXRhKSwgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCJ0YXJnZXQiLCAiX2JsYW5rIiksIGEuc2V0QXR0cmlidXRlKCJocmVmIiwgYmxvYl91cmwpLCBhLnNldEF0dHJpYnV0ZSgiZG93bmxvYWQiLCBmaWxlbmFtZSArICIuemlwIiksIAogICAgICAgICAgICAgICAgYS5jbGljaygpLCBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2JfdXJsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkb3dubG9hZF9kYW5tYWt1X2Fzc196aXAodmlkZW9zLCB6aXApIHsKICAgICAgICAgICAgaWYgKHZpZGVvcykgewogICAgICAgICAgICAgICAgaWYgKDAgPT09IHZpZGVvcy5sZW5ndGgpIHJldHVybiAwID09PSBPYmplY3Qua2V5cyh6aXAuZmlsZXMpLmxlbmd0aCA/IHZvaWQgbWVzc2FnZS52MC53YXJuaW5nKCLmnKrlj5HnjrDlvLnluZUiKSA6IHZvaWQgemlwLmdlbmVyYXRlQXN5bmMoewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJibG9iIgogICAgICAgICAgICAgICAgfSkudGhlbigoZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkb3dubG9hZF9ibG9iX3ppcChkYXRhLCB2aWRlby5iYXNlKCkuZmlsZW5hbWUoKSArICJfYXNzIik7CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB2YXIgX3ZpZGVvcyRwb3AgPSB2aWRlb3MucG9wKCksIGNpZCA9IF92aWRlb3MkcG9wLmNpZCwgZmlsZW5hbWUgPSBfdmlkZW9zJHBvcC5maWxlbmFtZTsKICAgICAgICAgICAgICAgIF9kb3dubG9hZF9kYW5tYWt1X2FzcyhjaWQsIGZpbGVuYW1lLCAiY2FsbGJhY2siLCAoZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgIGRhdGEgJiYgemlwLmZpbGUoZmlsZW5hbWUgKyAiLmFzcyIsIGRhdGEpLCBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRfZGFubWFrdV9hc3NfemlwKHZpZGVvcywgemlwKTsKICAgICAgICAgICAgICAgICAgICB9KSwgMWUzKTsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBkb3dubG9hZF9zdWJ0aXRsZV92dHRfemlwKHZpZGVvcywgemlwKSB7CiAgICAgICAgICAgIGlmICh2aWRlb3MpIHsKICAgICAgICAgICAgICAgIGlmICgwID09PSB2aWRlb3MubGVuZ3RoKSByZXR1cm4gMCA9PT0gT2JqZWN0LmtleXMoemlwLmZpbGVzKS5sZW5ndGggPyB2b2lkIG1lc3NhZ2UudjAud2FybmluZygi5pyq5Y+R546w5a2X5bmVIikgOiB2b2lkIHppcC5nZW5lcmF0ZUFzeW5jKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmxvYiIKICAgICAgICAgICAgICAgIH0pLnRoZW4oKGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG93bmxvYWRfYmxvYl96aXAoZGF0YSwgdmlkZW8uYmFzZSgpLmZpbGVuYW1lKCkgKyAiX3Z0dCIpOwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgdmFyIF92aWRlb3MkcG9wMiA9IHZpZGVvcy5wb3AoKSwgcCA9IF92aWRlb3MkcG9wMi5wLCBmaWxlbmFtZSA9IF92aWRlb3MkcG9wMi5maWxlbmFtZTsKICAgICAgICAgICAgICAgIGFwaS5nZXRfc3VidGl0bGVfZGF0YShwLCAoZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgIGRhdGEgJiYgemlwLmZpbGUoZmlsZW5hbWUgKyAiLnZ0dCIsIGRhdGEpLCBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRfc3VidGl0bGVfdnR0X3ppcCh2aWRlb3MsIHppcCk7CiAgICAgICAgICAgICAgICAgICAgfSksIDFlMyk7CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZm9ybWF0KHVybCkgewogICAgICAgICAgICByZXR1cm4gdXJsID8gdXJsLm1hdGNoKCIubXA0fC5tNHMiKSA/ICIubXA0IiA6IHVybC5tYXRjaCgiLmZsdiIpID8gIi5mbHYiIDogIi5tcDQiIDogIiI7CiAgICAgICAgfQogICAgICAgIHZhciBEb3dubG9hZCA9IHsKICAgICAgICAgICAgdXJsX2Zvcm1hdDogZm9ybWF0LAogICAgICAgICAgICBkb3dubG9hZDogZnVuY3Rpb24gZG93bmxvYWQodXJsLCBmaWxlbmFtZSwgdHlwZSkgewogICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC9bXC9cXCp8XSsvZywgIi0iKS5yZXBsYWNlKC86L2csICLvvJoiKS5yZXBsYWNlKC9cPy9nLCAi77yfIikucmVwbGFjZSgvIi9nLCAiJyIpLnJlcGxhY2UoLzwvZywgIuOAiiIpLnJlcGxhY2UoLz4vZywgIuOAiyIpLCAKICAgICAgICAgICAgICAgICJibG9iIiA9PT0gdHlwZSA/IGRvd25sb2FkX2Jsb2IodXJsLCBmaWxlbmFtZSkgOiAicnBjIiA9PT0gdHlwZSAmJiBmdW5jdGlvbiBkb3dubG9hZF9ycGModXJsLCBmaWxlbmFtZSkgewogICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiAicG9zdCI7CiAgICAgICAgICAgICAgICAgICAgInBvc3QiID09PSB0eXBlID8gZG93bmxvYWRfcnBjX3Bvc3QoewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lCiAgICAgICAgICAgICAgICAgICAgfSkgOiAiYXJpYW5nIiA9PT0gdHlwZSAmJiBkb3dubG9hZF9ycGNfYXJpYW5nKHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSh1cmwsIGZpbGVuYW1lLCBycGNfdHlwZSgpKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZG93bmxvYWRfYWxsOiBmdW5jdGlvbiBkb3dubG9hZF9hbGwoKSB7CiAgICAgICAgICAgICAgICB2YXIgdmIgPSB2aWRlby5iYXNlKCksIF9yZWYgPSBbIHZpZGVvLmdldF9xdWFsaXR5KCkucSwgdmIudG90YWwoKSBdLCBxID0gX3JlZlswXSwgdG90YWwgPSBfcmVmWzFdOwogICAgICAgICAgICAgICAgJCgiYm9keSIpLm9uKCJjbGljayIsICdpbnB1dFtuYW1lPSJvcHRpb25fdmlkZW8iXScsIChmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldF9vcHRpb25faW5kZXgoZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBwYXJzZUludChlbGVtZW50LmlkLnNwbGl0KCJfIilbMV0pIHx8IDA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCI6Y2hlY2tlZCIpID8gJCh0aGlzKS5wYXJlbnQoKS5jc3MoImNvbG9yIiwgInJnYmEoMCwwLDAsMSkiKSA6ICQodGhpcykucGFyZW50KCkuY3NzKCJjb2xvciIsICJyZ2JhKDAsMCwwLDAuNSkiKSwgCiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY3RybEtleSB8fCBldmVudC5hbHRLZXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRfc2VsZWN0X29wdGlvbl9pbmRleCA9IGdldF9vcHRpb25faW5kZXgoZXZlbnQudGFyZ2V0KSwgb3B0aW9uX3ZpZGVvcyA9IF90b0NvbnN1bWFibGVBcnJheShkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgib3B0aW9uX3ZpZGVvIikpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIGZvciAodmFyIGkgPSBnZXRfb3B0aW9uX2luZGV4KG9wdGlvbl92aWRlb3MuZmlsdGVyKChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5jaGVja2VkICYmIGdldF9vcHRpb25faW5kZXgoZSkgPCBjdXJyZW50X3NlbGVjdF9vcHRpb25faW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5zbGljZSgtMSlbMF0pOyBpIDwgY3VycmVudF9zZWxlY3Rfb3B0aW9uX2luZGV4OyBpKyspIG9wdGlvbl92aWRlb3NbaV0uY2hlY2tlZCA9ICEwLCAKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uX3ZpZGVvc1tpXS5wYXJlbnROb2RlLnN0eWxlLmNvbG9yID0gInJnYmEoMCwwLDAsMSkiOyBlbHNlIGZvciAodmFyIF9pID0gZ2V0X29wdGlvbl9pbmRleChvcHRpb25fdmlkZW9zLmZpbHRlcigoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFlLmNoZWNrZWQgJiYgZ2V0X29wdGlvbl9pbmRleChlKSA8IGN1cnJlbnRfc2VsZWN0X29wdGlvbl9pbmRleDsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnNsaWNlKC0xKVswXSk7IF9pIDwgY3VycmVudF9zZWxlY3Rfb3B0aW9uX2luZGV4OyBfaSsrKSBvcHRpb25fdmlkZW9zW19pXS5jaGVja2VkID0gITEsIAogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25fdmlkZW9zW19pXS5wYXJlbnROb2RlLnN0eWxlLmNvbG9yID0gInJnYmEoMCwwLDAsMC41KSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgdmlkZW9faHRtbCA9ICIiLCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHZpZGVvX2h0bWwgKz0gIiIgKyAnPGxhYmVsIGZvcj0ib3B0aW9uXycuY29uY2F0KGksICciPjxkaXYgc3R5bGU9ImNvbG9yOnJnYmEoMCwwLDAsMC41KTsiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9Im9wdGlvbl8nKS5jb25jYXQoaSwgJyIgbmFtZT0ib3B0aW9uX3ZpZGVvIiB2YWx1ZT0iJykuY29uY2F0KGksICciPlxuICAgICAgICAgICAgICAgIFAnKS5jb25jYXQoaSArIDEsICIgIikuY29uY2F0KHZiLnRpdGxlKGkgKyAxKSwgIlxuICAgICAgICAgICAgPC9kaXY+PC9sYWJlbD48aHI+Iik7CiAgICAgICAgICAgICAgICB2YXIgYWxsX2NoZWNrZWQgPSAhMTsKICAgICAgICAgICAgICAgICQoImJvZHkiKS5vbigiY2xpY2siLCAiYnV0dG9uI2NoZWNrYm94X2J0biIsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBhbGxfY2hlY2tlZCA/IChhbGxfY2hlY2tlZCA9ICExLCAkKCdpbnB1dFtuYW1lPSJvcHRpb25fdmlkZW8iXScpLnByb3AoImNoZWNrZWQiLCBhbGxfY2hlY2tlZCksIAogICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W25hbWU9Im9wdGlvbl92aWRlbyJdJykucGFyZW50KCkuY3NzKCJjb2xvciIsICJyZ2JhKDAsMCwwLDAuNSkiKSkgOiAoYWxsX2NoZWNrZWQgPSAhMCwgCiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT0ib3B0aW9uX3ZpZGVvIl0nKS5wcm9wKCJjaGVja2VkIiwgYWxsX2NoZWNrZWQpLCAkKCdpbnB1dFtuYW1lPSJvcHRpb25fdmlkZW8iXScpLnBhcmVudCgpLmNzcygiY29sb3IiLCAicmdiKDAsMCwwKSIpKTsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHZhciBfc3RlcCwgb3B0aW9uX3N1cHBvcnRfaHRtbCA9ICIiLCBfaXRlcmF0b3IgPSBkb3dubG9hZF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHZpZGVvLmdldF9xdWFsaXR5X3N1cHBvcnQoKSk7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7ICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25fc3VwcG9ydF9odG1sICs9ICc8b3B0aW9uIHZhbHVlPSInLmNvbmNhdChpdGVtLCAnIj4nKS5jb25jYXQodmlkZW9RdWFsaXR5TWFwW2l0ZW1dLCAiPC9vcHRpb24+Iik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBtc2cgPSAiIiArICc8ZGl2IHN0eWxlPSJtYXJnaW46MiUgMDsiPlxuICAgICAgICAgICAgPGxhYmVsPuinhumikeagvOW8jzo8L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdCBpZD0iZGxfZm9ybWF0Ij5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJtcDQiIHNlbGVjdGVkPk1QNDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImZsdiI+RkxWPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iZGFzaCI+REFTSDwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAmbmJzcDsmbmJzcDvml6Dms5Xorr7nva5NUDTmuIXmmbDluqZcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbjoyJSAwOyI+XG4gICAgICAgICAgICA8bGFiZWw+6KeG6aKR6LSo6YePOjwvbGFiZWw+XG4gICAgICAgICAgICA8c2VsZWN0IGlkPSJkbF9xdWFsaXR5Ij5cbiAgICAgICAgICAgICAgICAnLmNvbmNhdChvcHRpb25fc3VwcG9ydF9odG1sLCAnXG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbjoyJSAwOyI+XG4gICAgICAgICAgICA8bGFiZWw+5LiL6L296YCJ5oupOjwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgc3R5bGU9ImNvbG9yOnJnYmEoMCwwLDAsMSk7Ij5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJkbF92aWRlbyIgbmFtZT0iZGxfb3B0aW9uIiBjaGVja2VkPSJjaGVja2VkIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkbF92aWRlbyI+6KeG6aKRPC9sYWJlbD5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgc3R5bGU9ImNvbG9yOnJnYmEoMCwwLDAsMC41KTsiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImRsX3N1YnRpdGxlIiBuYW1lPSJkbF9vcHRpb24iPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRsX3N1YnRpdGxlIj7lrZfluZU8L2xhYmVsPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbCBzdHlsZT0iY29sb3I6cmdiYSgwLDAsMCwwLjUpOyI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0iZGxfZGFubWFrdSIgbmFtZT0iZGxfb3B0aW9uIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkbF9kYW5tYWt1Ij7lvLnluZU8L2xhYmVsPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbjoyJSAwOyI+XG4gICAgICAgICAgICA8bGFiZWw+5L+d5a2Y55uu5b2VOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9ImRsX3JwY19kaXIiIHBsYWNlaG9sZGVyPSInKS5jb25jYXQoY29uZmlnX2NvbmZpZy5ycGNfZGlyIHx8ICLkuLrnqbrkvb/nlKjpu5jorqTnm67lvZUiLCAnIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Yj5cbiAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJjb2xvcjpyZWQ7Ij7kuLrpgb/lhY3or7fmsYLooqvmi6bmiKrvvIzorr7nva7kuoblu7bml7bkuJTkuI3mlK/mjIHkuIvovb3ml6Dms5Xmkq3mlL7nmoTop4bpopHvvJvor7fli7/popHnuYHkuIvovb3ov4flpJrop4bpopHvvIzlj6/og73op6blj5Hpo47mjqflr7zoh7TkuI3lj6/lho3kuIvovb3vvIE8L3NwYW4+XG4gICAgICAgIDwvYj48YnIgLz5cbiAgICAgICAgPGRpdiBzdHlsZT0iaGVpZ2h0OjI0MHB4O3dpZHRoOjEwMCU7b3ZlcmZsb3c6YXV0bztiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC4xKTsiPlxuICAgICAgICAgICAgJykuY29uY2F0KHZpZGVvX2h0bWwsICdcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbjoyJSAwOyI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPSJjaGVja2JveF9idG4iPuWFqOmAiTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj4nKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkX3ZpZGVvcyh2aWRlb190YXNrcywgaSwgdmlkZW9zKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvX3Rhc2tzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSB2aWRlb190YXNrcy5sZW5ndGgpIHJldHVybiBtZXNzYWdlLl9wLmFsZXJ0KCLop4bpopHlnLDlnYDor7fmsYLlrozmiJDvvIEiKSwgdm9pZCAoInBvc3QiID09PSBycGNfdHlwZSgpICYmIHZpZGVvcy5sZW5ndGggPiAwICYmIChkb3dubG9hZF9ycGNfcG9zdF9hbGwodmlkZW9zKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvcy5sZW5ndGggPSAwKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXNrID0gdmlkZW9fdGFza3NbaV0sIG1zZyA9ICLnrKwiLmNvbmNhdChpICsgMSwgIu+8iCIpLmNvbmNhdChpICsgMSwgIi8iKS5jb25jYXQodmlkZW9fdGFza3MubGVuZ3RoLCAi77yJ5Liq6KeG6aKRIik7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuX3AuYWxlcnQoIiIuY29uY2F0KG1zZywgIu+8muiOt+WPluS4rS4uLiIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmdldF91cmxzKHRhc2sucCwgdGFzay5xLCB0YXNrLmZvcm1hdCwgKGZ1bmN0aW9uIHN1Y2Nlc3MocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRfdmlkZW9zKHZpZGVvX3Rhc2tzLCArK2ksIHZpZGVvcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgNGUzKSwgIXJlcy5jb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52MC5zdWNjZXNzKCLor7fmsYLmiJDlip8iICsgKHJlcy50aW1lcyA/ICI8YnIvPuS7iuaXpeWJqeS9meivt+axguasoeaVsCIuY29uY2F0KHJlcy50aW1lcykgOiAiIikpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLl9wLmFsZXJ0KCIiLmNvbmNhdChtc2csICLvvJrojrflj5bmiJDlip/vvIEiKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYzID0gWyByZXMudXJsLCBycGNfdHlwZSgpLCByZXMudmlkZW8sIHJlcy5hdWRpbyBdLCB1cmwgPSBfcmVmM1swXSwgdHlwZSA9IF9yZWYzWzFdLCB2aWRlb191cmwgPSBfcmVmM1syXSwgYXVkaW9fdXJsID0gX3JlZjNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvc3QiID09PSB0eXBlID8gKCJkYXNoIiA9PT0gdGFzay5mb3JtYXQgPyB2aWRlb3MucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdmlkZW9fdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGFzay5maWxlbmFtZSArIGZvcm1hdCh2aWRlb191cmwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBycGNfZGlyOiB0YXNrLnJwY19kaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYXVkaW9fdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGFzay5maWxlbmFtZSArICIubTRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnBjX2RpcjogdGFzay5ycGNfZGlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiB2aWRlb3MucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGFzay5maWxlbmFtZSArIGZvcm1hdCh1cmwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBycGNfZGlyOiB0YXNrLnJwY19kaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgdmlkZW9zLmxlbmd0aCA+IDMgJiYgKGRvd25sb2FkX3JwY19wb3N0X2FsbCh2aWRlb3MpLCB2aWRlb3MubGVuZ3RoID0gMCkpIDogImFyaWFuZyIgPT09IHR5cGUgJiYgKCJkYXNoIiA9PT0gdGFzay5mb3JtYXQgPyBkb3dubG9hZF9ycGNfYXJpYW5nKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB2aWRlb191cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiB0YXNrLmZpbGVuYW1lICsgZm9ybWF0KHZpZGVvX3VybCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYXVkaW9fdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGFzay5maWxlbmFtZSArICIubTRhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogZG93bmxvYWRfcnBjX2FyaWFuZyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGFzay5maWxlbmFtZSArIGZvcm1hdCh1cmwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uIGVycm9yKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRfdmlkZW9zKHZpZGVvX3Rhc2tzLCArK2ksIHZpZGVvcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBtZXNzYWdlLl9wLmNvbmZpcm0obXNnLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3JlZjIgPSBbICQoIiNkbF92aWRlbyIpLmlzKCI6Y2hlY2tlZCIpLCAkKCIjZGxfc3VidGl0bGUiKS5pcygiOmNoZWNrZWQiKSwgJCgiI2RsX2Rhbm1ha3UiKS5pcygiOmNoZWNrZWQiKSwgJCgiI2RsX2Zvcm1hdCIpLnZhbCgpLCAkKCIjZGxfcXVhbGl0eSIpLnZhbCgpIHx8IHEsICQoIiNkbF9ycGNfZGlyIikudmFsKCkgXSwgZGxfdmlkZW8gPSBfcmVmMlswXSwgZGxfc3VidGl0bGUgPSBfcmVmMlsxXSwgZGxfZGFubWFrdSA9IF9yZWYyWzJdLCBkbF9mb3JtYXQgPSBfcmVmMlszXSwgZGxfcXVhbGl0eSA9IF9yZWYyWzRdLCBkbF9ycGNfZGlyID0gX3JlZjJbNV0sIHZpZGVvcyA9IFtdLCBfaTIgPSAwOyBfaTIgPCB0b3RhbDsgX2kyKyspIGlmICgkKCJpbnB1dCNvcHRpb25fIi5jb25jYXQoX2kyKSkuaXMoIjpjaGVja2VkIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBfaTIgKyAxOwogICAgICAgICAgICAgICAgICAgICAgICB2aWRlb3MucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQ6IHZiLmNpZChwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA6IHAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxOiBkbF9xdWFsaXR5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBkbF9mb3JtYXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdmIuZmlsZW5hbWUocCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBycGNfZGlyOiBkbF9ycGNfZGlyCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkbF92aWRlbyAmJiBkb3dubG9hZF92aWRlb3ModmlkZW9zLCAwLCBbXSksIGRsX3N1YnRpdGxlICYmICgxID09PSB2aWRlb3MubGVuZ3RoID8gZG93bmxvYWRfc3VidGl0bGVfdnR0KHZpZGVvc1swXS5wLCB2aWRlb3NbMF0uZmlsZW5hbWUpIDogZG93bmxvYWRfc3VidGl0bGVfdnR0X3ppcChbXS5jb25jYXQodmlkZW9zKSwgbmV3IHJ1bnRpbWVfbGliLiRjKSksIAogICAgICAgICAgICAgICAgICAgIGRsX2Rhbm1ha3UgJiYgKDEgPT09IHZpZGVvcy5sZW5ndGggPyBkb3dubG9hZF9kYW5tYWt1X2Fzcyh2aWRlb3NbMF0uY2lkLCB2aWRlb3NbMF0uZmlsZW5hbWUpIDogZG93bmxvYWRfZGFubWFrdV9hc3NfemlwKFtdLmNvbmNhdCh2aWRlb3MpLCBuZXcgcnVudGltZV9saWIuJGMpKTsKICAgICAgICAgICAgICAgIH0pKSwgJCgiI2RsX3F1YWxpdHkiKS52YWwocSksICQoImJvZHkiKS5vbigiY2xpY2siLCAnaW5wdXRbbmFtZT0iZGxfb3B0aW9uIl0nLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5pcygiOmNoZWNrZWQiKSA/ICQodGhpcykucGFyZW50KCkuY3NzKCJjb2xvciIsICJyZ2JhKDAsMCwwLDEpIikgOiAkKHRoaXMpLnBhcmVudCgpLmNzcygiY29sb3IiLCAicmdiYSgwLDAsMCwwLjUpIik7CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRvd25sb2FkX2Rhbm1ha3VfYXNzOiBkb3dubG9hZF9kYW5tYWt1X2FzcywKICAgICAgICAgICAgZG93bmxvYWRfc3VidGl0bGVfdnR0OiBkb3dubG9hZF9zdWJ0aXRsZV92dHQsCiAgICAgICAgICAgIG9wZW5fYXJpYW5nOiBvcGVuX2FyaWFuZwogICAgICAgIH0sIGNvbmZpZyA9ICc8ZGl2IGlkPSJicF9jb25maWciPiA8ZGl2IGNsYXNzPSJjb25maWctbWFyayI+PC9kaXY+IDxkaXYgY2xhc3M9ImNvbmZpZy1iZyI+IDxzcGFuIHN0eWxlPSJmb250LXNpemU6MjBweCI+IDxiPmJpbGliaWxp6KeG6aKR5LiL6L29IOWPguaVsOiuvue9rjwvYj4gPGI+IDxhIGhyZWY9ImphdmFzY3JpcHQ6OyIgaWQ9InJlc2V0X2NvbmZpZyI+IFvph43nva5dIDwvYT4gPGEgc3R5bGU9InRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUiIGhyZWY9ImphdmFzY3JpcHQ6OyIgaWQ9InNob3dfaGVscCI+Jmx0O+mAmuefpS/luK7liqkmZ3Q7PC9hPiA8L2I+IDwvc3Bhbj4gPGRpdiBzdHlsZT0ibWFyZ2luOjIlIDAiPiA8bGFiZWw+6K+35rGC5Zyw5Z2A77yaPC9sYWJlbD4gPGlucHV0IGlkPSJiYXNlX2FwaSIgc3R5bGU9IndpZHRoOjMwJSIvPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyA8bGFiZWw+6K+35rGC5pa55byP77yaPC9sYWJlbD4gPHNlbGVjdCBpZD0icmVxdWVzdF90eXBlIj4gPG9wdGlvbiB2YWx1ZT0iYXV0byI+6Ieq5Yqo5Yik5patPC9vcHRpb24+IDxvcHRpb24gdmFsdWU9ImxvY2FsIj7mnKzlnLDor7fmsYI8L29wdGlvbj4gPG9wdGlvbiB2YWx1ZT0icmVtb3RlIj7ov5znqIvor7fmsYI8L29wdGlvbj4gPC9zZWxlY3Q+PGJyLz4gPHNtYWxsPuazqOaEj++8muaZrumAmuS9v+eUqOivt+WLv+S/ruaUue+8m+m7mOiupOS9v+eUqOa3t+WQiOivt+axgjwvc21hbGw+IDwvZGl2PiA8ZGl2IHN0eWxlPSJtYXJnaW46MiUgMCI+IDxsYWJlbD7op4bpopHmoLzlvI/vvJo8L2xhYmVsPiA8c2VsZWN0IGlkPSJmb3JtYXQiPiA8b3B0aW9uIHZhbHVlPSJtcDQiPk1QNDwvb3B0aW9uPiA8b3B0aW9uIHZhbHVlPSJmbHYiPkZMVjwvb3B0aW9uPiA8b3B0aW9uIHZhbHVlPSJkYXNoIj5EQVNIPC9vcHRpb24+IDwvc2VsZWN0PiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyA8bGFiZWw+5YiH5o2iQ0RO77yaPC9sYWJlbD4gPHNlbGVjdCBpZD0iaG9zdF9rZXkiPiB7e2hvc3Rfa2V5X29wdGlvbnN9fSA8L3NlbGVjdD48YnIvPiA8c21hbGw+5rOo5oSP77ya5peg5rOV6YCJ5oupTVA05riF5pmw5bqm77yb5bu66K6u54m55q6K5Zyw5Yy65oiW5pKt5pS+5byC5bi45pe25YiH5o2i77yI6Ieq6KGM6YCJ5oup5ZCI6YCC57q/6Lev77yJPC9zbWFsbD4gPC9kaXY+IDxkaXYgc3R5bGU9Im1hcmdpbjoyJSAwIj4gPGxhYmVsPuS4i+i9veaWueW8j++8mjwvbGFiZWw+IDxzZWxlY3QgaWQ9ImRvd25sb2FkX3R5cGUiPiA8b3B0aW9uIHZhbHVlPSJhIj5VUkzpk77mjqU8L29wdGlvbj4gPG9wdGlvbiB2YWx1ZT0id2ViIj5XZWLmtY/op4jlmag8L29wdGlvbj4gPG9wdGlvbiB2YWx1ZT0iYmxvYiI+QmxvYuivt+axgjwvb3B0aW9uPiA8b3B0aW9uIHZhbHVlPSJycGMiPlJQQ+aOpeWPozwvb3B0aW9uPiA8b3B0aW9uIHZhbHVlPSJhcmlhIj5Bcmlh5ZG95LukPC9vcHRpb24+IDwvc2VsZWN0PiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyA8bGFiZWw+QXJpYU5n5Zyw5Z2A77yaPC9sYWJlbD4gPGlucHV0IGlkPSJhcmlhbmdfaG9zdCIgc3R5bGU9IndpZHRoOjMwJSIvPjxici8+IDxzbWFsbD7mj5DnpLrvvJrlu7rorq7kvb/nlKhSUEPor7fmsYLkuIvovb3vvJvpnZ5IVFRQU+aIlumdnuacrOWcsFJQQ+Wfn+WQjeS9v+eUqEFyaWFOZ+S4i+i9vTwvc21hbGw+IDwvZGl2PiA8ZGl2IHN0eWxlPSJtYXJnaW46MiUgMCI+IDxsYWJlbD5SUEPphY3nva7vvJpbIOWfn+WQjSA6IOerr+WPoyB8IOWvhumSpSB8IOS/neWtmOebruW9lSBdPC9sYWJlbD48YnIvPiA8aW5wdXQgaWQ9InJwY19kb21haW4iIHBsYWNlaG9sZGVyPSJ3czovLzE5Mi4xNjguMS4yIiBzdHlsZT0id2lkdGg6MjUlIi8+IDogPGlucHV0IGlkPSJycGNfcG9ydCIgcGxhY2Vob2xkZXI9IjY4MDAiIHN0eWxlPSJ3aWR0aDoxMCUiLz4gfCA8aW5wdXQgaWQ9InJwY190b2tlbiIgcGxhY2Vob2xkZXI9Iuacquiuvue9ruS4jeWhqyIgc3R5bGU9IndpZHRoOjE1JSIvPiB8IDxpbnB1dCBpZD0icnBjX2RpciIgcGxhY2Vob2xkZXI9IueVmeepuuS9v+eUqOm7mOiupOebruW9lSIgc3R5bGU9IndpZHRoOjIwJSIvPjxici8+IDxzbWFsbD7ms6jmhI/vvJpSUEPpu5jorqTkvb/nlKhNb3RyaXjvvIjpnIDopoHlronoo4Xlubbov5DooYzvvInkuIvovb3vvIzlhbbku5bova/ku7bor7fkv67mlLnlj4LmlbA8L3NtYWxsPiA8L2Rpdj4gPGRpdiBzdHlsZT0ibWFyZ2luOjIlIDAiPiA8bGFiZWw+QXJpYeWPguaVsO+8mjwvbGFiZWw+IDxsYWJlbD7mnIDlpKfov57mjqXmlbDvvJo8L2xhYmVsPiA8c2VsZWN0IGlkPSJhcmlhMmNfY29ubmVjdGlvbl9sZXZlbCI+IDxvcHRpb24gdmFsdWU9Im1pbiI+MTwvb3B0aW9uPiA8b3B0aW9uIHZhbHVlPSJtaWQiPjg8L29wdGlvbj4gPG9wdGlvbiB2YWx1ZT0ibWF4Ij4xNjwvb3B0aW9uPiA8L3NlbGVjdD4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsgPGxhYmVsPumZhOWKoOWPguaVsO+8mjwvbGFiZWw+IDxpbnB1dCBpZD0iYXJpYTJjX2FkZGl0aW9uX3BhcmFtZXRlcnMiIHBsYWNlaG9sZGVyPSLop4FBcmlhMmPmlofmoaMiIHN0eWxlPSJ3aWR0aDoyMCUiLz48YnIvPiA8c21hbGw+6K+05piO77ya55So5LqO6YWN572uQXJpYeWRveS7pOS4i+i9veaWueW8j+eahOWPguaVsDwvc21hbGw+IDwvZGl2PiA8ZGl2IHN0eWxlPSJtYXJnaW46MiUgMCI+IDxsYWJlbD7lvLrliLbmjaLmupDvvJo8L2xhYmVsPiA8c2VsZWN0IGlkPSJyZXBsYWNlX2ZvcmNlIj4gPG9wdGlvbiB2YWx1ZT0iMCI+5YWz6ZetPC9vcHRpb24+IDxvcHRpb24gdmFsdWU9IjEiPuW8gOWQrzwvb3B0aW9uPiA8L3NlbGVjdD4gJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IDxsYWJlbD7lvLnluZXpgJ/luqbvvJo8L2xhYmVsPiA8aW5wdXQgaWQ9ImRhbm1ha3Vfc3BlZWQiIHN0eWxlPSJ3aWR0aDo1JSIvPiBzICZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyA8bGFiZWw+5by55bmV5a2X5Y+377yaPC9sYWJlbD4gPGlucHV0IGlkPSJkYW5tYWt1X2ZvbnRzaXplIiBzdHlsZT0id2lkdGg6NSUiLz4gcHg8YnIvPiA8c21hbGw+6K+05piO77ya5L2/55So6K+35rGC5Yiw55qE6KeG6aKR5Zyw5Z2A5ZyoRFBsYXllcui/m+ihjOaSreaUvu+8m+W8ueW5lemAn+W6puS4uuW8ueW5lea7kei/h0RQbGF5ZXLnmoTml7bpl7Q8L3NtYWxsPiA8L2Rpdj4gPGRpdiBzdHlsZT0ibWFyZ2luOjIlIDAiPiA8bGFiZWw+6Ieq5Yqo5LiL6L2977yaPC9sYWJlbD4gPHNlbGVjdCBpZD0iYXV0b19kb3dubG9hZCI+IDxvcHRpb24gdmFsdWU9IjAiPuWFs+mXrTwvb3B0aW9uPiA8b3B0aW9uIHZhbHVlPSIxIj7lvIDlkK88L29wdGlvbj4gPC9zZWxlY3Q+ICZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyA8bGFiZWw+6KeG6aKR6LSo6YeP77yaPC9sYWJlbD4gPHNlbGVjdCBpZD0idmlkZW9fcXVhbGl0eSI+IHt7dmlkZW9fcXVhbGl0eV9vcHRpb25zfX0gPC9zZWxlY3Q+PGJyLz4gPHNtYWxsPuivtOaYju+8muivt+axguWcsOWdgOaIkOWKn+WQjuWwhuiHquWKqOeCueWHu+S4i+i9veinhumikeaMiemSrjwvc21hbGw+IDwvZGl2PiA8ZGl2IHN0eWxlPSJtYXJnaW46MiUgMCI+IDxsYWJlbD7mjojmnYPnirbmgIHvvJo8L2xhYmVsPiA8c2VsZWN0IGlkPSJhdXRoIiBkaXNhYmxlZD0iZGlzYWJsZWQiPiA8b3B0aW9uIHZhbHVlPSIwIj7mnKrmjojmnYM8L29wdGlvbj4gPG9wdGlvbiB2YWx1ZT0iMSI+5bey5o6I5p2DPC9vcHRpb24+IDwvc2VsZWN0PiA8YSBjbGFzcz0ic2V0dGluZy1jb250ZXh0IiBocmVmPSJqYXZhc2NyaXB0OjsiIGlkPSJzaG93X2xvZ2luIj7otKblj7fmjojmnYM8L2E+IDxhIGNsYXNzPSJzZXR0aW5nLWNvbnRleHQiIGhyZWY9ImphdmFzY3JpcHQ6OyIgaWQ9InNob3dfbG9nb3V0Ij7lj5bmtojmjojmnYM8L2E+IDxhIGNsYXNzPSJzZXR0aW5nLWNvbnRleHQiIGhyZWY9ImphdmFzY3JpcHQ6OyIgaWQ9InNob3dfbG9naW5fMiI+5omL5Yqo5o6I5p2DPC9hPiA8YSBjbGFzcz0ic2V0dGluZy1jb250ZXh0IiBocmVmPSJqYXZhc2NyaXB0OjsiIGlkPSJzaG93X2xvZ2luX2hlbHAiPui/meaYr+S7gOS5iO+8nzwvYT4gPC9kaXY+IDxici8+IDxkaXYgc3R5bGU9InRleHQtYWxpZ246cmlnaHQiPiA8YnV0dG9uIGNsYXNzPSJzZXR0aW5nLWJ1dHRvbiIgaWQ9InNhdmVfY29uZmlnIj7noa7lrpo8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8c3R5bGU+I2JwX2NvbmZpZ3tvcGFjaXR5OjA7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmZpeGVkO2luc2V0OjBweDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjEwMDAwfSNicF9jb25maWcgLmNvbmZpZy1iZ3twb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czoxMHB4O3BhZGRpbmc6MjBweDt0b3A6NTAlO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKTt3aWR0aDo2MDBweDt6LWluZGV4OjEwMDAxfSNicF9jb25maWcgLmNvbmZpZy1tYXJre3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNSk7ei1pbmRleDoxMDAwMH0jYnBfY29uZmlnIC5zZXR0aW5nLWJ1dHRvbnt3aWR0aDoxMjBweDtoZWlnaHQ6NDBweDtib3JkZXItd2lkdGg6MDtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kOiMxZTkwZmY7Y3Vyc29yOnBvaW50ZXI7b3V0bGluZTowO2NvbG9yOiNmZmY7Zm9udC1zaXplOjE3cHh9I2JwX2NvbmZpZyAuc2V0dGluZy1idXR0b246aG92ZXJ7YmFja2dyb3VuZDojNTlmfSNicF9jb25maWcgLnNldHRpbmctY29udGV4dHttYXJnaW46MCAxJTtjb2xvcjojMDBmfSNicF9jb25maWcgLnNldHRpbmctY29udGV4dDpob3Zlcntjb2xvcjpyZWR9PC9zdHlsZT4gPC9kaXY+ICcsIGNvbmZpZ19jb25maWcgPSB7CiAgICAgICAgICAgIGJhc2VfYXBpOiAiaHR0cHM6Ly9hcGkuaW5qYWhvdy5jbi9icGFyc2UvIiwKICAgICAgICAgICAgcmVxdWVzdF90eXBlOiAiYXV0byIsCiAgICAgICAgICAgIGZvcm1hdDogIm1wNCIsCiAgICAgICAgICAgIGhvc3Rfa2V5OiAiMCIsCiAgICAgICAgICAgIHJlcGxhY2VfZm9yY2U6ICIwIiwKICAgICAgICAgICAgYXV0aDogIjAiLAogICAgICAgICAgICBkb3dubG9hZF90eXBlOiAid2ViIiwKICAgICAgICAgICAgcnBjX2RvbWFpbjogImh0dHA6Ly9sb2NhbGhvc3QiLAogICAgICAgICAgICBycGNfcG9ydDogIjE2ODAwIiwKICAgICAgICAgICAgcnBjX3Rva2VuOiAiIiwKICAgICAgICAgICAgcnBjX2RpcjogIiIsCiAgICAgICAgICAgIGFyaWEyY19jb25uZWN0aW9uX2xldmVsOiAibWluIiwKICAgICAgICAgICAgYXJpYTJjX2FkZGl0aW9uX3BhcmFtZXRlcnM6ICIiLAogICAgICAgICAgICBhcmlhbmdfaG9zdDogImh0dHA6Ly9hcmlhbmcuaW5qYWhvdy5jb20vIiwKICAgICAgICAgICAgYXV0b19kb3dubG9hZDogIjAiLAogICAgICAgICAgICB2aWRlb19xdWFsaXR5OiAiMCIsCiAgICAgICAgICAgIGRhbm1ha3Vfc3BlZWQ6ICIxNSIsCiAgICAgICAgICAgIGRhbm1ha3VfZm9udHNpemU6ICIyMiIKICAgICAgICB9LCBkZWZhdWx0X2NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ19jb25maWcpLCBob3N0TWFwID0gewogICAgICAgICAgICBrczM6ICJ1cG9zLXN6LW1pcnJvcmtzMy5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAga3MzYjogInVwb3Mtc3otbWlycm9ya3MzYi5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAga3MzYzogInVwb3Mtc3otbWlycm9ya3MzYy5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAga3MzMjogInVwb3Mtc3otbWlycm9ya3MzMi5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAga29kbzogInVwb3Mtc3otbWlycm9ya29kby5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAga29kb2I6ICJ1cG9zLXN6LW1pcnJvcmtvZG9iLmJpbGl2aWRlby5jb20iLAogICAgICAgICAgICBjb3M6ICJ1cG9zLXN6LW1pcnJvcmNvcy5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAgY29zYjogInVwb3Mtc3otbWlycm9yY29zYi5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAgYm9zOiAidXBvcy1zei1taXJyb3Jib3MuYmlsaXZpZGVvLmNvbSIsCiAgICAgICAgICAgIHdjczogInVwb3Mtc3otbWlycm9yd2NzLmJpbGl2aWRlby5jb20iLAogICAgICAgICAgICB3Y3NiOiAidXBvcy1zei1taXJyb3J3Y3NiLmJpbGl2aWRlby5jb20iLAogICAgICAgICAgICBodzogInVwb3Mtc3otbWlycm9yaHcuYmlsaXZpZGVvLmNvbSIsCiAgICAgICAgICAgIGh3YjogInVwb3Mtc3otbWlycm9yaHdiLmJpbGl2aWRlby5jb20iLAogICAgICAgICAgICB1cGJkYTI6ICJ1cG9zLXN6LXVwY2RuYmRhMi5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAgdXB3czogInVwb3Mtc3otdXBjZG53cy5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAgdXB0eDogInVwb3Mtc3otdXBjZG50eC5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAgdXBodzogInVwb3Mtc3otdXBjZG5ody5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAganM6ICJ1cG9zLXRmLWFsbC1qcy5iaWxpdmlkZW8uY29tIiwKICAgICAgICAgICAgaGs6ICJjbi1oay1lcS1iY2FjaGUtMDEuYmlsaXZpZGVvLmNvbSIsCiAgICAgICAgICAgIGFrYW1haTogInVwb3MtaHotbWlycm9yYWthbS5ha2FtYWl6ZWQubmV0IgogICAgICAgIH0sIHZpZGVvUXVhbGl0eU1hcCA9IHsKICAgICAgICAgICAgMTI3OiAiOEsg6LaF6auY5riFIiwKICAgICAgICAgICAgMTIwOiAiNEsg6LaF5riFIiwKICAgICAgICAgICAgMTE2OiAiMTA4MFAgNjDluKciLAogICAgICAgICAgICAxMTI6ICIxMDgwUCDpq5jnoIHnjociLAogICAgICAgICAgICA4MDogIjEwODBQIOmrmOa4hSIsCiAgICAgICAgICAgIDc0OiAiNzIwUCA2MOW4pyIsCiAgICAgICAgICAgIDY0OiAiNzIwUCDpq5jmuIUiLAogICAgICAgICAgICA0ODogIjcyMFAg6auY5riFKE1QNCkiLAogICAgICAgICAgICAzMjogIjQ4MFAg5riF5pmwIiwKICAgICAgICAgICAgMTY6ICIzNjBQIOa1geeVhSIKICAgICAgICB9LCBoZWxwX2NsaWNrZWQgPSAhMSwgY29uZmlnX2Z1bmN0aW9ucyA9IHsKICAgICAgICAgICAgc2F2ZV9jb25maWc6IGZ1bmN0aW9uIHNhdmVfY29uZmlnKCkgewogICAgICAgICAgICAgICAgdmFyIG9sZF9jb25maWc7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIG9sZF9jb25maWcgPSBKU09OLnBhcnNlKHN0b3JlLmdldCgiY29uZmlnX3N0ciIpKSwgc3RvcmUuc2V0KCJjb25maWdfc3RyIiwgSlNPTi5zdHJpbmdpZnkoY29uZmlnX2NvbmZpZykpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgb2xkX2NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ19jb25maWcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gWyAiYmFzZV9hcGkiLCAiZm9ybWF0IiwgImF1dGgiLCAidmlkZW9fcXVhbGl0eSIgXTsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykgewogICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYXJyW19pXTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnX2NvbmZpZ1trZXldICE9PSBvbGRfY29uZmlnW2tleV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3ZpZGVvX2Rvd25sb2FkIikuaGlkZSgpLCAkKCIjdmlkZW9fZG93bmxvYWRfMiIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29uZmlnX2NvbmZpZy5ob3N0X2tleSAhPT0gb2xkX2NvbmZpZy5ob3N0X2tleSAmJiAoY2hlY2sucmVmcmVzaCgpLCAkKCIjdmlkZW9fdXJsIikuYXR0cigiaHJlZiIsICIjIiksIAogICAgICAgICAgICAgICAgJCgiI3ZpZGVvX3VybF8yIikuYXR0cigiaHJlZiIsICIjIikpLCBjb25maWdfY29uZmlnLnJwY19kb21haW4gIT09IG9sZF9jb25maWcucnBjX2RvbWFpbiAmJiAoY29uZmlnX2NvbmZpZy5ycGNfZG9tYWluLm1hdGNoKCJodHRwczovLyIpIHx8IGNvbmZpZ19jb25maWcucnBjX2RvbWFpbi5tYXRjaCgvKGxvY2FsaG9zdHwxMjdcLjBcLjBcLjEpLykgfHwgbWVzc2FnZS5fcC5hbGVydCgi5qOA5rWL5Yiw5b2T5YmNUlBD5LiN5pivbG9jYWxob3N05pys5Zyw5o6l5Y+j77yM5Y2z5bCG6Lez6L2s5YiwQXJpYU5n572R6aG15o6n5Yi25Y+w6aG16Z2i77yb6K+35p+l55yL5o6n5Yi25Y+wUlBD5o6l5Y+j5Y+C5pWw5piv5ZCm5q2j56Gu77yM56ys5LiA5qyh5Yqg6L295Y+v6IO96L6D5oWi6K+36ICQ5b+D562J5b6F77yb6YWN572u5aW95ZCO5Y2z5Y+v5L2/55So6ISa5pys6L+b6KGM6L+c56iL5LiL6L2977yM5L2/55So5pyf6Ze05LiN55So5YWz6ZetQXJpYU5n6aG16Z2i77yBIiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIERvd25sb2FkLm9wZW5fYXJpYW5nKHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBjb25maWdfY29uZmlnLnJwY19kb21haW4sCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IGNvbmZpZ19jb25maWcucnBjX3BvcnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBjb25maWdfY29uZmlnLnJwY190b2tlbgogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkpKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9hcnIyID0gWyAiZGFubWFrdV9zcGVlZCIsICJkYW5tYWt1X2ZvbnRzaXplIiBdOyBfaTIgPCBfYXJyMi5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9rZXkgPSBfYXJyMltfaTJdOwogICAgICAgICAgICAgICAgICAgIGlmIChjb25maWdfY29uZmlnW19rZXldICE9PSBvbGRfY29uZmlnW19rZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5kYW5tYWt1LmNvbmZpZygpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKCIjYnBfY29uZmlnIikuaGlkZSgpLCAkKCIjYnBfY29uZmlnIikuY3NzKCJvcGFjaXR5IiwgMCksIHVpX3Njcm9sbC5BLnNob3coKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVzZXRfY29uZmlnOiBmdW5jdGlvbiByZXNldF9jb25maWcoKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdF9jb25maWcpICJhdXRoIiAhPT0ga2V5ICYmIChjb25maWdfY29uZmlnW2tleV0gPSBkZWZhdWx0X2NvbmZpZ1trZXldLCAKICAgICAgICAgICAgICAgICQoIiMiLmNvbmNhdChrZXkpKS52YWwoZGVmYXVsdF9jb25maWdba2V5XSkpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzaG93X2hlbHA6IGZ1bmN0aW9uIHNob3dfaGVscCgpIHsKICAgICAgICAgICAgICAgIGhlbHBfY2xpY2tlZCA/IG1lc3NhZ2UudjAubWlhb3coKSA6IChoZWxwX2NsaWNrZWQgPSAhMCwgKDAsIGFqYXguaCkoewogICAgICAgICAgICAgICAgICAgIHVybDogIiIuY29uY2F0KGNvbmZpZ19jb25maWcuYmFzZV9hcGksICIvYXV0aC92Mi8/YWN0PWhlbHAiKSwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogInRleHQiCiAgICAgICAgICAgICAgICB9KS50aGVuKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICByZXMgPyBtZXNzYWdlLl9wLmFsZXJ0KHJlcykgOiBtZXNzYWdlLnYwLndhcm5pbmcoIuiOt+WPluWksei0pSIpOwogICAgICAgICAgICAgICAgfSkpLmZpbmFsbHkoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWxwX2NsaWNrZWQgPSAhMTsKICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNob3dfbG9naW46IGZ1bmN0aW9uIHNob3dfbG9naW4oKSB7CiAgICAgICAgICAgICAgICBhdXRoLmxvZ2luKCIxIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNob3dfbG9naW5fMjogZnVuY3Rpb24gc2hvd19sb2dpbl8yKCkgewogICAgICAgICAgICAgICAgYXV0aC5sb2dpbigiMCIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzaG93X2xvZ291dDogZnVuY3Rpb24gc2hvd19sb2dvdXQoKSB7CiAgICAgICAgICAgICAgICBhdXRoLmxvZ291dCgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzaG93X2xvZ2luX2hlbHA6IGZ1bmN0aW9uIHNob3dfbG9naW5faGVscCgpIHsKICAgICAgICAgICAgICAgIG1lc3NhZ2UuX3AuY29uZmlybSgi6L+b6KGM5o6I5p2D5LmL5ZCO5bCG6IO95Zyo6L+c56iL6K+35rGC5pe25Lqr5pyJ55So5oi36LSm5Y+35Y6f5pyJ55qE5p2D55uK77yM5L6L5aaC6IO95aSf6K+35rGC55So5oi35bey57uP5LuY6LS55oiW5om/5YyF55qE55Wq5Ymn77yM5piv5ZCm6ZyA6KaB5o6I5p2D77yfIiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGF1dGgubG9naW4oKTsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gYXV0aF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCAhMSwgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSAhMCwgCiAgICAgICAgICAgICAgICAidmFsdWUiIGluIGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3Iud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgQXV0aCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmdW5jdGlvbiBBdXRoKCkgewogICAgICAgICAgICAgICAgIWZ1bmN0aW9uIGF1dGhfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogICAgICAgICAgICAgICAgfSh0aGlzLCBBdXRoKSwgdGhpcy5hdXRoX2NsaWNrZWQgPSAhMSwgdGhpcy5hdXRoX3dpbmRvdyA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGF1dGhfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG9Qcm9wcyAmJiBhdXRoX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKSwgc3RhdGljUHJvcHMgJiYgYXV0aF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyksIAogICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCAicHJvdG90eXBlIiwgewogICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiAhMQogICAgICAgICAgICAgICAgfSksIENvbnN0cnVjdG9yOwogICAgICAgICAgICB9KEF1dGgsIFsgewogICAgICAgICAgICAgICAga2V5OiAiY2hlY2tMb2dpblN0YXR1cyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tMb2dpblN0YXR1cygpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLCBfcmVmID0gWyBzdG9yZS5nZXQoImF1dGhfaWQiKSwgc3RvcmUuZ2V0KCJhdXRoX3NlYyIpLCBzdG9yZS5nZXQoImFjY2Vzc19rZXkiKSwgc3RvcmUuZ2V0KCJhdXRoX3RpbWUiKSB8fCAwIF0sIGF1dGhfaWQgPSBfcmVmWzBdLCBhdXRoX3NlYyA9IF9yZWZbMV0sIGFjY2Vzc19rZXkgPSBfcmVmWzJdLCBhdXRoX3RpbWUgPSBfcmVmWzNdOwogICAgICAgICAgICAgICAgICAgIGFjY2Vzc19rZXkgJiYgKHVzZXIuaXNfbG9naW4gJiYgKGNvbmZpZ19jb25maWcuYmFzZV9hcGkgIT09IHN0b3JlLmdldCgicHJlX2Jhc2VfYXBpIikgfHwgRGF0ZS5ub3coKSAtIHBhcnNlSW50KGF1dGhfdGltZSkgPiA4NjRlNSkgJiYgKDAsIAogICAgICAgICAgICAgICAgICAgIGFqYXguaCkoewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICJodHRwczovL3Bhc3Nwb3J0LmJpbGliaWxpLmNvbS9hcGkvb2F1dGg/YWNjZXNzX2tleT0iLmNvbmNhdChhY2Nlc3Nfa2V5KSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNvZGUgPyAobWVzc2FnZS52MC5pbmZvKCLmjojmnYPlt7Lov4fmnJ/vvIzlh4blpIfph43mlrDmjojmnYMiKSwgX3RoaXMucmVMb2dpbigpKSA6IChzdG9yZS5zZXQoImF1dGhfdGltZSIsIERhdGUubm93KCkpLCAKICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGFqYXguaCkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAiIi5jb25jYXQoY29uZmlnX2NvbmZpZy5iYXNlX2FwaSwgIi9hdXRoL3YyLz9hY3Q9Y2hlY2smYXV0aF9pZD0iKS5jb25jYXQoYXV0aF9pZCwgIiZhdXRoX3NlYz0iKS5jb25jYXQoYXV0aF9zZWMsICImYWNjZXNzX2tleT0iKS5jb25jYXQoYWNjZXNzX2tleSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuY29kZSAmJiAobWVzc2FnZS52MC5pbmZvKCLmo4Dmn6XlpLHotKXvvIzlh4blpIfph43mlrDmjojmnYMiKSwgX3RoaXMucmVMb2dpbigpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTsKICAgICAgICAgICAgICAgICAgICB9KSksIHN0b3JlLnNldCgicHJlX2Jhc2VfYXBpIiwgY29uZmlnX2NvbmZpZy5iYXNlX2FwaSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJfbG9naW4iLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2dpbihyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoX2NsaWNrZWQgPyBtZXNzYWdlLnYwLm1pYW93KCkgOiAodGhpcy5hdXRoX2NsaWNrZWQgPSAhMCwgKDAsIGFqYXguaCkoewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICJodHRwczovL3Bhc3Nwb3J0LmJpbGliaWxpLmNvbS9sb2dpbi9hcHAvdGhpcmQ/YXBwa2V5PTI3ZWI1M2ZjOTA1OGY4YzMmYXBpPWh0dHBzJTNBJTJGJTJGd3d3Lm1jYmJzLm5ldCUyRnRlbXBsYXRlJTJGbWNiYnMlMkZpbWFnZSUyRnNwZWNpYWxfcGhvdG9fYmcucG5nJnNpZ249MDQyMjQ2NDZkMWZlYTAwNGU3OTYwNmQzYjAzOGM4NGEiLAogICAgICAgICAgICAgICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogITAKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICB9KS50aGVuKHJlc29sdmUpLmZpbmFsbHkoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmF1dGhfY2xpY2tlZCA9ICExOwogICAgICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImxvZ2luIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2dpbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYXV0byA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzBdID8gYXJndW1lbnRzWzBdIDogIjEiLCBkb19sb2dpbiA9ICIxIiA9PT0gYXV0byA/IHRoaXMubG9naW5BdXRvLmJpbmQodGhpcykgOiB0aGlzLmxvZ2luTWFudWFsLmJpbmQodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgc3RvcmUuZ2V0KCJhdXRoX2lkIikgPyBtZXNzYWdlLl9wLmNvbmZpcm0oIuWPkeeOsOaOiOadg+iusOW9le+8jOaYr+WQpumHjeaWsOaOiOadg++8nyIsIGRvX2xvZ2luKSA6IGRvX2xvZ2luKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogInJlTG9naW4iLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlTG9naW4oKSB7CiAgICAgICAgICAgICAgICAgICAgc3RvcmUuc2V0KCJhdXRoX2lkIiwgIiIpLCBzdG9yZS5zZXQoImF1dGhfc2VjIiwgIiIpLCBzdG9yZS5zZXQoImFjY2Vzc19rZXkiLCAiIiksIAogICAgICAgICAgICAgICAgICAgIHN0b3JlLnNldCgiYXV0aF90aW1lIiwgIjAiKSwgdGhpcy5sb2dpbkF1dG8oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAibG9naW5BdXRvIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2dpbkF1dG8oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9naW4oKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXMuZGF0YS5oYXNfbG9naW4gPyBfdGhpczMuYXV0aF93aW5kb3cgPSB3aW5kb3cub3BlbihyZXMuZGF0YS5jb25maXJtX3VyaSkgOiBtZXNzYWdlLl9wLmNvbmZpcm0oIuW/hemhu+eZu+W9lULnq5nmiY3og73mraPluLjmjojmnYPvvIzmmK/lkKbnmbvpmYbvvJ8iLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gImh0dHBzOi8vcGFzc3BvcnQuYmlsaWJpbGkuY29tL2xvZ2luIjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAibG9naW5NYW51YWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvZ2luTWFudWFsKCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2luKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLmhhc19sb2dpbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9ICIiICsgIuivt+eCueWHuzxiPjxhIGhyZWY9JyIuY29uY2F0KHJlcy5kYXRhLmNvbmZpcm1fdXJpLCAiJyB0YXJnZXQ9J19ibGFuayc+5o6I5p2D5Zyw5Z2APC9hPjwvYj5cbiAgICAgICAgICAgICAgICAgICAg5omT5byA5LiA5Liq5paw56qX5Y+j77yM5q2j5bi45oOF5Ya15paw56qX5Y+j5bqU6K+l5pi+56S65LiA5Liq5Zu+54mH77yM6K+35bCG6K+l56qX5Y+j5Zyw5Z2A5qCP55qEVVJM6ZO+5o6l5aSN5Yi25Yiw5b2T5YmN5paH5pys5qGG5LitPGJyLz5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSdhdXRoX3VybCcgc3R5bGU9J3dpZHRoOjEwMCU7JyB0eXBlPSd0ZXh0JyBhdXRvY29tcGxldGU9J29mZic+PGJyPueEtuWQjueCueWHu+ehruWumuWNs+WPryIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5fcC5hbGVydChtc2csIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXV0aF91cmwgPSAkKCIjYXV0aF91cmwiKS52YWwoKSwgX3JlZjIgPSBbIHN0b3JlLmdldCgiYXV0aF9pZCIpLCBzdG9yZS5nZXQoImF1dGhfc2VjIikgXSwgYXV0aF9pZCA9IF9yZWYyWzBdLCBhdXRoX3NlYyA9IF9yZWYyWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBhamF4LmgpKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBhdXRoX3VybC5yZXBsYWNlKCJodHRwczovL3d3dy5tY2Jicy5uZXQvdGVtcGxhdGUvbWNiYnMvaW1hZ2Uvc3BlY2lhbF9waG90b19iZy5wbmc/IiwgIiIuY29uY2F0KGNvbmZpZ19jb25maWcuYmFzZV9hcGksICIvYXV0aC92Mi8/YWN0PWxvZ2luJmF1dGhfaWQ9IikuY29uY2F0KGF1dGhfaWQsICImYXV0aF9zZWM9IikuY29uY2F0KGF1dGhfc2VjLCAiJiIpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNvZGUgPyBtZXNzYWdlLnYwLndhcm5pbmcoIuaOiOadg+Wksei0pSIpIDogKG1lc3NhZ2UudjAuc3VjY2Vzcygi5o6I5p2D5oiQ5YqfIiksIHJlcy5hdXRoX2lkICYmIHJlcy5hdXRoX3NlYyAmJiAoc3RvcmUuc2V0KCJhdXRoX2lkIiwgcmVzLmF1dGhfaWQpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuc2V0KCJhdXRoX3NlYyIsIHJlcy5hdXRoX3NlYykpLCBzdG9yZS5zZXQoImFjY2Vzc19rZXkiLCBuZXcgVVJMKGF1dGhfdXJsKS5zZWFyY2hQYXJhbXMuZ2V0KCJhY2Nlc3Nfa2V5IikpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuc2V0KCJhdXRoX3RpbWUiLCBEYXRlLm5vdygpKSwgJCgiI2F1dGgiKS52YWwoIjEiKSwgY29uZmlnX2NvbmZpZy5hdXRoID0gIjEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtZXNzYWdlLl9wLmNvbmZpcm0oIuW/hemhu+eZu+W9lULnq5nmiY3og73mraPluLjmjojmnYPvvIzmmK/lkKbnmbvpmYbvvJ8iLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gImh0dHBzOi8vcGFzc3BvcnQuYmlsaWJpbGkuY29tL2xvZ2luIjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAga2V5OiAibG9nb3V0IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2dvdXQoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3JlLmdldCgiYXV0aF9pZCIpKSBpZiAodGhpcy5hdXRoX2NsaWNrZWQpIG1lc3NhZ2UudjAubWlhb3coKTsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMyA9IFsgc3RvcmUuZ2V0KCJhdXRoX2lkIiksIHN0b3JlLmdldCgiYXV0aF9zZWMiKSBdLCBhdXRoX2lkID0gX3JlZjNbMF0sIGF1dGhfc2VjID0gX3JlZjNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBhamF4LmgpKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogIiIuY29uY2F0KGNvbmZpZ19jb25maWcuYmFzZV9hcGksICIvYXV0aC92Mi8/YWN0PWxvZ291dCZhdXRoX2lkPSIpLmNvbmNhdChhdXRoX2lkLCAiJmF1dGhfc2VjPSIpLmNvbmNhdChhdXRoX3NlYyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuY29kZSA/IG1lc3NhZ2UudjAud2FybmluZygi5Y+W5raI5aSx6LSlIikgOiAobWVzc2FnZS52MC5zdWNjZXNzKCLlj5bmtojmiJDlip8iKSwgc3RvcmUuc2V0KCJhdXRoX2lkIiwgIiIpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlLnNldCgiYXV0aF9zZWMiLCAiIiksIHN0b3JlLnNldCgiYXV0aF90aW1lIiwgIjAiKSwgc3RvcmUuc2V0KCJhY2Nlc3Nfa2V5IiwgIiIpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiNhdXRoIikudmFsKCIwIiksIGNvbmZpZ19jb25maWcuYXV0aCA9ICIwIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5maW5hbGx5KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQuYXV0aF9jbGlja2VkID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbWVzc2FnZS5fcC5hbGVydCgi5rKh5pyJ5Y+R546w5o6I5p2D6K6w5b2VIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGtleTogImluaXRBdXRoIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0QXV0aCgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpczsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgZS5kYXRhICYmICJiaWxpYmlsaS1wYXJzZS1sb2dpbi1jcmVkZW50aWFscyIgPT09IGUuZGF0YS5zcGxpdCgiOiIpWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuYXV0aF93aW5kb3cgJiYgIV90aGlzNS5hdXRoX3dpbmRvdy5jbG9zZWQgJiYgKF90aGlzNS5hdXRoX3dpbmRvdy5jbG9zZSgpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5hdXRoX3dpbmRvdyA9IG51bGwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IGUuZGF0YS5zcGxpdCgiOiAiKVsxXSwgX3JlZjQgPSBbIHN0b3JlLmdldCgiYXV0aF9pZCIpLCBzdG9yZS5nZXQoImF1dGhfc2VjIikgXSwgYXV0aF9pZCA9IF9yZWY0WzBdLCBhdXRoX3NlYyA9IF9yZWY0WzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGFqYXguaCkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLnJlcGxhY2UoImh0dHBzOi8vd3d3Lm1jYmJzLm5ldC90ZW1wbGF0ZS9tY2Jicy9pbWFnZS9zcGVjaWFsX3Bob3RvX2JnLnBuZz8iLCAiIi5jb25jYXQoY29uZmlnX2NvbmZpZy5iYXNlX2FwaSwgIi9hdXRoL3YyLz9hY3Q9bG9naW4mYXV0aF9pZD0iKS5jb25jYXQoYXV0aF9pZCwgIiZhdXRoX3NlYz0iKS5jb25jYXQoYXV0aF9zZWMsICImIikpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5jb2RlID8gbWVzc2FnZS52MC53YXJuaW5nKCLmjojmnYPlpLHotKUiKSA6IChtZXNzYWdlLnYwLnN1Y2Nlc3MoIuaOiOadg+aIkOWKnyIpLCByZXMuYXV0aF9pZCAmJiByZXMuYXV0aF9zZWMgJiYgKHN0b3JlLnNldCgiYXV0aF9pZCIsIHJlcy5hdXRoX2lkKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuc2V0KCJhdXRoX3NlYyIsIHJlcy5hdXRoX3NlYykpLCBzdG9yZS5zZXQoImFjY2Vzc19rZXkiLCBuZXcgVVJMKHVybCkuc2VhcmNoUGFyYW1zLmdldCgiYWNjZXNzX2tleSIpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuc2V0KCJhdXRoX3RpbWUiLCBEYXRlLm5vdygpKSwgJCgiI2F1dGgiKS52YWwoIjEiKSwgY29uZmlnX2NvbmZpZy5hdXRoID0gIjEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5maW5hbGx5KChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmF1dGhfY2xpY2tlZCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IF0pLCBBdXRoOwogICAgICAgIH0oKSwgYXV0aCA9IG5ldyBBdXRoLCBtb3JlX3N0eWxlID0gIjxzdHlsZT4ubW9yZXtmbG9hdDpyaWdodDtwYWRkaW5nOjFweDtjdXJzb3I6cG9pbnRlcjtjb2xvcjojNzU3NTc1O2ZvbnQtc2l6ZToxNnB4O3RyYW5zaXRpb246YWxsIC4zcztwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWFsaWduOmNlbnRlcn0ubW9yZTpob3ZlciAubW9yZS1vcHMtbGlzdHtkaXNwbGF5OmJsb2NrfS5tb3JlLW9wcy1saXN0e2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo4MHB4O2xlZnQ6LTE1cHg7ei1pbmRleDozMDt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjEwcHggMDtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZTVlOWVmO2JveC1zaGFkb3c6MCAycHggNHB4IDAgcmdiYSgwLDAsMCwuMTQpO2JvcmRlci1yYWRpdXM6MnB4O2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiMyMjJ9Lm1vcmUtb3BzLWxpc3QgbGl7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjM0cHg7bGluZS1oZWlnaHQ6MzRweDtjdXJzb3I6cG9pbnRlcjt0cmFuc2l0aW9uOmFsbCAuM3N9Lm1vcmUtb3BzLWxpc3QgbGk6aG92ZXJ7Y29sb3I6IzAwYTFkNjtiYWNrZ3JvdW5kOiNlN2U3ZTd9PC9zdHlsZT4gIiwgYnRuX2xpc3QgPSB7CiAgICAgICAgICAgIHNldHRpbmdfYnRuOiAi6ISa5pys6K6+572uIiwKICAgICAgICAgICAgYmlsaWJpbGlfcGFyc2U6ICLor7fmsYLlnLDlnYAiLAogICAgICAgICAgICB2aWRlb19kb3dubG9hZDogIuS4i+i9veinhumikSIsCiAgICAgICAgICAgIHZpZGVvX2Rvd25sb2FkXzI6ICLkuIvovb3pn7PpopEiLAogICAgICAgICAgICB2aWRlb19kb3dubG9hZF9hbGw6ICLmibnph4/kuIvovb0iLAogICAgICAgICAgICBtb3JlOiB7CiAgICAgICAgICAgICAgICBkb3dubG9hZF9kYW5tYWt1OiAi5LiL6L295by55bmVIiwKICAgICAgICAgICAgICAgIGRvd25sb2FkX3N1YnRpdGxlOiAi5LiL6L295a2X5bmVIgogICAgICAgICAgICB9CiAgICAgICAgfSwgZG93bmxvYWRfc3ZnID0gJzxzdmcgY2xhc3Mgd2lkdGg9IjI4IiBoZWlnaHQ9IjI4IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDMyIDMyIiB4bWw6c3BhY2U9InByZXNlcnZlIj5cbiAgICAgICAgPHBhdGggZmlsbD0iIzc1NzU3NSIgZD0iTTE2LjAxNSwwQzcuMTg2LDAsMC4wMyw3LjE1NywwLjAzLDE1Ljk4NSBTNy4xODYsMzEuOTcsMTYuMDE1LDMxLjk3UzMyLDI0LjgxNCwzMiwxNS45ODVTMjQuODQzLDAsMTYuMDE1LDB6Ii8+XG4gICAgICAgIDxwYXRoIHN0eWxlPSJmaWxsOiNGRkZGRkY7IiBkPSJNMTYuOTQyLDIzLjY0Mkg5LjEwOUM4LjQ5NiwyMy42NDIsOCwyNC4xNyw4LDI0LjgyMXYwQzgsMjUuNDcyLDguNDk2LDI2LDkuMTA5LDI2aDE0Ljc4MyBDMjQuNTA0LDI2LDI1LDI1LjQ3MiwyNSwyNC44MjF2MGMwLTAuNjUxLTAuNDk2LTEuMTc5LTEuMTA5LTEuMTc5SDE2Ljk0MnoiLz5cbiAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6I0ZGRkZGRjsiIGQ9Ik04Ljc5OCwxNi45OThsNi43MjksNi4zM2MwLjM5OCwwLjM3NSwxLjAyOSwwLjM3NSwxLjQyNywwbDYuNzI5LTYuMzMgYzAuNjY2LTAuNjI3LDAuMjEyLTEuNzI2LTAuNzE0LTEuNzI2aC0zLjM4MmMtMC41NjgsMC0xLjAyOC0wLjQ0OS0xLjAyOC0xLjAwM1Y4LjAwM0MxOC41Niw3LjQ0OSwxOC4wOTksNywxNy41MzIsN2gtMi41ODIgYy0wLjU2OCwwLTEuMDI4LDAuNDQ5LTEuMDI4LDEuMDAzdjYuMjY2YzAsMC41NTQtMC40NiwxLjAwMy0xLjAyOCwxLjAwM0g5LjUxMUM4LjU4NiwxNS4yNzMsOC4xMzIsMTYuMzcyLDguNzk4LDE2Ljk5OHoiLz5cbiAgICA8L3N2Zz4nLCBzdmdfbWFwID0gewogICAgICAgICAgICBzZXR0aW5nX2J0bjogJzxzdmcgY2xhc3Mgd2lkdGg9IjI4IiBoZWlnaHQ9IjI4IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDMyIDMyIiB4bWw6c3BhY2U9InByZXNlcnZlIj5cbiAgICAgICAgPHBhdGggZmlsbD0iIzc1NzU3NSIgc3R5bGU9InN0cm9rZS1taXRlcmxpbWl0OjEwOyIgZD0iTTE2LDI5LjVMMTYsMjkuNWMtMC44MjgsMC0xLjUtMC42NzItMS41LTEuNVY0YzAtMC44MjgsMC42NzItMS41LDEuNS0xLjVoMCBjMC44MjgsMCwxLjUsMC42NzIsMS41LDEuNXYyNEMxNy41LDI4LjgyOCwxNi44MjgsMjkuNSwxNiwyOS41eiIvPlxuICAgICAgICA8cGF0aCBmaWxsPSIjNzU3NTc1IiBzdHlsZT0ic3Ryb2tlLW1pdGVybGltaXQ6MTA7IiBkPSJNMjkuNSwxNkwyOS41LDE2YzAsMC44MjgtMC42NzIsMS41LTEuNSwxLjVINGMtMC44MjgsMC0xLjUtMC42NzItMS41LTEuNXYwIGMwLTAuODI4LDAuNjcyLTEuNSwxLjUtMS41aDI0QzI4LjgyOCwxNC41LDI5LjUsMTUuMTcyLDI5LjUsMTZ6Ii8+XG4gICAgPC9zdmc+JywKICAgICAgICAgICAgYmlsaWJpbGlfcGFyc2U6ICc8c3ZnIGNsYXNzIHdpZHRoPSIyOCIgaGVpZ2h0PSIyOCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCAzMiAzMiIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+XG4gICAgICAgIDxwYXRoIGZpbGw9IiM3NTc1NzUiIGQ9Ik0yOC4yODIsMTMuNTA4Yy0wLjYyMy02LjkzMi02LjYyNy0xMi4wMzYtMTMuNDEtMTEuMzk5QzguOTQ3LDIuNjY1LDQuMjU0LDcuNDY1LDMuNzE2LDEzLjUyMSBjMC43ODYsMC40MDQsMS4yODMsMS4yMjYsMS4yODQsMi4xMjZ2NC4xNTdjLTAuMDIzLDAuNTY1LTAuNDksMS4wMDQtMS4wNDMsMC45OGMtMC41MjEtMC4wMjItMC45MzgtMC40NDgtMC45NTktMC45OHYtNC4xNTcgYzAtMC4xODgtMC4xMTMtMC40NTItMC41MDgtMC40NTJzLTAuNDkyLDAuMjc1LTAuNDkyLDAuNDUydjguMTc2YzAsMi40NDYsMS45NCw0LjQyOCw0LjMzMyw0LjQyOGMwLDAsMCwwLDAsMGg3LjE5MSBjMC41NTItMS4zOTYsMi4xMDctMi4wNywzLjQ3My0xLjUwNXMyLjAyNSwyLjE1NCwxLjQ3MywzLjU0OWMtMC41NTIsMS4zOTYtMi4xMDcsMi4wNy0zLjQ3MywxLjUwNSBjLTAuNjctMC4yNzctMS4yMDItMC44Mi0xLjQ3My0xLjUwNWgtNy4xOWMtMy40OTcsMC02LjMzMi0yLjg5Ny02LjMzMy02LjQ3MWwwLDB2LTguMTc4YzAtMS4wNzcsMC43MDYtMi4wMiwxLjcyMy0yLjMwM0MyLjQyOSw1LjI4NSw5LjM5My0wLjY2MiwxNy4yNzgsMC4wNTljNi45NTIsMC42MzYsMTIuNDQ1LDYuMjk3LDEzLjAwOSwxMy40MDdjMS4wMzIsMC40MDQsMS43MTMsMS40MTYsMS43MTIsMi41NDV2NC4wODggYy0wLjAzOCwxLjUwNS0xLjI2MiwyLjY5NC0yLjczNSwyLjY1NmMtMS40Mi0wLjAzNy0yLjU2Mi0xLjIwNS0yLjU5OS0yLjY1NmwwLDB2LTQuMDg1QzI2LjY2NywxNC45MjQsMjcuMzAyLDEzLjkzOSwyOC4yODIsMTMuNTA4ek0xMS4zMzQsMTQuNjUzYy0xLjEwNSwwLTItMC45MTUtMi0yLjA0NHMwLjg5Ni0yLjA0NCwyLTIuMDQ0bDAsMGMxLjEwNSwwLDIsMC45MTUsMiwyLjA0NFMxMi40MzksMTQuNjUzLDExLjMzNCwxNC42NTN6IE0yMC42NjYsMTQuNjUzYy0xLjEwNSwwLTItMC45MTUtMi0yLjA0NHMwLjg5Ni0yLjA0NCwyLTIuMDQ0bDAsMGMxLjEwNSwwLDIsMC45MTUsMiwyLjA0NFMyMS43NzEsMTQuNjUzLDIwLjY2NiwxNC42NTN6IE0xMy42MjksMjEuODA1Yy0yLjE2NywwLTMuOTYyLTEuNjUzLTMuOTYyLTMuNzQ4YzAtMC41NjQsMC40NDgtMS4wMjIsMS0xLjAyMmMwLjU1MiwwLDEsMC40NTgsMSwxLjAyMiBjMCwwLjkxNiwwLjg1NiwxLjcwNCwxLjk2MiwxLjcwNGMwLjYxMiwwLjAxMiwxLjE5OC0wLjI1MywxLjYwMi0wLjcyM2MwLjM1Mi0wLjQzMywwLjk4Mi0wLjQ5MywxLjQwNi0wLjEzMiBjMCwwLDAuMDAxLDAuMDAxLDAuMDAxLDAuMDAxYzAuMDQ3LDAuMDM5LDAuMDksMC4wODMsMC4xMjgsMC4xMzFjMC40MDQsMC40NywwLjk5LDAuNzM0LDEuNjAyLDAuNzIzIGMxLjEwNiwwLDEuOTY0LTAuNzg4LDEuOTY0LTEuNzA0YzAtMC41NjQsMC40NDgtMS4wMjIsMS0xLjAyMmMwLjU1MiwwLDEsMC40NTgsMSwxLjAyMmMwLDIuMDk1LTEuNzk3LDMuNzQ4LTMuOTY0LDMuNzQ4IGMtMC44NDQsMC4wMDMtMS42Ny0wLjI1Ni0yLjM2OC0wLjc0MkMxNS4zMDIsMjEuNTUsMTQuNDc1LDIxLjgwOSwxMy42MjksMjEuODA1eiBNMjkuMzMyLDE1LjMzM2MtMC4zNjgsMC0wLjY2NiwwLjMwNS0wLjY2NiwwLjY4IHY0LjA4OGMtMC4wMDEsMC4zNzYsMC4yOTcsMC42ODEsMC42NjUsMC42ODFjMC4zNjgsMC4wMDEsMC42NjYtMC4zMDQsMC42NjYtMC42NzljMC0wLjAwMSwwLTAuMDAxLDAtMC4wMDJ2LTQuMDg4IGMwLjAwMi0wLjM3NC0wLjI5My0wLjY3OC0wLjY1OS0wLjY4Yy0wLjAwMSwwLTAuMDAyLDAtMC4wMDMsMEgyOS4zMzJ6Ii8+XG4gICAgPC9zdmc+JywKICAgICAgICAgICAgdmlkZW9fZG93bmxvYWQ6IGRvd25sb2FkX3N2ZywKICAgICAgICAgICAgdmlkZW9fZG93bmxvYWRfMjogZG93bmxvYWRfc3ZnLAogICAgICAgICAgICB2aWRlb19kb3dubG9hZF9hbGw6IGRvd25sb2FkX3N2ZwogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gbWFrZV90b29sYmFyX2Jhbmd1bWkobWFpbl9jbGFzc19uYW1lLCBzdWJfY2xhc3NfbmFtZXMpIHsKICAgICAgICAgICAgdmFyIHRvb2xiYXJfZWxlbWVudHMgPSBPYmplY3Qua2V5cyhidG5fbGlzdCkubWFwKChmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgICAgIGlmICgibW9yZSIgPT09IGtleSkgewogICAgICAgICAgICAgICAgICAgIHZhciBtb3JlX21hcCA9IGJ0bl9saXN0W2tleV07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiICsgJzxkaXYgY2xhc3M9Im1vcmUiPuabtOWkmjxkaXYgY2xhc3M9Im1vcmUtb3BzLWxpc3QiPlxuICAgICAgICAgICAgICAgICAgICA8dWw+Jy5jb25jYXQoT2JqZWN0LmtleXMobW9yZV9tYXApLm1hcCgoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBtb3JlX2VsZW1lbnQoaWQsIG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGxpPjxzcGFuIGlkPSInLmNvbmNhdChpZCwgJyI+JykuY29uY2F0KG5hbWUsICI8L3NwYW4+PC9saT4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgfShrZXksIG1vcmVfbWFwW2tleV0pOwogICAgICAgICAgICAgICAgICAgIH0pKS5qb2luKCIiKSwgIjwvdWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbGlzdF9lbGVtZW50KGlkLCBjbGFzc19uYW1lcywgc3ZnLCBuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiICsgJzxkaXYgaWQ9IicuY29uY2F0KGlkLCAnIiBtci1zaG93PSIiIGNsYXNzPSInKS5jb25jYXQoY2xhc3NfbmFtZXNbMF0sICciPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSInKS5jb25jYXQoY2xhc3NfbmFtZXNbMV0sICciPlxuICAgICAgICAgICAgICAgICAgICAnKS5jb25jYXQoc3ZnLCAnXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSInKS5jb25jYXQoY2xhc3NfbmFtZXNbMl0sICciPicpLmNvbmNhdChuYW1lLCAiPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+Iik7CiAgICAgICAgICAgICAgICB9KGtleSwgc3ViX2NsYXNzX25hbWVzLCBzdmdfbWFwW2tleV0sIGJ0bl9saXN0W2tleV0pOwogICAgICAgICAgICB9KSkuam9pbigiIik7CiAgICAgICAgICAgIHJldHVybiAiIiArICc8ZGl2IGNsYXNzPSInLmNvbmNhdChtYWluX2NsYXNzX25hbWUsICciPlxuICAgICAgICAgICAgJykuY29uY2F0KHRvb2xiYXJfZWxlbWVudHMsICJcbiAgICAgICAgICAgICIpLmNvbmNhdChtb3JlX3N0eWxlLCAiXG4gICAgICAgIDwvZGl2PiIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7CiAgICAgICAgICAgIH0oYXJyKSB8fCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgICAgICAgICAgICAgICB2YXIgX2kgPSBudWxsID09IGFyciA/IG51bGwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgU3ltYm9sICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFyclsiQEBpdGVyYXRvciJdOwogICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gX2kpIHJldHVybjsKICAgICAgICAgICAgICAgIHZhciBfcywgX2UsIF9hcnIgPSBbXSwgX24gPSAhMCwgX2QgPSAhMTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksICFpIHx8IF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCkgOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgX2QgPSAhMCwgX2UgPSBlcnI7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9uIHx8IG51bGwgPT0gX2kucmV0dXJuIHx8IF9pLnJldHVybigpOwogICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF9hcnI7CiAgICAgICAgICAgIH0oYXJyLCBpKSB8fCBmdW5jdGlvbiBtYWluX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgewogICAgICAgICAgICAgICAgaWYgKCFvKSByZXR1cm47CiAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIG8pIHJldHVybiBtYWluX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKICAgICAgICAgICAgICAgIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsKICAgICAgICAgICAgICAgICJPYmplY3QiID09PSBuICYmIG8uY29uc3RydWN0b3IgJiYgKG4gPSBvLmNvbnN0cnVjdG9yLm5hbWUpOwogICAgICAgICAgICAgICAgaWYgKCJNYXAiID09PSBuIHx8ICJTZXQiID09PSBuKSByZXR1cm4gQXJyYXkuZnJvbShvKTsKICAgICAgICAgICAgICAgIGlmICgiQXJndW1lbnRzIiA9PT0gbiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIG1haW5fYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOwogICAgICAgICAgICB9KGFyciwgaSkgfHwgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7CiAgICAgICAgICAgIH0oKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbWFpbl9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7CiAgICAgICAgICAgIChudWxsID09IGxlbiB8fCBsZW4gPiBhcnIubGVuZ3RoKSAmJiAobGVuID0gYXJyLmxlbmd0aCk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsKICAgICAgICAgICAgcmV0dXJuIGFycjI7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG1haW5fZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgITEsIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gITAsIAogICAgICAgICAgICAgICAgInZhbHVlIiBpbiBkZXNjcmlwdG9yICYmIChkZXNjcmlwdG9yLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIE1haW4gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZnVuY3Rpb24gTWFpbigpIHsKICAgICAgICAgICAgICAgICFmdW5jdGlvbiBtYWluX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogICAgICAgICAgICAgICAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICAgICAgICAgICAgICAgIH0odGhpcywgTWFpbiksIGNvbnNvbGUubG9nKCJcbiIuY29uY2F0KCIgJWMgYmlsaWJpbGktcGFyc2UtZG93bmxvYWQudXNlci5qcyB2IiwgIjIuNC42IiwgIiAiKS5jb25jYXQoIjY3NjRjY2IiLCAiICVjIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmphaG93L3VzZXIuanMgIiwgIlxuIiwgIlxuIiksICJjb2xvcjogI2ZhZGZhMzsgYmFja2dyb3VuZDogIzAzMDMwNzsgcGFkZGluZzo1cHggMDsiLCAiYmFja2dyb3VuZDogI2ZhZGZhMzsgcGFkZGluZzo1cHggMDsiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWFpbl9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm90b1Byb3BzICYmIG1haW5fZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpLCBzdGF0aWNQcm9wcyAmJiBtYWluX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKSwgCiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7CiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6ICExCiAgICAgICAgICAgICAgICB9KSwgQ29uc3RydWN0b3I7CiAgICAgICAgICAgIH0oTWFpbiwgWyB7CiAgICAgICAgICAgICAgICBrZXk6ICJpbml0IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkgewogICAgICAgICAgICAgICAgICAgICFmdW5jdGlvbiBpbml0VG9vbGJhcigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoIiNhcmNfdG9vbGJhcl9yZXBvcnQiKVswXSkgJCgiI2FyY190b29sYmFyX3JlcG9ydCIpLmFmdGVyKCc8ZGl2IGlkPSJhcmNfdG9vbGJhcl9yZXBvcnRfMiIgc3R5bGU9Im1hcmdpbi10b3A6MTZweCIgY2xhc3M9InZpZGVvLXRvb2xiYXIgcmVwb3J0LXdyYXAtbW9kdWxlIHJlcG9ydC1zY3JvbGwtbW9kdWxlIiBzY3JvbGxzaG93PSJ0cnVlIj4gPGRpdiBjbGFzcz0ib3BzIj4gPHNwYW4gaWQ9InNldHRpbmdfYnRuIj4gPGkgY2xhc3M9InZhbi1pY29uLWdlbmVyYWxfYWRkdG9fcyI+PC9pPuiEmuacrOiuvue9riA8L3NwYW4+IDxzcGFuIGlkPSJiaWxpYmlsaV9wYXJzZSI+IDxpIGNsYXNzPSJ2YW4taWNvbi1mbG9hdHdpbmRvd19jdXN0b21lIj48L2k+6K+35rGC5Zyw5Z2AIDwvc3Bhbj4gPHNwYW4gaWQ9InZpZGVvX2Rvd25sb2FkIiBzdHlsZT0iZGlzcGxheTpub25lIj4gPGkgY2xhc3M9InZhbi1pY29uLWRvd25sb2FkIj48L2k+5LiL6L296KeG6aKRIDwvc3Bhbj4gPHNwYW4gaWQ9InZpZGVvX2Rvd25sb2FkXzIiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPiA8aSBjbGFzcz0idmFuLWljb24tZG93bmxvYWQiPjwvaT7kuIvovb3pn7PpopEgPC9zcGFuPiA8c3BhbiBpZD0idmlkZW9fZG93bmxvYWRfYWxsIj4gPGkgY2xhc3M9InZhbi1pY29uLWRvd25sb2FkIj48L2k+5om56YeP5LiL6L29IDwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9Im1vcmUiPiA8aSBjbGFzcz0idmFuLWljb24tZ2VuZXJhbF9tb3JlYWN0aW9ucyI+PC9pPiA8ZGl2IGNsYXNzPSJtb3JlLW9wcy1saXN0Ij4gPHVsPiA8bGk+PHNwYW4gaWQ9ImRvd25sb2FkX2Rhbm1ha3UiPuS4i+i9veW8ueW5lTwvc3Bhbj48L2xpPiA8bGk+PHNwYW4gaWQ9ImRvd25sb2FkX3N1YnRpdGxlIj7kuIvovb3lrZfluZU8L3NwYW4+PC9saT4gPC91bD4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gJyk7IGVsc2UgaWYgKCQoIiN0b29sYmFyX21vZHVsZSIpWzBdKSAkKCIjdG9vbGJhcl9tb2R1bGUiKS5hZnRlcignPGRpdiBpZD0idG9vbGJhcl9tb2R1bGVfMiIgY2xhc3M9InRvb2wtYmFyIGNsZWFyZml4IHJlcG9ydC13cmFwLW1vZHVsZSByZXBvcnQtc2Nyb2xsLW1vZHVsZSBtZWRpYS1pbmZvIiBzY3JvbGxzaG93PSJ0cnVlIj4gPGRpdiBpZD0ic2V0dGluZ19idG4iIGNsYXNzPSJsaWtlLWluZm8iPiA8aSBjbGFzcz0iaWNvbmZvbnQgaWNvbi1hZGQiPjwvaT48c3Bhbj7ohJrmnKzorr7nva48L3NwYW4+IDwvZGl2PiA8ZGl2IGlkPSJiaWxpYmlsaV9wYXJzZSIgY2xhc3M9Imxpa2UtaW5mbyI+IDxpIGNsYXNzPSJpY29uZm9udCBpY29uLWN1c3RvbWVyLXNlcnYiPjwvaT48c3Bhbj7or7fmsYLlnLDlnYA8L3NwYW4+IDwvZGl2PiA8ZGl2IGlkPSJ2aWRlb19kb3dubG9hZCIgY2xhc3M9Imxpa2UtaW5mbyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+IDxpIGNsYXNzPSJpY29uZm9udCBpY29uLWRvd25sb2FkIj48L2k+PHNwYW4+5LiL6L296KeG6aKRPC9zcGFuPiA8L2Rpdj4gPGRpdiBpZD0idmlkZW9fZG93bmxvYWRfMiIgY2xhc3M9Imxpa2UtaW5mbyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+IDxpIGNsYXNzPSJpY29uZm9udCBpY29uLWRvd25sb2FkIj48L2k+PHNwYW4+5LiL6L296Z+z6aKRPC9zcGFuPiA8L2Rpdj4gPGRpdiBpZD0idmlkZW9fZG93bmxvYWRfYWxsIiBjbGFzcz0ibGlrZS1pbmZvIj4gPGkgY2xhc3M9Imljb25mb250IGljb24tZG93bmxvYWQiPjwvaT48c3Bhbj7mibnph4/kuIvovb08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPSJtb3JlIj7mm7TlpJo8ZGl2IGNsYXNzPSJtb3JlLW9wcy1saXN0Ij4gPHVsPiA8bGk+PHNwYW4gaWQ9ImRvd25sb2FkX2Rhbm1ha3UiPuS4i+i9veW8ueW5lTwvc3Bhbj48L2xpPiA8bGk+PHNwYW4gaWQ9ImRvd25sb2FkX3N1YnRpdGxlIj7kuIvovb3lrZfluZU8L3NwYW4+PC9saT4gPC91bD4gPC9kaXY+IDwvZGl2PiA8c3R5bGU+LnRvb2wtYmFyIC5tb3Jle2Zsb2F0OnJpZ2h0O2N1cnNvcjpwb2ludGVyO2NvbG9yOiM3NTc1NzU7Zm9udC1zaXplOjE2cHg7dHJhbnNpdGlvbjphbGwgLjNzO3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtYWxpZ246Y2VudGVyfS50b29sLWJhciAubW9yZTpob3ZlciAubW9yZS1vcHMtbGlzdHtkaXNwbGF5OmJsb2NrfS50b29sLWJhcjphZnRlcntkaXNwbGF5OmJsb2NrO2NvbnRlbnQ6IiI7Y2xlYXI6Ym90aH0ubW9yZS1vcHMtbGlzdHtkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6ODBweDtsZWZ0Oi02NXB4O3otaW5kZXg6MzA7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzoxMHB4IDA7YmFja2dyb3VuZDojZmZmO2JvcmRlcjoxcHggc29saWQgI2U1ZTllZjtib3gtc2hhZG93OjAgMnB4IDRweCAwIHJnYmEoMCwwLDAsLjE0KTtib3JkZXItcmFkaXVzOjJweDtmb250LXNpemU6MTRweDtjb2xvcjojMjIyfS5tb3JlLW9wcy1saXN0IGxpe3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDozNHB4O2xpbmUtaGVpZ2h0OjM0cHg7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjphbGwgLjNzfS5tb3JlLW9wcy1saXN0IGxpOmhvdmVye2NvbG9yOiMwMGExZDY7YmFja2dyb3VuZDojZTdlN2U3fTwvc3R5bGU+IDwvZGl2PiAnKTsgZWxzZSBpZiAoJCgiZGl2LnZpZGVvLXRvb2xiYXIiKVswXSkgJCgiZGl2LnZpZGVvLXRvb2xiYXIiKS5hZnRlcignPGRpdiBpZD0iYXJjX3Rvb2xiYXJfcmVwb3J0XzIiIHN0eWxlPSJtYXJnaW4tdG9wOjE2cHgiIGNsYXNzPSJ2aWRlby10b29sYmFyIHJlcG9ydC13cmFwLW1vZHVsZSByZXBvcnQtc2Nyb2xsLW1vZHVsZSIgc2Nyb2xsc2hvdz0idHJ1ZSI+IDxkaXYgY2xhc3M9Im9wcyI+IDxzcGFuIGlkPSJzZXR0aW5nX2J0biI+IDxpIGNsYXNzPSJ2YW4taWNvbi1nZW5lcmFsX2FkZHRvX3MiPjwvaT7ohJrmnKzorr7nva4gPC9zcGFuPiA8c3BhbiBpZD0iYmlsaWJpbGlfcGFyc2UiPiA8aSBjbGFzcz0idmFuLWljb24tZmxvYXR3aW5kb3dfY3VzdG9tZSI+PC9pPuivt+axguWcsOWdgCA8L3NwYW4+IDxzcGFuIGlkPSJ2aWRlb19kb3dubG9hZCIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+IDxpIGNsYXNzPSJ2YW4taWNvbi1kb3dubG9hZCI+PC9pPuS4i+i9veinhumikSA8L3NwYW4+IDxzcGFuIGlkPSJ2aWRlb19kb3dubG9hZF8yIiBzdHlsZT0iZGlzcGxheTpub25lIj4gPGkgY2xhc3M9InZhbi1pY29uLWRvd25sb2FkIj48L2k+5LiL6L296Z+z6aKRIDwvc3Bhbj4gPHNwYW4gaWQ9InZpZGVvX2Rvd25sb2FkX2FsbCI+IDxpIGNsYXNzPSJ2YW4taWNvbi1kb3dubG9hZCI+PC9pPuaJuemHj+S4i+i9vSA8L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPSJtb3JlIj4gPGkgY2xhc3M9InZhbi1pY29uLWdlbmVyYWxfbW9yZWFjdGlvbnMiPjwvaT4gPGRpdiBjbGFzcz0ibW9yZS1vcHMtbGlzdCI+IDx1bCBjbGFzcz0ibW9yZS1vcHMtbGlzdC1ib3giPiA8bGkgY2xhc3M9Im1vcmUtb3BzLWxpc3QtYm94LWxpIj4gPHNwYW4gaWQ9ImRvd25sb2FkX2Rhbm1ha3UiPuS4i+i9veW8ueW5lTwvc3Bhbj4gPC9saT4gPGxpIGNsYXNzPSJtb3JlLW9wcy1saXN0LWJveC1saSI+IDxzcGFuIGlkPSJkb3dubG9hZF9zdWJ0aXRsZSI+5LiL6L295a2X5bmVPC9zcGFuPiA8L2xpPiA8L3VsPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiAnKTsgZWxzZSBpZiAoJCgiI3BsYXlsaXN0VG9vbGJhciIpWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbGJhcl9vYmogPSAkKCIjcGxheWxpc3RUb29sYmFyIiksIHRvb2xiYXJfb2JqXzIgPSB0b29sYmFyX29iai5jbG9uZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhcl9vYmpfMi5hdHRyKCJpZCIsICJwbGF5bGlzdFRvb2xiYXJfMiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSB0b29sYmFyX29ial8yLmZpbmQoIi52aWRlby10b29sYmFyLWxlZnQiKSwgcmlnaHQgPSB0b29sYmFyX29ial8yLmZpbmQoIi52aWRlby10b29sYmFyLXJpZ2h0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LmNoaWxkcmVuKCkucmVtb3ZlKCksIHJpZ2h0LmNoaWxkcmVuKCkucmVtb3ZlKCksIE9iamVjdC5rZXlzKGJ0bl9saXN0KS5tYXAoKGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgibW9yZSIgIT09IGtleSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRvb2xiYXJfb2JqLmZpbmQoIi50b29sYmFyLWxlZnQtaXRlbS13cmFwIikuZXEoMCkuY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5hdHRyKCJpZCIsIGtleSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdmcgPSBzdmdfbWFwW2tleV0ucmVwbGFjZUFsbCgiIzc1NzU3NSIsICJjdXJyZW50Q29sb3IiKS5yZXBsYWNlKCJjbGFzcyIsICdjbGFzcz0iJy5jb25jYXQoaXRlbS5maW5kKCJzdmciKS5hdHRyKCJjbGFzcyIpLCAnIicpKSwgc3BhbiA9IGl0ZW0uZmluZCgic3BhbiIpLnRleHQoYnRuX2xpc3Rba2V5XSksIGl0ZW1fZGl2ID0gaXRlbS5maW5kKCJkaXYiKS5lcSgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbV9kaXYuYXR0cigidGl0bGUiLCBidG5fbGlzdFtrZXldKSwgaXRlbV9kaXYucmVtb3ZlQ2xhc3MoIm9uIiksIGl0ZW1fZGl2LmNoaWxkcmVuKCkucmVtb3ZlKCksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX2Rpdi5hcHBlbmQoc3ZnKS5hcHBlbmQoc3BhbiksIGxlZnQuYXBwZW5kKGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb3JlX21hcCA9IGJ0bl9saXN0W2tleV0sIGVsID0gIiIgKyAnPGRpdiBjbGFzcz0ibW9yZSI+5pu05aSaPGRpdiBjbGFzcz0ibW9yZS1vcHMtbGlzdCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+Jy5jb25jYXQoT2JqZWN0LmtleXMobW9yZV9tYXApLm1hcCgoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxsaT48c3BhbiBpZD0iJy5jb25jYXQoa2V5LCAnIj4nKS5jb25jYXQobW9yZV9tYXBba2V5XSwgIjwvc3Bhbj48L2xpPiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkuam9pbigiIiksICI8L3VsPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQuYXBwZW5kKGVsICsgbW9yZV9zdHlsZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCB0b29sYmFyX29iai5hZnRlcih0b29sYmFyX29ial8yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkKCIucGxheWVyLWxlZnQtY29tcG9uZW50cyIpWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3Rvb2xiYXJfb2JqID0gJCgiLnBsYXllci1sZWZ0LWNvbXBvbmVudHMiKS5jaGlsZHJlbigpLmVxKDApLCB0b29sYmFyX2NsYXNzID0gX3Rvb2xiYXJfb2JqLmF0dHIoImNsYXNzIiksIHNwYW5fY2xhc3MgPSBfdG9vbGJhcl9vYmouY2hpbGRyZW4oKS5lcSgwKS5hdHRyKCJjbGFzcyIpLCBzcGFuX2NsYXNzX3N2ZyA9IF90b29sYmFyX29iai5jaGlsZHJlbigpLmVxKDApLmNoaWxkcmVuKCkuZXEoMCkuYXR0cigiY2xhc3MiKSwgc3Bhbl9jbGFzc190ZXh0ID0gX3Rvb2xiYXJfb2JqLmNoaWxkcmVuKCkuZXEoMCkuY2hpbGRyZW4oKS5lcSgxKS5hdHRyKCJjbGFzcyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Rvb2xiYXJfb2JqLmFmdGVyKG1ha2VfdG9vbGJhcl9iYW5ndW1pKHRvb2xiYXJfY2xhc3MsIFsgc3Bhbl9jbGFzcywgc3Bhbl9jbGFzc19zdmcsIHNwYW5fY2xhc3NfdGV4dCBdKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJCgiLmVkdS1wbGF5LWxlZnQiKVswXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90b29sYmFyX29iajIgPSAkKCIuZWR1LXBsYXktbGVmdCIpLmNoaWxkcmVuKCkuZXEoMSksIF90b29sYmFyX2NsYXNzID0gX3Rvb2xiYXJfb2JqMi5hdHRyKCJjbGFzcyIpLCBfc3Bhbl9jbGFzcyA9IF90b29sYmFyX29iajIuY2hpbGRyZW4oKS5lcSgwKS5hdHRyKCJjbGFzcyIpLCBfc3Bhbl9jbGFzc19zdmcgPSBfdG9vbGJhcl9vYmoyLmNoaWxkcmVuKCkuZXEoMCkuY2hpbGRyZW4oKS5lcSgwKS5hdHRyKCJjbGFzcyIpLCBfc3Bhbl9jbGFzc190ZXh0ID0gX3Rvb2xiYXJfb2JqMi5jaGlsZHJlbigpLmVxKDApLmNoaWxkcmVuKCkuZXEoMSkuYXR0cigiY2xhc3MiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b29sYmFyX29iajIuYWZ0ZXIobWFrZV90b29sYmFyX2Jhbmd1bWkoX3Rvb2xiYXJfY2xhc3MsIFsgX3NwYW5fY2xhc3MsIF9zcGFuX2NsYXNzX3N2ZywgX3NwYW5fY2xhc3NfdGV4dCBdKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJvb3RfZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgICAgICAgICAgcm9vdF9kaXYuaWQgPSAiYnBfcm9vdCIsIGRvY3VtZW50LmJvZHkuYXBwZW5kKHJvb3RfZGl2KSwgZnVuY3Rpb24gaW5pdENvbmZpZyhlbCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9ICc8b3B0aW9uIHZhbHVlPSIwIj7lhbPpl608L29wdGlvbj4nOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIGhvc3RNYXApIG9wdGlvbnMgKz0gJzxvcHRpb24gdmFsdWU9IicuY29uY2F0KGssICciPicpLmNvbmNhdChob3N0TWFwW2tdLCAiPC9vcHRpb24+Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9rIGluIGNvbmZpZyA9IGNvbmZpZy5yZXBsYWNlKCJ7e2hvc3Rfa2V5X29wdGlvbnN9fSIsIG9wdGlvbnMpLCBvcHRpb25zID0gJzxvcHRpb24gdmFsdWU9IjAiPuS4juaSreaUvuWZqOebuOWQjDwvb3B0aW9uPicsIAogICAgICAgICAgICAgICAgICAgICAgICB2aWRlb1F1YWxpdHlNYXApIG9wdGlvbnMgKz0gJzxvcHRpb24gdmFsdWU9IicuY29uY2F0KF9rLCAnIj4nKS5jb25jYXQodmlkZW9RdWFsaXR5TWFwW19rXSwgIjwvb3B0aW9uPiIpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcucmVwbGFjZSgie3t2aWRlb19xdWFsaXR5X29wdGlvbnN9fSIsIG9wdGlvbnMpLCBlbCAmJiAkKGVsKVswXSA/ICQoZWwpLmFwcGVuZChjb25maWcpIDogJCgiYm9keSIpLmFwcGVuZChjb25maWcpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnX3N0ciA9IHN0b3JlLmdldCgiY29uZmlnX3N0ciIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnX3N0cikgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRfY29uZmlnID0gSlNPTi5wYXJzZShjb25maWdfc3RyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvbGRfY29uZmlnKSBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWdfY29uZmlnLCBrZXkpICYmIChjb25maWdfY29uZmlnW2tleV0gPSBvbGRfY29uZmlnW2tleV0pOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygi5Yid5aeL5YyW6ISa5pys6YWN572uIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnX2NvbmZpZy5hdXRoID0gc3RvcmUuZ2V0KCJhdXRoX2lkIikgPyAiMSIgOiAiMCIsIHN0b3JlLnNldCgiY29uZmlnX3N0ciIsIEpTT04uc3RyaW5naWZ5KGNvbmZpZ19jb25maWcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2tleTIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiYXV0aCIgPT09IF9rZXkyKSByZXR1cm4gImNvbnRpbnVlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiMiLmNvbmNhdChfa2V5MikpLm9uKCJpbnB1dCIsIChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnX2NvbmZpZ1tfa2V5Ml0gPSBlLmRlbGVnYXRlVGFyZ2V0LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5MiBpbiBjb25maWdfY29uZmlnKSBfbG9vcChfa2V5Mik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9rMiBpbiBjb25maWdfZnVuY3Rpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICQoIiMiLmNvbmNhdChfazIpKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgKGUub25jbGljayA9IGNvbmZpZ19mdW5jdGlvbnNbX2syXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2tleTMgaW4gY29uZmlnX2NvbmZpZykgJCgiIyIuY29uY2F0KF9rZXkzKSkudmFsKGNvbmZpZ19jb25maWdbX2tleTNdKTsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnBfYXJpYTJfd2luZG93ID0gd2luZG93LmJwX2FyaWEyX3dpbmRvdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJwX2FyaWEyX3dpbmRvdyAmJiAhYnBfYXJpYTJfd2luZG93LmNsb3NlZCAmJiBicF9hcmlhMl93aW5kb3cuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9KCIjIi5jb25jYXQocm9vdF9kaXYuaWQpKSwgKDAsIG1lc3NhZ2UuTjUpKCIjIi5jb25jYXQocm9vdF9kaXYuaWQpKSwgdXNlci5sYXp5SW5pdCgpLCAKICAgICAgICAgICAgICAgICAgICBhdXRoLmluaXRBdXRoKCksIGF1dGguY2hlY2tMb2dpblN0YXR1cygpLCBjaGVjay5yZWZyZXNoKCksICQoIiMiLmNvbmNhdChyb290X2Rpdi5pZCkpLmFwcGVuZCgnPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5ib290Y2RuLm5ldC9hamF4L2xpYnMvZHBsYXllci8xLjI1LjAvRFBsYXllci5taW4uY3NzIj4nKSwgCiAgICAgICAgICAgICAgICAgICAgJCgiIyIuY29uY2F0KHJvb3RfZGl2LmlkKSkuYXBwZW5kKCc8YSBpZD0idmlkZW9fdXJsIiBzdHlsZT0iZGlzcGxheTpub25lOyIgdGFyZ2V0PSJfYmxhbmsiIHJlZmVycmVycG9saWN5PSJvcmlnaW4iIGhyZWY9IiMiPjwvYT4nKSwgCiAgICAgICAgICAgICAgICAgICAgJCgiIyIuY29uY2F0KHJvb3RfZGl2LmlkKSkuYXBwZW5kKCc8YSBpZD0idmlkZW9fdXJsXzIiIHN0eWxlPSJkaXNwbGF5Om5vbmU7IiB0YXJnZXQ9Il9ibGFuayIgcmVmZXJyZXJwb2xpY3k9Im9yaWdpbiIgaHJlZj0iIyI+PC9hPicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBrZXk6ICJydW4iLAogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJ1bigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYXBpX3VybCwgYXBpX3VybF90ZW1wOwogICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdCgpOwogICAgICAgICAgICAgICAgICAgIHZhciBldnQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdfYnRuOiBmdW5jdGlvbiBzZXR0aW5nX2J0bigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB1c2VyLmxhenlJbml0KCEwKSwgY29uZmlnX2NvbmZpZykgJCgiIyIuY29uY2F0KGtleSkpLnZhbChjb25maWdfY29uZmlnW2tleV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI2JwX2NvbmZpZyIpLnNob3coKSwgJCgiI2JwX2NvbmZpZyIpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKSwgdWlfc2Nyb2xsLkEuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBiaWxpYmlsaV9wYXJzZTogZnVuY3Rpb24gYmlsaWJpbGlfcGFyc2UoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmxhenlJbml0KCEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YiA9IHZpZGVvLmJhc2UoKSwgX3JlZiA9IFsgdmIudHlwZSgpLCB2Yi5haWQoKSwgdmIucCgpLCB2Yi5jaWQoKSwgdmIuZXBpZCgpIF0sIHR5cGUgPSBfcmVmWzBdLCBhaWQgPSBfcmVmWzFdLCBwID0gX3JlZlsyXSwgY2lkID0gX3JlZlszXSwgZXBpZCA9IF9yZWZbNF0sIHEgPSB2aWRlby5nZXRfcXVhbGl0eSgpLnE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlfdXJsID0gIiIuY29uY2F0KGNvbmZpZ19jb25maWcuYmFzZV9hcGksICI/YXY9IikuY29uY2F0KGFpZCwgIiZwPSIpLmNvbmNhdChwLCAiJmNpZD0iKS5jb25jYXQoY2lkLCAiJmVwPSIpLmNvbmNhdChlcGlkLCAiJnE9IikuY29uY2F0KHEsICImdHlwZT0iKS5jb25jYXQodHlwZSwgIiZmb3JtYXQ9IikuY29uY2F0KGNvbmZpZ19jb25maWcuZm9ybWF0LCAiJm90eXBlPWpzb24mX2hvc3Q9IikuY29uY2F0KGNvbmZpZ19jb25maWcuaG9zdF9rZXksICImX3JlcT0iKS5jb25jYXQoY29uZmlnX2NvbmZpZy5yZXF1ZXN0X3R5cGUsICImX3E9IikuY29uY2F0KGNvbmZpZ19jb25maWcudmlkZW9fcXVhbGl0eSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBbIHN0b3JlLmdldCgiYXV0aF9pZCIpLCBzdG9yZS5nZXQoImF1dGhfc2VjIikgXSwgYXV0aF9pZCA9IF9yZWYyWzBdLCBhdXRoX3NlYyA9IF9yZWYyWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCIxIiA9PT0gY29uZmlnX2NvbmZpZy5hdXRoICYmIGF1dGhfaWQgJiYgYXV0aF9zZWMgJiYgKGFwaV91cmwgKz0gIiZhdXRoX2lkPSIuY29uY2F0KGF1dGhfaWQsICImYXV0aF9zZWM9IikuY29uY2F0KGF1dGhfc2VjKSksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpX3VybCAhPT0gYXBpX3VybF90ZW1wIHx8ICJsb2NhbCIgPT09IGNvbmZpZ19jb25maWcucmVxdWVzdF90eXBlKSAkKCIjdmlkZW9fdXJsIikuYXR0cigiaHJlZiIsICIjIiksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3ZpZGVvX3VybF8yIikuYXR0cigiaHJlZiIsICIjIiksIGFwaV91cmxfdGVtcCA9IGFwaV91cmwsIG1lc3NhZ2UudjAuaW5mbygi5byA5aeL6K+35rGCIiksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmdldF91cmwoKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMgJiYgIXJlcy5jb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdXJsLCBfdXJsXzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudjAuc3VjY2Vzcygi6K+35rGC5oiQ5YqfIiksIHJlcy50aW1lcyAmJiBtZXNzYWdlLnYwLmluZm8oIuWJqeS9meivt+axguasoeaVsO+8miIuY29uY2F0KHJlcy50aW1lcykpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnVybCkgX3VybCA9IHJlcy51cmwucmVwbGFjZSgiaHR0cDovLyIsICJodHRwczovLyIpLCBfdXJsXyA9ICIjIjsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcy52aWRlbyB8fCAhcmVzLmF1ZGlvKSByZXR1cm4gdm9pZCBtZXNzYWdlLnYwLndhcm5pbmcoIuaVsOaNrumUmeivryIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3VybCA9IHJlcy52aWRlby5yZXBsYWNlKCJodHRwOi8vIiwgImh0dHBzOi8vIiksIF91cmxfID0gcmVzLmF1ZGlvLnJlcGxhY2UoImh0dHA6Ly8iLCAiaHR0cHM6Ly8iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjdmlkZW9fdXJsIikuYXR0cigiaHJlZiIsIF91cmwpLCAkKCIjdmlkZW9fdXJsIikuYXR0cigiZG93bmxvYWQiLCB2Yi5maWxlbmFtZSgpICsgRG93bmxvYWQudXJsX2Zvcm1hdChfdXJsKSksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjdmlkZW9fZG93bmxvYWQiKS5zaG93KCksICIjIiAhPT0gX3VybF8gJiYgKCQoIiN2aWRlb191cmxfMiIpLmF0dHIoImhyZWYiLCBfdXJsXyksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjdmlkZW9fdXJsXzIiKS5hdHRyKCJkb3dubG9hZCIsIHZiLmZpbGVuYW1lKCkgKyAiX2F1ZGlvLm1wNCIpLCAkKCIjdmlkZW9fZG93bmxvYWRfMiIpLnNob3coKSksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodXNlci5uZWVkUmVwbGFjZSgpIHx8IHZiLmlzTGltaXRlZCgpIHx8ICIxIiA9PT0gY29uZmlnX2NvbmZpZy5yZXBsYWNlX2ZvcmNlKSAmJiBwbGF5ZXIucmVwbGFjZV9wbGF5ZXIoX3VybCwgX3VybF8pLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjEiID09PSBjb25maWdfY29uZmlnLmF1dG9fZG93bmxvYWQgJiYgJCgiI3ZpZGVvX2Rvd25sb2FkIikuY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudjAubWlhb3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJCgiI3ZpZGVvX3VybCIpLmF0dHIoImhyZWYiKSwgdXJsXzIgPSAkKCIjdmlkZW9fdXJsXzIiKS5hdHRyKCJocmVmIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICYmICIjIiAhPT0gdXJsICYmICgkKCIjdmlkZW9fZG93bmxvYWQiKS5zaG93KCksICJkYXNoIiA9PT0gY29uZmlnX2NvbmZpZy5mb3JtYXQgJiYgJCgiI3ZpZGVvX2Rvd25sb2FkXzIiKS5zaG93KCksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1c2VyLm5lZWRSZXBsYWNlKCkgfHwgdmIuaXNMaW1pdGVkKCkgfHwgIjEiID09PSBjb25maWdfY29uZmlnLnJlcGxhY2VfZm9yY2UpICYmICEkKCIjYnBfZHBsYXllciIpWzBdICYmIHBsYXllci5yZXBsYWNlX3BsYXllcih1cmwsIHVybF8yKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjEiID09PSBjb25maWdfY29uZmlnLmF1dG9fZG93bmxvYWQgJiYgJCgiI3ZpZGVvX2Rvd25sb2FkIikuY2xpY2soKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkX2Rhbm1ha3U6IGZ1bmN0aW9uIGRvd25sb2FkX2Rhbm1ha3UoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmIgPSB2aWRlby5iYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZC5kb3dubG9hZF9kYW5tYWt1X2Fzcyh2Yi5jaWQoKSwgdmIuZmlsZW5hbWUoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkX3N1YnRpdGxlOiBmdW5jdGlvbiBkb3dubG9hZF9zdWJ0aXRsZSgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkLmRvd25sb2FkX3N1YnRpdGxlX3Z0dCgwLCB2aWRlby5iYXNlKCkuZmlsZW5hbWUoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvX2Rvd25sb2FkX2FsbDogZnVuY3Rpb24gdmlkZW9fZG93bmxvYWRfYWxsKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5sYXp5SW5pdCghMCksIHN0b3JlLmdldCgiYXV0aF9pZCIpICYmIHN0b3JlLmdldCgiYXV0aF9zZWMiKSA/ICJycGMiID09PSBjb25maWdfY29uZmlnLmRvd25sb2FkX3R5cGUgPyBEb3dubG9hZC5kb3dubG9hZF9hbGwoKSA6IG1lc3NhZ2UuX3AuY29uZmlybSgi5LuF5pSv5oyB5L2/55SoUlBD5o6l5Y+j5om56YeP5LiL6L2977yM6K+356Gu5L+dUlBD546v5aKD5q2j5bi477yM5piv5ZCm57un57ut77yfIiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkLmRvd25sb2FkX2FsbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpIDogbWVzc2FnZS5fcC5jb25maXJtKCLmibnph4/kuIvovb3ku4XmlK/mjIHmjojmnYPnlKjmiLfkvb/nlKhSUEPmjqXlj6PkuIvovb3vvIzmmK/lkKbov5vooYzmjojmnYPvvJ8iLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5sb2dpbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB2aWRlb19kb3dubG9hZDogZnVuY3Rpb24gdmlkZW9fZG93bmxvYWQoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGNvbmZpZ19jb25maWcuZG93bmxvYWRfdHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgid2ViIiA9PT0gdHlwZSkgJCgiI3ZpZGVvX3VybCIpWzBdLmNsaWNrKCk7IGVsc2UgaWYgKCJhIiA9PT0gdHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMyA9IFsgJCgiI3ZpZGVvX3VybCIpLmF0dHIoImhyZWYiKSwgJCgiI3ZpZGVvX3VybF8yIikuYXR0cigiaHJlZiIpLCAkKCIjdmlkZW9fdXJsIikuYXR0cigiZG93bmxvYWQiKSwgJCgiI3ZpZGVvX3VybF8yIikuYXR0cigiZG93bmxvYWQiKSBdLCB2aWRlb191cmxfMiA9IF9yZWYzWzFdLCBmaWxlX25hbWUgPSBfcmVmM1syXSwgZmlsZV9uYW1lXzIgPSBfcmVmM1szXSwgbXNnID0gIuW7uuiuruS9v+eUqElETeOAgUZETeetiei9r+S7tuWuieijheWFtua1j+iniOWZqOaPkuS7tuWQju+8jOm8oOagh+WPs+mUrueCueWHu+mTvuaOpeS4i+i9vX48YnIvPjxici8+IiArICc8YSBocmVmPSInLmNvbmNhdChfcmVmM1swXSwgJyIgZG93bmxvYWQ9IicpLmNvbmNhdChmaWxlX25hbWUsICciIHRhcmdldD0iX2JsYW5rIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTsiPiZndOinhumikeWcsOWdgCZsdDwvYT48YnIvPjxici8+JykgKyAoImRhc2giID09PSBjb25maWdfY29uZmlnLmZvcm1hdCA/ICc8YSBocmVmPSInLmNvbmNhdCh2aWRlb191cmxfMiwgJyIgZG93bmxvYWQ9IicpLmNvbmNhdChmaWxlX25hbWVfMiwgJyIgdGFyZ2V0PSJfYmxhbmsiIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lOyI+Jmd06Z+z6aKR5Zyw5Z2AJmx0PC9hPicpIDogIiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuX3AuYWxlcnQobXNnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoImFyaWEiID09PSB0eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY0ID0gWyAkKCIjdmlkZW9fdXJsIikuYXR0cigiaHJlZiIpLCAkKCIjdmlkZW9fdXJsXzIiKS5hdHRyKCJocmVmIikgXSwgX3ZpZGVvX3VybCA9IF9yZWY0WzBdLCBfdmlkZW9fdXJsXyA9IF9yZWY0WzFdLCB2aWRlb190aXRsZSA9IHZpZGVvLmJhc2UoKS5maWxlbmFtZSgpLCBfZmlsZV9uYW1lID0gdmlkZW9fdGl0bGUgKyBEb3dubG9hZC51cmxfZm9ybWF0KF92aWRlb191cmwpLCBfZmlsZV9uYW1lXyA9IHZpZGVvX3RpdGxlICsgIi5tNGEiLCBhcmlhMmNfaGVhZGVyID0gJy0taGVhZGVyICJVc2VyLUFnZW50OiAnLmNvbmNhdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCwgJyIgLS1oZWFkZXIgIlJlZmVyZXI6ICcpLmNvbmNhdCh3aW5kb3cubG9jYXRpb24uaHJlZiwgJyInKSwgX3JlZjYgPSBfc2xpY2VkVG9BcnJheSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogWyAxLCA1IF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZDogWyAxNiwgOCBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IFsgMzIsIDE2IF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9W2NvbmZpZ19jb25maWcuYXJpYTJjX2Nvbm5lY3Rpb25fbGV2ZWxdIHx8IFsgMSwgNSBdLCAyKSwgdXJsX21heF9jb25uZWN0aW9uID0gX3JlZjZbMF0sIHNlcnZlcl9tYXhfY29ubmVjdGlvbiA9IF9yZWY2WzFdLCBhcmlhMmNfbWF4X2Nvbm5lY3Rpb25fcGFyYW1ldGVycyA9ICItLW1heC1jb25jdXJyZW50LWRvd25sb2FkcyAiLmNvbmNhdCh1cmxfbWF4X2Nvbm5lY3Rpb24sICIgLS1tYXgtY29ubmVjdGlvbi1wZXItc2VydmVyICIpLmNvbmNhdChzZXJ2ZXJfbWF4X2Nvbm5lY3Rpb24pLCBfbWFwID0gWyAnYXJpYTJjICInLmNvbmNhdChfdmlkZW9fdXJsLCAnIiAtLW91dCAiJykuY29uY2F0KF9maWxlX25hbWUsICciJyksICdhcmlhMmMgIicuY29uY2F0KF92aWRlb191cmxfLCAnIiAtLW91dCAiJykuY29uY2F0KF9maWxlX25hbWVfLCAnIicpIF0ubWFwKChmdW5jdGlvbihjb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiIi5jb25jYXQoY29kZSwgIiAiKS5jb25jYXQoYXJpYTJjX2hlYWRlciwgIiAiKS5jb25jYXQoYXJpYTJjX21heF9jb25uZWN0aW9uX3BhcmFtZXRlcnMsICIgIikuY29uY2F0KGNvbmZpZ19jb25maWcuYXJpYTJjX2FkZGl0aW9uX3BhcmFtZXRlcnMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgX21hcDIgPSBfc2xpY2VkVG9BcnJheShfbWFwLCAyKSwgY29kZSA9IF9tYXAyWzBdLCBjb2RlXzIgPSBfbWFwMlsxXSwgX21zZyA9ICLngrnlh7vmlofmnKzmoYbljbPlj6/lpI3liLbkuIvovb3lkb3ku6TvvIE8YnIvPjxici8+IiArICfop4bpopHvvJo8YnIvPjxpbnB1dCBpZD0iYXJpYTJfY29kZSIgdmFsdWU9XCcnLmNvbmNhdChjb2RlLCAnXCcgb25jbGljaz0iYnBfY2xpcF9idG4oXCdhcmlhMl9jb2RlXCcpIiBzdHlsZT0id2lkdGg6MTAwJTsiPjwvYnI+PC9icj4nKSArICgiZGFzaCIgPT09IGNvbmZpZ19jb25maWcuZm9ybWF0ID8gJ+mfs+mike+8mjxici8+PGlucHV0IGlkPSJhcmlhMl9jb2RlXzIiIHZhbHVlPVwnJy5jb25jYXQoY29kZV8yLCAnXCcgb25jbGljaz0iYnBfY2xpcF9idG4oXCdhcmlhMl9jb2RlXzJcJykiIHN0eWxlPSJ3aWR0aDoxMDAlOyI+PGJyLz48YnIvPicpICsgJ+WFqOmDqO+8mjxici8+PHRleHRhcmVhIGlkPSJhcmlhMl9jb2RlX2FsbCIgb25jbGljaz0iYnBfY2xpcF9idG4oXCdhcmlhMl9jb2RlX2FsbFwnKSIgc3R5bGU9Im1pbi13aWR0aDoxMDAlO21heC13aWR0aDoxMDAlO21pbi1oZWlnaHQ6MTAwcHg7bWF4LWhlaWdodDoxMDBweDsiPicuY29uY2F0KGNvZGUsICJcbiIpLmNvbmNhdChjb2RlXzIsICI8L3RleHRhcmVhPiIpIDogIiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF3aW5kb3cuYnBfY2xpcF9idG4gJiYgKHdpbmRvdy5icF9jbGlwX2J0biA9IGZ1bmN0aW9uKGlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiMiLmNvbmNhdChpZCkpLnNlbGVjdCgpLCBkb2N1bWVudC5leGVjQ29tbWFuZCgiY29weSIpID8gbWVzc2FnZS52MC5zdWNjZXNzKCLlpI3liLbmiJDlip8iKSA6IG1lc3NhZ2UudjAud2FybmluZygi5aSN5Yi25aSx6LSlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIG1lc3NhZ2UuX3AuYWxlcnQoX21zZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAkKCIjdmlkZW9fdXJsIikuYXR0cigiaHJlZiIpLCBmaWxlbmFtZSA9IHZpZGVvLmJhc2UoKS5maWxlbmFtZSgpICsgRG93bmxvYWQudXJsX2Zvcm1hdCh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkLmRvd25sb2FkKHVybCwgZmlsZW5hbWUsIHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB2aWRlb19kb3dubG9hZF8yOiBmdW5jdGlvbiB2aWRlb19kb3dubG9hZF8yKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBjb25maWdfY29uZmlnLmRvd25sb2FkX3R5cGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIndlYiIgPT09IHR5cGUpICQoIiN2aWRlb191cmxfMiIpWzBdLmNsaWNrKCk7IGVsc2UgaWYgKCJhIiA9PT0gdHlwZSkgJCgiI3ZpZGVvX2Rvd25sb2FkIikuY2xpY2soKTsgZWxzZSBpZiAoImFyaWEiID09PSB0eXBlKSAkKCIjdmlkZW9fZG93bmxvYWQiKS5jbGljaygpOyBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJCgiI3ZpZGVvX3VybF8yIikuYXR0cigiaHJlZiIpLCBmaWxlbmFtZSA9IHZpZGVvLmJhc2UoKS5maWxlbmFtZSgpICsgIi5tNGEiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkLmRvd25sb2FkKHVybCwgZmlsZW5hbWUsIHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYnBkID0gZXZ0LCBPYmplY3QuZW50cmllcyhldnQpLmZvckVhY2goKGZ1bmN0aW9uKF9yZWY3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmOCA9IF9zbGljZWRUb0FycmF5KF9yZWY3LCAyKSwgayA9IF9yZWY4WzBdLCB2ID0gX3JlZjhbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCJib2R5Iikub24oImNsaWNrIiwgIiMiLmNvbmNhdChrKSwgdik7CiAgICAgICAgICAgICAgICAgICAgfSkpLCAkKCJib2R5Iikub24oImNsaWNrIiwgImEucm91dGVyLWxpbmstYWN0aXZlIiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzICE9PSAkKCdsaVtjbGFzcz0ib24iXScpLmZpbmQoImEiKVswXSAmJiBjaGVjay5yZWZyZXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfSkpLCAkKCJib2R5Iikub24oImNsaWNrIiwgImxpLmVwLWl0ZW0iLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9KSksICQoImJvZHkiKS5vbigiY2xpY2siLCAiYnV0dG9uLmJpbGliaWxpLXBsYXllci1pY29uZm9udC1uZXh0IiwgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBjaGVjay5yZWZyZXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIHZhciBiaWxpX3ZpZGVvX3RhZyA9IHBsYXllci5iaWxpX3ZpZGVvX3RhZygpOwogICAgICAgICAgICAgICAgICAgICQoYmlsaV92aWRlb190YWcpWzBdICYmICgkKGJpbGlfdmlkZW9fdGFnKVswXS5vbmVuZGVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9KSwgJCgiYm9keSIpLm9uKCJjbGljayIsICJsaS5idWktc2VsZWN0LWl0ZW0iLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9KSksIHNldEludGVydmFsKChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgKGNoZWNrLnEgIT09IHZpZGVvLmdldF9xdWFsaXR5KCkucSB8fCAiY2hlZXNlIiA9PT0gdmlkZW8udHlwZSgpICYmIGNoZWNrLmVwaWQgIT09IHZpZGVvLmJhc2UoKS5lcGlkKCkpICYmIGNoZWNrLnJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9KSwgMWUzKSwgJCgiYm9keSIpLm9uKCJjbGljayIsICIucmVjLWxpc3QiLCAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLnJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9KSksICQoImJvZHkiKS5vbigiY2xpY2siLCAiLmJpbGliaWxpLXBsYXllci1lbmRpbmctcGFuZWwtYm94LXZpZGVvcyIsIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2sucmVmcmVzaCgpOwogICAgICAgICAgICAgICAgICAgIH0pKSwgc2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmIgPSB2aWRlby5iYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrLmFpZCA9PT0gdmIuYWlkKCkgJiYgY2hlY2suY2lkID09PSB2Yi5jaWQoKSB8fCBjaGVjay5yZWZyZXNoKCk7CiAgICAgICAgICAgICAgICAgICAgfSksIDNlMyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gXSksIE1haW47CiAgICAgICAgfSgpLCBtYWluID0gTWFpbjsKICAgICAgICB3aW5kb3cuYnBfZnVuX2xvY2tlZCB8fCAod2luZG93LmJwX2Z1bl9sb2NrZWQgPSAhMCwgbnVsbCA9PSBsb2NhdGlvbi5ocmVmLm1hdGNoKC9eaHR0cHM6XC9cL3d3d1wubWNiYnNcLm5ldFwvdGVtcGxhdGVcL21jYmJzXC9pbWFnZVwvc3BlY2lhbF9waG90b19iZ1wucG5nLykgPyAkKCIuZXJyb3ItdGV4dCIpWzBdIHx8IHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAobmV3IG1haW4pLnJ1bigpOwogICAgICAgIH0pLCAzZTMpIDogbG9jYXRpb24uaHJlZi5tYXRjaCgiYWNjZXNzX2tleSIpICYmIHdpbmRvdyAhPT0gd2luZG93Lm9wZW5lciAmJiAod2luZG93LnN0b3AoKSwgCiAgICAgICAgd2luZG93Lm9wZW5lci5wb3N0TWVzc2FnZSgiYmlsaWJpbGktcGFyc2UtbG9naW4tY3JlZGVudGlhbHM6ICIgKyBsb2NhdGlvbi5ocmVmLCAiKiIpKSk7CiAgICB9KCk7Cn0pKCk7","requires":[{"meta":{"name":"jquery.min.js","url":"https://static.hdslb.com/js/jquery.min.js","ts":1695191547961,"mimetype":"text/javascript"},"source":""}]},{"name":"V2EX - 超级增强","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://v2ex.com/","https://v2ex.com/?tab=*","https://v2ex.com/t/*","https://v2ex.com/recent*","https://v2ex.com/go/*","https://*.v2ex.com/","https://*.v2ex.com/?tab=*","https://*.v2ex.com/t/*","https://*.v2ex.com/recent*","https://*.v2ex.com/go/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1695706322643,"data":{}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/458024-v2ex-%E8%B6%85%E7%BA%A7%E5%A2%9E%E5%BC%BA/code/V2EX%20-%20%E8%B6%85%E7%BA%A7%E5%A2%9E%E5%BC%BA.user.js","uuid":"22cfe986-73d9-4d33-96aa-9e40585ec7ae","source":"","requires":[{"meta":{"name":"vue.global.prod.js","url":"https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.prod.js","ts":1695706322811,"mimetype":"text/javascript"},"source":""}]}]}